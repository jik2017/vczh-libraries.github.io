<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.collections.ArrayBase`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Base type of all linear container.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;Type of elements.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::collections::T" OverloadKey="::vl::collections::ArrayBase`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="ArrayBase" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase" OverloadKey="::vl::collections::ArrayBase`1" ClassType="Class">
          <Children>
            <ClassDecl Access="Protected" Name="Enumerator" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator" OverloadKey="::vl::collections::ArrayBase`1::Enumerator" ClassType="Class">
              <Children>
                <VarDecl Access="Private" Name="container" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator::container" OverloadKey="::vl::collections::ArrayBase`1::Enumerator::container" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::collections::ArrayBase" Name="ArrayBase">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::ArrayBase`1@s:vl.collections.ArrayBase`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Private" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator::index" OverloadKey="::vl::collections::ArrayBase`1::Enumerator::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <FuncDecl Access="Public" Name="Enumerator" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator::Enumerator" OverloadKey="::vl::collections::ArrayBase`1::Enumerator::Enumerator(* const ArrayBase&lt;T&gt;,vint)" Virtual="Normal" Function="Constructor">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="void" />
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="_container" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator::Enumerator::_container" OverloadKey="::vl::collections::ArrayBase`1::Enumerator::Enumerator(* const ArrayBase&lt;T&gt;,vint)::_container" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <GenericTypeDecl>
                                      <Element>
                                        <RefTypeDecl ReferencingNameKey="::vl::collections::ArrayBase" Name="ArrayBase">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::collections::ArrayBase`1@s:vl.collections.ArrayBase`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Element>
                                      <TypeArguments>
                                        <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </TypeArguments>
                                    </GenericTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                        <VarDecl Access="Public" Name="_index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator::Enumerator::_index" OverloadKey="::vl::collections::ArrayBase`1::Enumerator::Enumerator(* const ArrayBase&lt;T&gt;,vint)::_index" Static="False">
                          <Type>
                            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::vint@s:vl.vint" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
                <FuncDecl Access="Public" Name="Clone" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator::Clone" OverloadKey="::vl::collections::ArrayBase`1::Enumerator::Clone()const" Virtual="Normal" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="True">
                      <ReturnType>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::collections::IEnumerator" Name="IEnumerator">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::IEnumerator`1@s:vl.collections.IEnumerator`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </ReturnType>
                      <Parameters />
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
                <FuncDecl Access="Public" Name="Current" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator::Current" OverloadKey="::vl::collections::ArrayBase`1::Enumerator::Current()const" Virtual="Normal" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="True">
                      <ReturnType>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </ReturnType>
                      <Parameters />
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
                <FuncDecl Access="Public" Name="Index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator::Index" OverloadKey="::vl::collections::ArrayBase`1::Enumerator::Index()const" Virtual="Normal" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="True">
                      <ReturnType>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </ReturnType>
                      <Parameters />
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
                <FuncDecl Access="Public" Name="Next" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator::Next" OverloadKey="::vl::collections::ArrayBase`1::Enumerator::Next()" Virtual="Normal" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="bool" />
                      </ReturnType>
                      <Parameters />
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
                <FuncDecl Access="Public" Name="Reset" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Enumerator::Reset" OverloadKey="::vl::collections::ArrayBase`1::Enumerator::Reset()" Virtual="Normal" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="void" />
                      </ReturnType>
                      <Parameters />
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Children>
              <BaseTypes>
                <BaseTypeDecl Access="Public" Tags="x86, Windows">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Object@s:vl.Object" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </BaseTypeDecl>
                <BaseTypeDecl Access="Public" Tags="x86, Windows">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::collections::IEnumerator" Name="IEnumerator">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::IEnumerator`1@s:vl.collections.IEnumerator`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </BaseTypeDecl>
              </BaseTypes>
            </ClassDecl>
            <VarDecl Access="Protected" Name="buffer" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::buffer" OverloadKey="::vl::collections::ArrayBase`1::buffer" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl Name="void" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Protected" Name="count" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::count" OverloadKey="::vl::collections::ArrayBase`1::count" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Protected" Name="AddressOf" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::AddressOf" OverloadKey="::vl::collections::ArrayBase`1::AddressOf(* void,vint)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="void" />
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="bufferOfTs" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::AddressOf::bufferOfTs" OverloadKey="::vl::collections::ArrayBase`1::AddressOf(* void,vint)::bufferOfTs" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::AddressOf::index" OverloadKey="::vl::collections::ArrayBase`1::AddressOf(* void,vint)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Protected" Name="ItemOf" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::ItemOf" OverloadKey="::vl::collections::ArrayBase`1::ItemOf(vint)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::ItemOf::index" OverloadKey="::vl::collections::ArrayBase`1::ItemOf(vint)const::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Protected" Name="ItemOf" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::ItemOf" OverloadKey="::vl::collections::ArrayBase`1::ItemOf(vint)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::ItemOf::index" OverloadKey="::vl::collections::ArrayBase`1::ItemOf(vint)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="ArrayBase" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::ArrayBase" OverloadKey="::vl::collections::ArrayBase`1::ArrayBase()" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="CreateEnumerator" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::CreateEnumerator" OverloadKey="::vl::collections::ArrayBase`1::CreateEnumerator()const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::IEnumerator" Name="IEnumerator">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::IEnumerator`1@s:vl.collections.IEnumerator`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Count" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Count" OverloadKey="::vl::collections::ArrayBase`1::Count()const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Get the number of elements in the container.&lt;/summary&gt;
  &lt;returns&gt;The number of elements.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Get" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Get" OverloadKey="::vl::collections::ArrayBase`1::Get(vint)const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Get the reference to the specified element.&lt;/summary&gt;
  &lt;returns&gt;The reference to the specified element.&lt;/returns&gt;
  &lt;param name="index"&gt;The index of the element.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::Get::index" OverloadKey="::vl::collections::ArrayBase`1::Get(vint)const::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator []" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::operator []" OverloadKey="::vl::collections::ArrayBase`1::operator [](vint)const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Get the reference to the specified element.&lt;/summary&gt;
  &lt;returns&gt;The reference to the specified element.&lt;/returns&gt;
  &lt;param name="index"&gt;The index of the element.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::collections::ArrayBase::operator []::index" OverloadKey="::vl::collections::ArrayBase`1::operator [](vint)const::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::collections::ListStore" Name="ListStore">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::ListStore`2@s:vl.collections.ListStore`2" />
                        <Key Value="::vl::collections::ListStore`1&lt;T,&lt;false&gt;&gt;@s:vl.collections.ListStore`1{T,{false}}" />
                        <Key Value="::vl::collections::ListStore`1&lt;T,&lt;true&gt;&gt;@s:vl.collections.ListStore`1{T,{true}}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                    <SubTypeDecl ReferencingNameKey="::vl::POD::Result" Name="Result">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::POD`1::Result@s:vl.POD`1" />
                        <Key Value="::vl::POD`0&lt;bool&gt;::Result@s:vl.POD`0{bool}" />
                        <Key Value="::vl::POD`0&lt;vint8_t&gt;::Result@s:vl.POD`0{vint8_t}" />
                        <Key Value="::vl::POD`0&lt;vuint8_t&gt;::Result@s:vl.POD`0{vuint8_t}" />
                        <Key Value="::vl::POD`0&lt;vint16_t&gt;::Result@s:vl.POD`0{vint16_t}" />
                        <Key Value="::vl::POD`0&lt;vuint16_t&gt;::Result@s:vl.POD`0{vuint16_t}" />
                        <Key Value="::vl::POD`0&lt;vint32_t&gt;::Result@s:vl.POD`0{vint32_t}" />
                        <Key Value="::vl::POD`0&lt;vuint32_t&gt;::Result@s:vl.POD`0{vuint32_t}" />
                        <Key Value="::vl::POD`0&lt;vint64_t&gt;::Result@s:vl.POD`0{vint64_t}" />
                        <Key Value="::vl::POD`0&lt;vuint64_t&gt;::Result@s:vl.POD`0{vuint64_t}" />
                        <Key Value="::vl::POD`0&lt;char&gt;::Result@s:vl.POD`0{char}" />
                        <Key Value="::vl::POD`0&lt;wchar_t&gt;::Result@s:vl.POD`0{wchar_t}" />
                        <Key Value="::vl::POD`1&lt;* T&gt;::Result@s:vl.POD`1{^ T}" />
                        <Key Value="::vl::POD`1&lt;&amp; T&gt;::Result@s:vl.POD`1{&amp; T}" />
                        <Key Value="::vl::POD`2&lt;* C::(T)&gt;::Result@s:vl.POD`2{^ C.(T)}" />
                        <Key Value="::vl::POD`2&lt;array[_Size] T&gt;::Result@s:vl.POD`2{array[_Size] T}" />
                        <Key Value="::vl::POD`1&lt;const T&gt;::Result@s:vl.POD`1{const T}" />
                        <Key Value="::vl::POD`1&lt;volatile T&gt;::Result@s:vl.POD`1{volatile T}" />
                        <Key Value="::vl::POD`1&lt;const volatile T&gt;::Result@s:vl.POD`1{const volatile T}" />
                        <Key Value="::vl::POD`2&lt;collections::Pair&lt;K, V&gt;&gt;::Result@s:vl.POD`2{collections.Pair{K, V}}" />
                        <Key Value="::vl::POD`1&lt;Ptr&lt;T&gt;&gt;::Result@s:vl.POD`1{Ptr{T}}" />
                        <Key Value="::vl::POD`1&lt;ComPtr&lt;T&gt;&gt;::Result@s:vl.POD`1{ComPtr{T}}" />
                        <Key Value="::vl::POD`0&lt;regex_internal::CharRange&gt;::Result@s:vl.POD`0{regex_internal.CharRange}" />
                        <Key Value="::vl::POD`0&lt;regex_internal::CaptureRecord&gt;::Result@s:vl.POD`0{regex_internal.CaptureRecord}" />
                        <Key Value="::vl::POD`0&lt;presentation::elements_windows_gdi::UniscribeColorRange&gt;::Result@s:vl.POD`0{presentation.elements_windows_gdi.UniscribeColorRange}" />
                        <Key Value="::vl::POD`0&lt;presentation::elements_windows_gdi::UniscribeColor&gt;::Result@s:vl.POD`0{presentation.elements_windows_gdi.UniscribeColor}" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::POD" Name="POD">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::POD`1@s:vl.POD`1" />
                                <Key Value="::vl::POD`0&lt;bool&gt;@s:vl.POD`0{bool}" />
                                <Key Value="::vl::POD`0&lt;vint8_t&gt;@s:vl.POD`0{vint8_t}" />
                                <Key Value="::vl::POD`0&lt;vuint8_t&gt;@s:vl.POD`0{vuint8_t}" />
                                <Key Value="::vl::POD`0&lt;vint16_t&gt;@s:vl.POD`0{vint16_t}" />
                                <Key Value="::vl::POD`0&lt;vuint16_t&gt;@s:vl.POD`0{vuint16_t}" />
                                <Key Value="::vl::POD`0&lt;vint32_t&gt;@s:vl.POD`0{vint32_t}" />
                                <Key Value="::vl::POD`0&lt;vuint32_t&gt;@s:vl.POD`0{vuint32_t}" />
                                <Key Value="::vl::POD`0&lt;vint64_t&gt;@s:vl.POD`0{vint64_t}" />
                                <Key Value="::vl::POD`0&lt;vuint64_t&gt;@s:vl.POD`0{vuint64_t}" />
                                <Key Value="::vl::POD`0&lt;char&gt;@s:vl.POD`0{char}" />
                                <Key Value="::vl::POD`0&lt;wchar_t&gt;@s:vl.POD`0{wchar_t}" />
                                <Key Value="::vl::POD`1&lt;* T&gt;@s:vl.POD`1{^ T}" />
                                <Key Value="::vl::POD`1&lt;&amp; T&gt;@s:vl.POD`1{&amp; T}" />
                                <Key Value="::vl::POD`2&lt;* C::(T)&gt;@s:vl.POD`2{^ C.(T)}" />
                                <Key Value="::vl::POD`2&lt;array[_Size] T&gt;@s:vl.POD`2{array[_Size] T}" />
                                <Key Value="::vl::POD`1&lt;const T&gt;@s:vl.POD`1{const T}" />
                                <Key Value="::vl::POD`1&lt;volatile T&gt;@s:vl.POD`1{volatile T}" />
                                <Key Value="::vl::POD`1&lt;const volatile T&gt;@s:vl.POD`1{const volatile T}" />
                                <Key Value="::vl::POD`2&lt;collections::Pair&lt;K, V&gt;&gt;@s:vl.POD`2{collections.Pair{K, V}}" />
                                <Key Value="::vl::POD`1&lt;Ptr&lt;T&gt;&gt;@s:vl.POD`1{Ptr{T}}" />
                                <Key Value="::vl::POD`1&lt;ComPtr&lt;T&gt;&gt;@s:vl.POD`1{ComPtr{T}}" />
                                <Key Value="::vl::POD`0&lt;regex_internal::CharRange&gt;@s:vl.POD`0{regex_internal.CharRange}" />
                                <Key Value="::vl::POD`0&lt;regex_internal::CaptureRecord&gt;@s:vl.POD`0{regex_internal.CaptureRecord}" />
                                <Key Value="::vl::POD`0&lt;presentation::elements_windows_gdi::UniscribeColorRange&gt;@s:vl.POD`0{presentation.elements_windows_gdi.UniscribeColorRange}" />
                                <Key Value="::vl::POD`0&lt;presentation::elements_windows_gdi::UniscribeColor&gt;@s:vl.POD`0{presentation.elements_windows_gdi.UniscribeColor}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::collections::IEnumerable" Name="IEnumerable">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::IEnumerable`1@s:vl.collections.IEnumerable`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::collections::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::ArrayBase`1::T@s:vl.collections.ArrayBase`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>