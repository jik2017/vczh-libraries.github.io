<?xml version="1.0" encoding="utf-8"?>
<Namespace DisplayName="::vl::workflow::emitter">
  <Overloads DisplayName="Compile function">
    <Symbol Key="::vl::workflow::emitter::Compile(Ptr&lt;parsing::tabling::ParsingTable&gt;,* analyzer::WfLexicalScopeManager,&amp; collections::List&lt;WString&gt;,&amp; collections::List&lt;Ptr&lt;parsing::ParsingError&gt;&gt;)" UrlName="vl.workflow.emitter.Compile(Ptr{parsing.tabling.ParsingTable},^ analyzer.WfLexicalScopeManager,&amp; collections.List{WString},&amp; collections.List{Ptr{parsing.ParsingError}})" Doc="true" />
    <Symbol Key="::vl::workflow::emitter::Compile(Ptr&lt;parsing::tabling::ParsingTable&gt;,&amp; collections::List&lt;WString&gt;,&amp; collections::List&lt;Ptr&lt;parsing::ParsingError&gt;&gt;)" UrlName="vl.workflow.emitter.Compile(Ptr{parsing.tabling.ParsingTable},&amp; collections.List{WString},&amp; collections.List{Ptr{parsing.ParsingError}})" Doc="true" />
  </Overloads>
  <Overloads DisplayName="GenerateAssembly function">
    <Symbol Key="::vl::workflow::emitter::GenerateAssembly(* analyzer::WfLexicalScopeManager,* IWfCompilerCallback)" UrlName="vl.workflow.emitter.GenerateAssembly(^ analyzer.WfLexicalScopeManager,^ IWfCompilerCallback)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="GenerateClosureInstructions function">
    <Symbol Key="::vl::workflow::emitter::GenerateClosureInstructions(&amp; WfCodegenContext,Ptr&lt;WfCodegenFunctionContext&gt;)" UrlName="vl.workflow.emitter.GenerateClosureInstructions(&amp; WfCodegenContext,Ptr{WfCodegenFunctionContext})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GenerateDeclarationInstructions function">
    <Symbol Key="::vl::workflow::emitter::GenerateDeclarationInstructions(&amp; WfCodegenContext,Ptr&lt;WfDeclaration&gt;)" UrlName="vl.workflow.emitter.GenerateDeclarationInstructions(&amp; WfCodegenContext,Ptr{WfDeclaration})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GenerateExpressionInstructions function">
    <Symbol Key="::vl::workflow::emitter::GenerateExpressionInstructions(&amp; WfCodegenContext,Ptr&lt;WfExpression&gt;,Ptr&lt;reflection::description::ITypeInfo&gt;)" UrlName="vl.workflow.emitter.GenerateExpressionInstructions(&amp; WfCodegenContext,Ptr{WfExpression},Ptr{reflection.description.ITypeInfo})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GenerateFunctionDeclarationMetadata function">
    <Symbol Key="::vl::workflow::emitter::GenerateFunctionDeclarationMetadata(&amp; WfCodegenContext,* WfFunctionDeclaration,Ptr&lt;runtime::WfAssemblyFunction&gt;)" UrlName="vl.workflow.emitter.GenerateFunctionDeclarationMetadata(&amp; WfCodegenContext,^ WfFunctionDeclaration,Ptr{runtime.WfAssemblyFunction})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GenerateGlobalDeclarationMetadata function">
    <Symbol Key="::vl::workflow::emitter::GenerateGlobalDeclarationMetadata(&amp; WfCodegenContext,Ptr&lt;WfDeclaration&gt;,&amp; const WString)" UrlName="vl.workflow.emitter.GenerateGlobalDeclarationMetadata(&amp; WfCodegenContext,Ptr{WfDeclaration},&amp; const WString)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GenerateInitializeInstructions function">
    <Symbol Key="::vl::workflow::emitter::GenerateInitializeInstructions(&amp; WfCodegenContext,Ptr&lt;WfDeclaration&gt;)" UrlName="vl.workflow.emitter.GenerateInitializeInstructions(&amp; WfCodegenContext,Ptr{WfDeclaration})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GenerateStatementInstructions function">
    <Symbol Key="::vl::workflow::emitter::GenerateStatementInstructions(&amp; WfCodegenContext,Ptr&lt;WfStatement&gt;)" UrlName="vl.workflow.emitter.GenerateStatementInstructions(&amp; WfCodegenContext,Ptr{WfStatement})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GenerateTypeCastInstructions function">
    <Symbol Key="::vl::workflow::emitter::GenerateTypeCastInstructions(&amp; WfCodegenContext,Ptr&lt;reflection::description::ITypeInfo&gt;,bool,* WfExpression)" UrlName="vl.workflow.emitter.GenerateTypeCastInstructions(&amp; WfCodegenContext,Ptr{reflection.description.ITypeInfo},bool,^ WfExpression)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GenerateTypeTestingInstructions function">
    <Symbol Key="::vl::workflow::emitter::GenerateTypeTestingInstructions(&amp; WfCodegenContext,Ptr&lt;reflection::description::ITypeInfo&gt;,* WfExpression)" UrlName="vl.workflow.emitter.GenerateTypeTestingInstructions(&amp; WfCodegenContext,Ptr{reflection.description.ITypeInfo},^ WfExpression)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GetInstructionTypeArgument function">
    <Symbol Key="::vl::workflow::emitter::GetInstructionTypeArgument(Ptr&lt;reflection::description::ITypeInfo&gt;)" UrlName="vl.workflow.emitter.GetInstructionTypeArgument(Ptr{reflection.description.ITypeInfo})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfAttributeEvaluator class">
    <Symbol Key="::vl::workflow::emitter::WfAttributeEvaluator" UrlName="vl.workflow.emitter.WfAttributeEvaluator" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCodegenContext class">
    <Symbol Key="::vl::workflow::emitter::WfCodegenContext" UrlName="vl.workflow.emitter.WfCodegenContext" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCodegenFunctionContext class">
    <Symbol Key="::vl::workflow::emitter::WfCodegenFunctionContext" UrlName="vl.workflow.emitter.WfCodegenFunctionContext" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCodegenLambdaContext struct">
    <Symbol Key="::vl::workflow::emitter::WfCodegenLambdaContext" UrlName="vl.workflow.emitter.WfCodegenLambdaContext" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCodegenScopeContext class">
    <Symbol Key="::vl::workflow::emitter::WfCodegenScopeContext" UrlName="vl.workflow.emitter.WfCodegenScopeContext" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCodegenScopeType enum">
    <Symbol Key="::vl::workflow::emitter::WfCodegenScopeType" UrlName="vl.workflow.emitter.WfCodegenScopeType" Doc="false" />
  </Overloads>
</Namespace>