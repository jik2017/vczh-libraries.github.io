<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.FunctionType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit`1(* const Func&lt;T&gt;)::T" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit`1(* const Func&lt;T&gt;)" />
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::TDerived" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;" DisplayName="TypeFlagTester struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit`1(* const Func&lt;T&gt;)" DisplayName="Inherit function" Doc="false" />
        <Overloads DisplayName="Inherit method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit(* void)" DisplayName="Inherit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit(* const void)" DisplayName="Inherit method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.EnumerableType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit`1(* const collections::LazyList&lt;T&gt;)::T" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit`1(* const collections::LazyList&lt;T&gt;)" />
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::TDerived" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;" DisplayName="TypeFlagTester struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit`1(* const collections::LazyList&lt;T&gt;)" DisplayName="Inherit function" Doc="false" />
        <Overloads DisplayName="Inherit method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit(* void)" DisplayName="Inherit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit(* const void)" DisplayName="Inherit method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ReadonlyListType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit`1(* const collections::IEnumerable&lt;T&gt;)::T" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit`1(* const collections::IEnumerable&lt;T&gt;)" />
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::TDerived" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;" DisplayName="TypeFlagTester struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit`1(* const collections::IEnumerable&lt;T&gt;)" DisplayName="Inherit function" Doc="false" />
        <Overloads DisplayName="Inherit method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit(* void)" DisplayName="Inherit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit(* const void)" DisplayName="Inherit method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ListType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)::T" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)" />
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::TDerived" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;" DisplayName="TypeFlagTester struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)" DisplayName="Inherit function" Doc="false" />
        <Overloads DisplayName="Inherit method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit(* void)" DisplayName="Inherit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit(* const void)" DisplayName="Inherit method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ObservableListType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit`1(* collections::ObservableList&lt;T&gt;)::T" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit`1(* collections::ObservableList&lt;T&gt;)" />
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::TDerived" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;" DisplayName="TypeFlagTester struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit`1(* collections::ObservableList&lt;T&gt;)" DisplayName="Inherit function" Doc="false" />
        <Overloads DisplayName="Inherit method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit(* void)" DisplayName="Inherit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit(* const void)" DisplayName="Inherit method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ReadonlyDictionaryType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)::K" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)" />
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)::V" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)" />
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::TDerived" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;" DisplayName="TypeFlagTester struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)" DisplayName="Inherit function" Doc="false" />
        <Overloads DisplayName="Inherit method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit(* void)" DisplayName="Inherit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit(* const void)" DisplayName="Inherit method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.DictionaryType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)::K" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)" />
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)::V" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)" />
        <Map From="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::TDerived" To="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;" DisplayName="TypeFlagTester struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)" DisplayName="Inherit function" Doc="false" />
        <Overloads DisplayName="Inherit method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit(* void)" DisplayName="Inherit method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit(* const void)" DisplayName="Inherit method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>