<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex.RegexLexerColorizer">
    <ClassDecl Access="Public" Name="RegexLexerColorizer" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer" OverloadKey="::vl::regex::RegexLexerColorizer" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Lexical colorizer.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <ClassDecl Access="Public" Name="InternalState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::InternalState" OverloadKey="::vl::regex::RegexLexerColorizer::InternalState" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="currentState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::InternalState::currentState" OverloadKey="::vl::regex::RegexLexerColorizer::InternalState::currentState" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="interTokenId" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::InternalState::interTokenId" OverloadKey="::vl::regex::RegexLexerColorizer::InternalState::interTokenId" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="interTokenState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::InternalState::interTokenState" OverloadKey="::vl::regex::RegexLexerColorizer::InternalState::interTokenState" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl Name="void" />
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
        <VarDecl Access="Protected" Name="walker" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::walker" OverloadKey="::vl::regex::RegexLexerColorizer::walker" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexLexerWalker" Name="RegexLexerWalker">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex::RegexLexerWalker@s:vl.regex.RegexLexerWalker" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::proc" OverloadKey="::vl::regex::RegexLexerColorizer::proc" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexProc" Name="RegexProc">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex::RegexProc@s:vl.regex.RegexProc" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="internalState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::internalState" OverloadKey="::vl::regex::RegexLexerColorizer::internalState" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexLexerColorizer::InternalState" Name="InternalState">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex::RegexLexerColorizer::InternalState@s:vl.regex.RegexLexerColorizer" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="CallExtendProcAndColorizeProc" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::CallExtendProcAndColorizeProc" OverloadKey="::vl::regex::RegexLexerColorizer::CallExtendProcAndColorizeProc(* const wchar_t,vint,&amp; RegexProcessingToken,bool)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::CallExtendProcAndColorizeProc::input" OverloadKey="::vl::regex::RegexLexerColorizer::CallExtendProcAndColorizeProc(* const wchar_t,vint,&amp; RegexProcessingToken,bool)::input" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl Name="wchar_t" />
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="length" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::CallExtendProcAndColorizeProc::length" OverloadKey="::vl::regex::RegexLexerColorizer::CallExtendProcAndColorizeProc(* const wchar_t,vint,&amp; RegexProcessingToken,bool)::length" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="token" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::CallExtendProcAndColorizeProc::token" OverloadKey="::vl::regex::RegexLexerColorizer::CallExtendProcAndColorizeProc(* const wchar_t,vint,&amp; RegexProcessingToken,bool)::token" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::regex::RegexProcessingToken" Name="RegexProcessingToken">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex::RegexProcessingToken@s:vl.regex.RegexProcessingToken" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="colorize" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::CallExtendProcAndColorizeProc::colorize" OverloadKey="::vl::regex::RegexLexerColorizer::CallExtendProcAndColorizeProc(* const wchar_t,vint,&amp; RegexProcessingToken,bool)::colorize" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="WalkOneToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::WalkOneToken" OverloadKey="::vl::regex::RegexLexerColorizer::WalkOneToken(* const wchar_t,vint,vint,bool)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::WalkOneToken::input" OverloadKey="::vl::regex::RegexLexerColorizer::WalkOneToken(* const wchar_t,vint,vint,bool)::input" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl Name="wchar_t" />
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="length" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::WalkOneToken::length" OverloadKey="::vl::regex::RegexLexerColorizer::WalkOneToken(* const wchar_t,vint,vint,bool)::length" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::WalkOneToken::start" OverloadKey="::vl::regex::RegexLexerColorizer::WalkOneToken(* const wchar_t,vint,vint,bool)::start" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="colorize" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::WalkOneToken::colorize" OverloadKey="::vl::regex::RegexLexerColorizer::WalkOneToken(* const wchar_t,vint,vint,bool)::colorize" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="RegexLexerColorizer" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::RegexLexerColorizer" OverloadKey="::vl::regex::RegexLexerColorizer::RegexLexerColorizer(&amp; const RegexLexerWalker,RegexProc)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_walker" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::RegexLexerColorizer::_walker" OverloadKey="::vl::regex::RegexLexerColorizer::RegexLexerColorizer(&amp; const RegexLexerWalker,RegexProc)::_walker" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexLexerWalker" Name="RegexLexerWalker">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexLexerWalker@s:vl.regex.RegexLexerWalker" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::RegexLexerColorizer::_proc" OverloadKey="::vl::regex::RegexLexerColorizer::RegexLexerColorizer(&amp; const RegexLexerWalker,RegexProc)::_proc" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex::RegexProc" Name="RegexProc">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex::RegexProc@s:vl.regex.RegexProc" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RegexLexerColorizer" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::RegexLexerColorizer" OverloadKey="::vl::regex::RegexLexerColorizer::RegexLexerColorizer(&amp; const RegexLexerColorizer)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="colorizer" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::RegexLexerColorizer::colorizer" OverloadKey="::vl::regex::RegexLexerColorizer::RegexLexerColorizer(&amp; const RegexLexerColorizer)::colorizer" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexLexerColorizer" Name="RegexLexerColorizer">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexLexerColorizer@s:vl.regex.RegexLexerColorizer" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~RegexLexerColorizer" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::~RegexLexerColorizer" OverloadKey="::vl::regex::RegexLexerColorizer::~RegexLexerColorizer()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetInternalState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::GetInternalState" OverloadKey="::vl::regex::RegexLexerColorizer::GetInternalState()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the internal state.&lt;/summary&gt;
  &lt;returns&gt;The internal state.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexLexerColorizer::InternalState" Name="InternalState">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexLexerColorizer::InternalState@s:vl.regex.RegexLexerColorizer" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetInternalState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::SetInternalState" OverloadKey="::vl::regex::RegexLexerColorizer::SetInternalState(InternalState)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Restore the colorizer to a internal state.&lt;/summary&gt;
  &lt;param name="value"&gt;The internal state.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="state" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::SetInternalState::state" OverloadKey="::vl::regex::RegexLexerColorizer::SetInternalState(InternalState)::state" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex::RegexLexerColorizer::InternalState" Name="InternalState">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex::RegexLexerColorizer::InternalState@s:vl.regex.RegexLexerColorizer" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Pass" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::Pass" OverloadKey="::vl::regex::RegexLexerColorizer::Pass(wchar_t)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Step forward by one character.&lt;/summary&gt;
  &lt;param name="input"&gt;The input character.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::Pass::input" OverloadKey="::vl::regex::RegexLexerColorizer::Pass(wchar_t)::input" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetStartState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::GetStartState" OverloadKey="::vl::regex::RegexLexerColorizer::GetStartState()const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the start DFA state number, which represents the correct state before colorizing any characters.&lt;/summary&gt;
  &lt;returns&gt;The DFA state number.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Colorize" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::Colorize" OverloadKey="::vl::regex::RegexLexerColorizer::Colorize(* const wchar_t,vint)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Colorize a text.&lt;/summary&gt;	GetCurrentState()const;
&lt;returns&gt;An inter token state at the end of this line. It could be the same object which is returned from the previous call.&lt;/returns&gt;&lt;param name="input"&gt;The text to colorize.&lt;/param&gt;&lt;param name="length"&gt;Size of the text in characters.&lt;/param&gt;&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl Name="void" />
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::Colorize::input" OverloadKey="::vl::regex::RegexLexerColorizer::Colorize(* const wchar_t,vint)::input" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl Name="wchar_t" />
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="length" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerColorizer::Colorize::length" OverloadKey="::vl::regex::RegexLexerColorizer::Colorize(* const wchar_t,vint)::length" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>