<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex.RegexProc">
    <ClassDecl Access="Public" Name="RegexProc" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProc" OverloadKey="::vl::regex::RegexProc" ClassType="Struct">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Callback procedures&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Public" Name="deleter" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProc::deleter" OverloadKey="::vl::regex::RegexProc::deleter" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
The deleter which deletes inter token state objects created by &lt;links&gt;&lt;link cref="::vl::regex::RegexProc::extendProc@s:vl.regex.RegexProc" /&gt;&lt;/links&gt;. This callback is not called automatically.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexInterTokenStateDeleter" Name="RegexInterTokenStateDeleter">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex::RegexInterTokenStateDeleter@s:vl.regex.RegexInterTokenStateDeleter" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="extendProc" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProc::extendProc" OverloadKey="::vl::regex::RegexProc::extendProc" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
The token extend callback. It is called after recognizing any token, and run a customized procedure to modify the token based on the given context.
If the length parameter is -1, it means the caller does not measure the incoming text buffer, which automatically indicates that the buffer is null-terminated.
If the length parameter is not -1, it means the number of available characters in the buffer.
The completeText parameter could be true or false. When it is false, it means that the buffer does not contain all the text.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexTokenExtendProc" Name="RegexTokenExtendProc">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex::RegexTokenExtendProc@s:vl.regex.RegexTokenExtendProc" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="colorizeProc" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProc::colorizeProc" OverloadKey="::vl::regex::RegexProc::colorizeProc" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
The colorizer callback. It is called when a token is recognized.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexTokenColorizeProc" Name="RegexTokenColorizeProc">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex::RegexTokenColorizeProc@s:vl.regex.RegexTokenColorizeProc" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="argument" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProc::argument" OverloadKey="::vl::regex::RegexProc::argument" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
The argument object that is the first argument for &lt;links&gt;&lt;link cref="::vl::regex::RegexProc::extendProc@s:vl.regex.RegexProc" /&gt;&lt;/links&gt; and &lt;links&gt;&lt;link cref="::vl::regex::RegexProc::colorizeProc@s:vl.regex.RegexProc" /&gt;&lt;/links&gt;.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl Name="void" />
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
      </Children>
      <BaseTypes />
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>