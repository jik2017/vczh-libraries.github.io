<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex.RegexLexerWalker">
    <ClassDecl Access="Public" Name="RegexLexerWalker" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker" OverloadKey="::vl::regex::RegexLexerWalker" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Lexical walker.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Protected" Name="pure" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::pure" OverloadKey="::vl::regex::RegexLexerWalker::pure" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::regex_internal::PureInterpretor" Name="PureInterpretor">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::PureInterpretor@s:vl.regex_internal.PureInterpretor" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal" Name="regex_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal@ns:vl.regex_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="stateTokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::stateTokens" OverloadKey="::vl::regex::RegexLexerWalker::stateTokens" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="LeftRef">
              <Element>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections@ns:vl.collections" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="RegexLexerWalker" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::RegexLexerWalker" OverloadKey="::vl::regex::RegexLexerWalker::RegexLexerWalker(* regex_internal::PureInterpretor,&amp; const collections::Array&lt;vint&gt;)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_pure" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::RegexLexerWalker::_pure" OverloadKey="::vl::regex::RegexLexerWalker::RegexLexerWalker(* regex_internal::PureInterpretor,&amp; const collections::Array&lt;vint&gt;)::_pure" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::PureInterpretor" Name="PureInterpretor">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::PureInterpretor@s:vl.regex_internal.PureInterpretor" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal" Name="regex_internal">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal@ns:vl.regex_internal" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_stateTokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::RegexLexerWalker::_stateTokens" OverloadKey="::vl::regex::RegexLexerWalker::RegexLexerWalker(* regex_internal::PureInterpretor,&amp; const collections::Array&lt;vint&gt;)::_stateTokens" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections@ns:vl.collections" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::vint@s:vl.vint" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RegexLexerWalker" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::RegexLexerWalker" OverloadKey="::vl::regex::RegexLexerWalker::RegexLexerWalker(&amp; const RegexLexerWalker)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="tokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::RegexLexerWalker::tokens" OverloadKey="::vl::regex::RegexLexerWalker::RegexLexerWalker(&amp; const RegexLexerWalker)::tokens" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexLexerWalker" Name="RegexLexerWalker">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexLexerWalker@s:vl.regex.RegexLexerWalker" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~RegexLexerWalker" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::~RegexLexerWalker" OverloadKey="::vl::regex::RegexLexerWalker::~RegexLexerWalker()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetStartState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::GetStartState" OverloadKey="::vl::regex::RegexLexerWalker::GetStartState()const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the start DFA state number, which represents the correct state before parsing any input.&lt;/summary&gt;
  &lt;returns&gt;The DFA state number.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetRelatedToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::GetRelatedToken" OverloadKey="::vl::regex::RegexLexerWalker::GetRelatedToken(vint)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if this state can only lead to the end of one kind of token.&lt;/summary&gt;
  &lt;returns&gt;Returns the token index if this state can only lead to the end of one kind of token. Returns -1 if not.&lt;/returns&gt;
  &lt;param name="state"&gt;The DFA state number.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="state" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::GetRelatedToken::state" OverloadKey="::vl::regex::RegexLexerWalker::GetRelatedToken(vint)const::state" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Walk" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::Walk" OverloadKey="::vl::regex::RegexLexerWalker::Walk(wchar_t,&amp; vint,&amp; vint,&amp; bool,&amp; bool)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Step forward by one character.&lt;/summary&gt;
  &lt;param name="input"&gt;The input character.&lt;/param&gt;
  &lt;param name="state"&gt;The current state. Returns the new current state when this function returns.&lt;/param&gt;
  &lt;param name="token"&gt;Returns the token index at the end of the token.&lt;/param&gt;
  &lt;param name="finalState"&gt;Returns true if it reach the end of the token.&lt;/param&gt;
  &lt;param name="previousTokenStop"&gt;Returns true if the last character is the end of the token.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::Walk::input" OverloadKey="::vl::regex::RegexLexerWalker::Walk(wchar_t,&amp; vint,&amp; vint,&amp; bool,&amp; bool)const::input" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="state" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::Walk::state" OverloadKey="::vl::regex::RegexLexerWalker::Walk(wchar_t,&amp; vint,&amp; vint,&amp; bool,&amp; bool)const::state" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="token" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::Walk::token" OverloadKey="::vl::regex::RegexLexerWalker::Walk(wchar_t,&amp; vint,&amp; vint,&amp; bool,&amp; bool)const::token" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="finalState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::Walk::finalState" OverloadKey="::vl::regex::RegexLexerWalker::Walk(wchar_t,&amp; vint,&amp; vint,&amp; bool,&amp; bool)const::finalState" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl Name="bool" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="previousTokenStop" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::Walk::previousTokenStop" OverloadKey="::vl::regex::RegexLexerWalker::Walk(wchar_t,&amp; vint,&amp; vint,&amp; bool,&amp; bool)const::previousTokenStop" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl Name="bool" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Walk" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::Walk" OverloadKey="::vl::regex::RegexLexerWalker::Walk(wchar_t,vint)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Step forward by one character.&lt;/summary&gt;
  &lt;returns&gt;Returns the new current state.&lt;/returns&gt;
  &lt;param name="input"&gt;The input character.&lt;/param&gt;
  &lt;param name="state"&gt;The current state.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::Walk::input" OverloadKey="::vl::regex::RegexLexerWalker::Walk(wchar_t,vint)const::input" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="state" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::Walk::state" OverloadKey="::vl::regex::RegexLexerWalker::Walk(wchar_t,vint)const::state" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsClosedToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::IsClosedToken" OverloadKey="::vl::regex::RegexLexerWalker::IsClosedToken(* const wchar_t,vint)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if the input text is a complete token.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the input text is a complete token.&lt;/returns&gt;
  &lt;param name="input"&gt;The input text.&lt;/param&gt;
  &lt;param name="length"&gt;Size of the input text in characters.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::IsClosedToken::input" OverloadKey="::vl::regex::RegexLexerWalker::IsClosedToken(* const wchar_t,vint)const::input" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl Name="wchar_t" />
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="length" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::IsClosedToken::length" OverloadKey="::vl::regex::RegexLexerWalker::IsClosedToken(* const wchar_t,vint)const::length" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsClosedToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::IsClosedToken" OverloadKey="::vl::regex::RegexLexerWalker::IsClosedToken(&amp; const WString)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test if the input is a complete token.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the input text is a complete token.&lt;/returns&gt;
  &lt;param name="input"&gt;The input text.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="input" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexerWalker::IsClosedToken::input" OverloadKey="::vl::regex::RegexLexerWalker::IsClosedToken(&amp; const WString)const::input" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>