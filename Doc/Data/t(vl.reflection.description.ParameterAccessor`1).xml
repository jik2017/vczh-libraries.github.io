<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.reflection.description.ParameterAccessor`1{T,TypeFlags.NonGenericType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::T" To="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;" DisplayName="ParameterAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::BoxParameter(&amp; const T,* ITypeDescriptor)" DisplayName="BoxParameter method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxParameter method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.ParameterAccessor`1{collections.LazyList{T},TypeFlags.EnumerableType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::T" To="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;" DisplayName="ParameterAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::BoxParameter(&amp; collections::LazyList&lt;T&gt;,* ITypeDescriptor)" DisplayName="BoxParameter method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::UnboxParameter(&amp; const Value,&amp; collections::LazyList&lt;T&gt;,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxParameter method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ReadonlyListType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::T" To="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;" DisplayName="ParameterAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)" DisplayName="BoxParameter method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxParameter method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ListType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::T" To="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;" DisplayName="ParameterAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)" DisplayName="BoxParameter method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxParameter method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.ParameterAccessor`1{collections.ObservableList{T},TypeFlags.ObservableListType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;::T" To="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;" DisplayName="ParameterAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;::BoxParameter(&amp; collections::ObservableList&lt;T&gt;,* ITypeDescriptor)" DisplayName="BoxParameter method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ReadonlyDictionaryType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::T" To="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;" DisplayName="ParameterAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)" DisplayName="BoxParameter method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxParameter method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.ParameterAccessor`1{T,TypeFlags.DictionaryType}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::T" To="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;" DisplayName="ParameterAccessor struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)" DisplayName="BoxParameter method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)" DisplayName="UnboxParameter method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>