<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # FunctionType )}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : FunctionType )&gt;&gt;::T" To="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : FunctionType )&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : FunctionType )&gt;&gt;" DisplayName="TypeFlagSelectorCase struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : FunctionType )&gt;&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # EnumerableType $ ( vint ) TypeFlags # # ReadonlyListType )}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T" To="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" DisplayName="TypeFlagSelectorCase struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # EnumerableType $ ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType )}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T" To="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" DisplayName="TypeFlagSelectorCase struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType )}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T" To="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" DisplayName="TypeFlagSelectorCase struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ObservableListType $ ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType )}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ObservableListType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T" To="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ObservableListType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ObservableListType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" DisplayName="TypeFlagSelectorCase struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ObservableListType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ReadonlyListType )}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T" To="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" DisplayName="TypeFlagSelectorCase struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType $ ( vint ) TypeFlags # # DictionaryType $ ( vint ) TypeFlags # # ReadonlyDictionaryType )}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : DictionaryType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;::T" To="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : DictionaryType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : DictionaryType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;" DisplayName="TypeFlagSelectorCase struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : DictionaryType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ReadonlyListType $ ( vint ) TypeFlags # # ReadonlyDictionaryType )}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;::T" To="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;" DisplayName="TypeFlagSelectorCase struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;::Result" DisplayName="Result field" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>