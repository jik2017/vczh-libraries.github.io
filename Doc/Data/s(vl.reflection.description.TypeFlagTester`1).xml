<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.FunctionType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TDerived" Tags="x86, Windows" NameKey="::vl::reflection::description::TDerived" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::TDerived" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TDerived" Name="TDerived">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::TDerived@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.FunctionType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::FunctionType" Name="FunctionType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::FunctionType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;" ClassType="Struct">
          <Children>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::T" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit`1(* const Func&lt;T&gt;)::T" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit`1(* const Func&lt;T&gt;)" Virtual="Static" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit`1(* const Func&lt;T&gt;)::source" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <GenericTypeDecl>
                                      <Element>
                                        <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Func`1@s:vl.Func`1" />
                                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Element>
                                      <TypeArguments>
                                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlagTester::T" Name="T">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit`1(* const Func&lt;T&gt;)::T@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.FunctionType}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </TypeArguments>
                                    </GenericTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit(* void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit(* void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit(* const void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Inherit(* const void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl Name="void" />
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Result" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::FunctionType&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.EnumerableType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TDerived" Tags="x86, Windows" NameKey="::vl::reflection::description::TDerived" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::TDerived" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TDerived" Name="TDerived">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::TDerived@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.EnumerableType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::EnumerableType" Name="EnumerableType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::EnumerableType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;" ClassType="Struct">
          <Children>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::T" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit`1(* const collections::LazyList&lt;T&gt;)::T" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit`1(* const collections::LazyList&lt;T&gt;)" Virtual="Static" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit`1(* const collections::LazyList&lt;T&gt;)::source" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <GenericTypeDecl>
                                      <Element>
                                        <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                                          </ReferencingOverloadKeys>
                                          <Parent>
                                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::collections@ns:vl.collections" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </Parent>
                                        </SubTypeDecl>
                                      </Element>
                                      <TypeArguments>
                                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlagTester::T" Name="T">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit`1(* const collections::LazyList&lt;T&gt;)::T@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.EnumerableType}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </TypeArguments>
                                    </GenericTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit(* void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit(* void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit(* const void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Inherit(* const void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl Name="void" />
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Result" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::EnumerableType&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ReadonlyListType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TDerived" Tags="x86, Windows" NameKey="::vl::reflection::description::TDerived" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::TDerived" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TDerived" Name="TDerived">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::TDerived@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ReadonlyListType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::ReadonlyListType" Name="ReadonlyListType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::ReadonlyListType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;" ClassType="Struct">
          <Children>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::T" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit`1(* const collections::IEnumerable&lt;T&gt;)::T" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit`1(* const collections::IEnumerable&lt;T&gt;)" Virtual="Static" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit`1(* const collections::IEnumerable&lt;T&gt;)::source" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <GenericTypeDecl>
                                      <Element>
                                        <SubTypeDecl ReferencingNameKey="::vl::collections::IEnumerable" Name="IEnumerable">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::collections::IEnumerable`1@s:vl.collections.IEnumerable`1" />
                                          </ReferencingOverloadKeys>
                                          <Parent>
                                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::collections@ns:vl.collections" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </Parent>
                                        </SubTypeDecl>
                                      </Element>
                                      <TypeArguments>
                                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlagTester::T" Name="T">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit`1(* const collections::IEnumerable&lt;T&gt;)::T@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ReadonlyListType}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </TypeArguments>
                                    </GenericTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit(* void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit(* void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit(* const void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Inherit(* const void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl Name="void" />
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Result" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyListType&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ListType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TDerived" Tags="x86, Windows" NameKey="::vl::reflection::description::TDerived" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::TDerived" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TDerived" Name="TDerived">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::TDerived@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ListType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::ListType" Name="ListType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::ListType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;" ClassType="Struct">
          <Children>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::T" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)::T" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)" Virtual="Static" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)::source" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <SubTypeDecl ReferencingNameKey="::vl::collections::IEnumerable" Name="IEnumerable">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections::IEnumerable`1@s:vl.collections.IEnumerable`1" />
                                      </ReferencingOverloadKeys>
                                      <Parent>
                                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::collections@ns:vl.collections" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Parent>
                                    </SubTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlagTester::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit`1(* collections::IEnumerable&lt;T&gt;)::T@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ListType}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit(* void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit(* void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit(* const void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Inherit(* const void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl Name="void" />
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Result" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ListType&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ObservableListType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TDerived" Tags="x86, Windows" NameKey="::vl::reflection::description::TDerived" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::TDerived" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TDerived" Name="TDerived">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::TDerived@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ObservableListType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::ObservableListType" Name="ObservableListType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::ObservableListType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;" ClassType="Struct">
          <Children>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::T" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit`1(* collections::ObservableList&lt;T&gt;)::T" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit`1(* collections::ObservableList&lt;T&gt;)" Virtual="Static" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit`1(* collections::ObservableList&lt;T&gt;)::source" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <SubTypeDecl ReferencingNameKey="::vl::collections::ObservableList" Name="ObservableList">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections::ObservableList`1@s:vl.collections.ObservableList`1" />
                                      </ReferencingOverloadKeys>
                                      <Parent>
                                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::collections@ns:vl.collections" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Parent>
                                    </SubTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlagTester::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit`1(* collections::ObservableList&lt;T&gt;)::T@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ObservableListType}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit(* void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit(* void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit(* const void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Inherit(* const void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl Name="void" />
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Result" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ObservableListType&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ReadonlyDictionaryType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TDerived" Tags="x86, Windows" NameKey="::vl::reflection::description::TDerived" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::TDerived" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TDerived" Name="TDerived">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::TDerived@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ReadonlyDictionaryType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::ReadonlyDictionaryType" Name="ReadonlyDictionaryType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::ReadonlyDictionaryType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;" ClassType="Struct">
          <Children>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="K" Tags="x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::K" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)::K" />
                <TypeParameterDecl Access="Public" Name="V" Tags="x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::V" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)::V" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)" Virtual="Static" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)::source" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <GenericTypeDecl>
                                      <Element>
                                        <SubTypeDecl ReferencingNameKey="::vl::collections::Dictionary" Name="Dictionary">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::collections::Dictionary`4@s:vl.collections.Dictionary`4" />
                                          </ReferencingOverloadKeys>
                                          <Parent>
                                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::collections@ns:vl.collections" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </Parent>
                                        </SubTypeDecl>
                                      </Element>
                                      <TypeArguments>
                                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlagTester::K" Name="K">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)::K@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ReadonlyDictionaryType}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlagTester::V" Name="V">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit`2(* const collections::Dictionary&lt;K, V&gt;)::V@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.ReadonlyDictionaryType}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </TypeArguments>
                                    </GenericTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit(* void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit(* void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit(* const void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Inherit(* const void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl Name="void" />
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Result" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::ReadonlyDictionaryType&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.DictionaryType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TDerived" Tags="x86, Windows" NameKey="::vl::reflection::description::TDerived" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::TDerived" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TDerived" Name="TDerived">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::TDerived@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.DictionaryType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::DictionaryType" Name="DictionaryType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::DictionaryType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;" ClassType="Struct">
          <Children>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="K" Tags="x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::K" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)::K" />
                <TypeParameterDecl Access="Public" Name="V" Tags="x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::V" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)::V" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)" Virtual="Static" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)::source" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <SubTypeDecl ReferencingNameKey="::vl::collections::Dictionary" Name="Dictionary">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections::Dictionary`4@s:vl.collections.Dictionary`4" />
                                      </ReferencingOverloadKeys>
                                      <Parent>
                                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::collections@ns:vl.collections" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Parent>
                                    </SubTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlagTester::K" Name="K">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)::K@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.DictionaryType}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlagTester::V" Name="V">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit`2(* collections::Dictionary&lt;K, V&gt;)::V@s:vl.reflection.description.TypeFlagTester`1{TDerived,TypeFlags.DictionaryType}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit(* void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit(* void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl Name="void" />
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Inherit" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit(* const void)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="char" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="source" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Inherit::source" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Inherit(* const void)::source" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl Name="void" />
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagTester::Result" OverloadKey="::vl::reflection::description::TypeFlagTester`1&lt;TDerived,TypeFlags::DictionaryType&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>