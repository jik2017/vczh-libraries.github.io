<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.ParameterAccessor`1{T,TypeFlags.NonGenericType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.NonGenericType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::NonGenericType" Name="NonGenericType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::NonGenericType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ParameterAccessor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;" ClassType="Struct">
          <Children>
            <FuncDecl Access="Public" Name="BoxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::BoxParameter(&amp; const T,* ITypeDescriptor)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="object" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::object" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::BoxParameter(&amp; const T,* ITypeDescriptor)::object" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.NonGenericType}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::BoxParameter(&amp; const T,* ITypeDescriptor)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="UnboxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::value" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::result" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::result" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.NonGenericType}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="valueName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::valueName" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::NonGenericType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::valueName" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::WString@s:vl.WString" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.ParameterAccessor`1{collections.LazyList{T},TypeFlags.EnumerableType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
              <ReferencingOverloadKeys>
                <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections@ns:vl.collections" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{collections.LazyList{T},TypeFlags.EnumerableType}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::EnumerableType" Name="EnumerableType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::EnumerableType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ParameterAccessor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;" ClassType="Struct">
          <Children>
            <FuncDecl Access="Public" Name="BoxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::BoxParameter(&amp; collections::LazyList&lt;T&gt;,* ITypeDescriptor)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="object" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::object" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::BoxParameter(&amp; collections::LazyList&lt;T&gt;,* ITypeDescriptor)::object" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections@ns:vl.collections" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{collections.LazyList{T},TypeFlags.EnumerableType}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::BoxParameter(&amp; collections::LazyList&lt;T&gt;,* ITypeDescriptor)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="UnboxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::UnboxParameter(&amp; const Value,&amp; collections::LazyList&lt;T&gt;,* ITypeDescriptor,&amp; const WString)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::value" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::UnboxParameter(&amp; const Value,&amp; collections::LazyList&lt;T&gt;,* ITypeDescriptor,&amp; const WString)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::result" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::UnboxParameter(&amp; const Value,&amp; collections::LazyList&lt;T&gt;,* ITypeDescriptor,&amp; const WString)::result" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections@ns:vl.collections" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{collections.LazyList{T},TypeFlags.EnumerableType}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::UnboxParameter(&amp; const Value,&amp; collections::LazyList&lt;T&gt;,* ITypeDescriptor,&amp; const WString)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="valueName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::valueName" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::LazyList&lt;T&gt;,TypeFlags::EnumerableType&gt;::UnboxParameter(&amp; const Value,&amp; collections::LazyList&lt;T&gt;,* ITypeDescriptor,&amp; const WString)::valueName" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::WString@s:vl.WString" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ReadonlyListType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ReadonlyListType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::ReadonlyListType" Name="ReadonlyListType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::ReadonlyListType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ParameterAccessor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;" ClassType="Struct">
          <Children>
            <FuncDecl Access="Public" Name="BoxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="object" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::object" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)::object" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ReadonlyListType}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="UnboxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::value" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::result" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::result" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ReadonlyListType}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="valueName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::valueName" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::valueName" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::WString@s:vl.WString" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ListType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ListType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::ListType" Name="ListType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::ListType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ParameterAccessor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;" ClassType="Struct">
          <Children>
            <FuncDecl Access="Public" Name="BoxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="object" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::object" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)::object" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ListType}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="UnboxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::value" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::result" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::result" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ListType}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="valueName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::valueName" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ListType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::valueName" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::WString@s:vl.WString" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.ParameterAccessor`1{collections.ObservableList{T},TypeFlags.ObservableListType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <SubTypeDecl ReferencingNameKey="::vl::collections::ObservableList" Name="ObservableList">
              <ReferencingOverloadKeys>
                <Key Value="::vl::collections::ObservableList`1@s:vl.collections.ObservableList`1" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections@ns:vl.collections" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{collections.ObservableList{T},TypeFlags.ObservableListType}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::ObservableListType" Name="ObservableListType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::ObservableListType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ParameterAccessor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;" ClassType="Struct">
          <Children>
            <FuncDecl Access="Public" Name="BoxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;::BoxParameter(&amp; collections::ObservableList&lt;T&gt;,* ITypeDescriptor)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="object" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::object" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;::BoxParameter(&amp; collections::ObservableList&lt;T&gt;,* ITypeDescriptor)::object" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <SubTypeDecl ReferencingNameKey="::vl::collections::ObservableList" Name="ObservableList">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::ObservableList`1@s:vl.collections.ObservableList`1" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections@ns:vl.collections" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{collections.ObservableList{T},TypeFlags.ObservableListType}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;collections::ObservableList&lt;T&gt;,TypeFlags::ObservableListType&gt;::BoxParameter(&amp; collections::ObservableList&lt;T&gt;,* ITypeDescriptor)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ReadonlyDictionaryType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ReadonlyDictionaryType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::ReadonlyDictionaryType" Name="ReadonlyDictionaryType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::ReadonlyDictionaryType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ParameterAccessor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;" ClassType="Struct">
          <Children>
            <FuncDecl Access="Public" Name="BoxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="object" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::object" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)::object" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ReadonlyDictionaryType}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="UnboxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::value" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::result" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::result" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.ReadonlyDictionaryType}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="valueName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::valueName" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::ReadonlyDictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::valueName" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::WString@s:vl.WString" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.ParameterAccessor`1{T,TypeFlags.DictionaryType}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.DictionaryType}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags::DictionaryType" Name="DictionaryType">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlags::DictionaryType@s:vl.reflection.description.TypeFlags" />
          </ReferencingOverloadKeys>
          <Parent>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Parent>
        </SubTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ParameterAccessor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;" ClassType="Struct">
          <Children>
            <FuncDecl Access="Public" Name="BoxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="object" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::object" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)::object" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.DictionaryType}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::BoxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::BoxParameter(&amp; T,* ITypeDescriptor)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="UnboxParameter" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::value" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::result" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::result" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::T@s:vl.reflection.description.ParameterAccessor`1{T,TypeFlags.DictionaryType}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="typeDescriptor" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::typeDescriptor" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::typeDescriptor" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ITypeDescriptor" Name="ITypeDescriptor">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ITypeDescriptor@s:vl.reflection.description.ITypeDescriptor" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="valueName" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ParameterAccessor::UnboxParameter::valueName" OverloadKey="::vl::reflection::description::ParameterAccessor`1&lt;T,TypeFlags::DictionaryType&gt;::UnboxParameter(&amp; const Value,&amp; T,* ITypeDescriptor,&amp; const WString)::valueName" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::WString@s:vl.WString" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>