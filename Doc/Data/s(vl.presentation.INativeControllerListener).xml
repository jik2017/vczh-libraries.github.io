<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.INativeControllerListener">
    <ClassDecl Access="Public" Name="INativeControllerListener" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener" OverloadKey="::vl::presentation::INativeControllerListener" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Represents a global message listener to an &lt;links&gt;&lt;link cref="::vl::presentation::INativeController@s:vl.presentation.INativeController" /&gt;&lt;/links&gt;.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="LeftButtonDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::LeftButtonDown" OverloadKey="::vl::presentation::INativeControllerListener::LeftButtonDown(NativePoint)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the left mouse button is pressed. To receive or not receive this message, use &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StartHookMouse()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt; or &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StopHookMouse()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt;.
&lt;/summary&gt;
  &lt;param name="position"&gt;The mouse position in the screen space.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::LeftButtonDown::position" OverloadKey="::vl::presentation::INativeControllerListener::LeftButtonDown(NativePoint)::position" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="LeftButtonUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::LeftButtonUp" OverloadKey="::vl::presentation::INativeControllerListener::LeftButtonUp(NativePoint)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the left mouse button is released. To receive or not receive this message, use &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StartHookMouse()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt; or &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StopHookMouse()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt;&lt;/summary&gt;
  &lt;param name="position"&gt;The mouse position in the screen space.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::LeftButtonUp::position" OverloadKey="::vl::presentation::INativeControllerListener::LeftButtonUp(NativePoint)::position" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RightButtonDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::RightButtonDown" OverloadKey="::vl::presentation::INativeControllerListener::RightButtonDown(NativePoint)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the right mouse button is pressed. To receive or not receive this message, use &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StartHookMouse()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt; or &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StopHookMouse()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt;&lt;/summary&gt;
  &lt;param name="position"&gt;The mouse position in the screen space.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::RightButtonDown::position" OverloadKey="::vl::presentation::INativeControllerListener::RightButtonDown(NativePoint)::position" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RightButtonUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::RightButtonUp" OverloadKey="::vl::presentation::INativeControllerListener::RightButtonUp(NativePoint)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the right mouse button is released. To receive or not receive this message, use &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StartHookMouse()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt; or &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StopHookMouse()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt;&lt;/summary&gt;
  &lt;param name="position"&gt;The mouse position in the screen space.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::RightButtonUp::position" OverloadKey="::vl::presentation::INativeControllerListener::RightButtonUp(NativePoint)::position" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="MouseMoving" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::MouseMoving" OverloadKey="::vl::presentation::INativeControllerListener::MouseMoving(NativePoint)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the mouse is moving. To receive or not receive this message, use &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StartHookMouse()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt; or &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StopHookMouse()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt;&lt;/summary&gt;
  &lt;param name="position"&gt;The mouse position in the screen space.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::MouseMoving::position" OverloadKey="::vl::presentation::INativeControllerListener::MouseMoving(NativePoint)::position" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GlobalTimer" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::GlobalTimer" OverloadKey="::vl::presentation::INativeControllerListener::GlobalTimer()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the global timer message raised. To receive or not receive this message, use &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StartTimer()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt; or &lt;links&gt;&lt;link cref="::vl::presentation::INativeInputService::StopTimer()@s:vl.presentation.INativeInputService" /&gt;&lt;/links&gt;&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ClipboardUpdated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::ClipboardUpdated" OverloadKey="::vl::presentation::INativeControllerListener::ClipboardUpdated()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the content of the clipboard is updated.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NativeWindowCreated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::NativeWindowCreated" OverloadKey="::vl::presentation::INativeControllerListener::NativeWindowCreated(* INativeWindow)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when a window is created.
&lt;/summary&gt;
  &lt;param name="window"&gt;The created window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::NativeWindowCreated::window" OverloadKey="::vl::presentation::INativeControllerListener::NativeWindowCreated(* INativeWindow)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NativeWindowDestroying" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::NativeWindowDestroying" OverloadKey="::vl::presentation::INativeControllerListener::NativeWindowDestroying(* INativeWindow)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when a window is destroying.
&lt;/summary&gt;
  &lt;param name="window"&gt;The destroying window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeControllerListener::NativeWindowDestroying::window" OverloadKey="::vl::presentation::INativeControllerListener::NativeWindowDestroying(* INativeWindow)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Interface" Name="Interface">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Interface@s:vl.Interface" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>