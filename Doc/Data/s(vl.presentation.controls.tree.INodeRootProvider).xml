<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.controls.tree.INodeRootProvider">
    <ClassDecl Access="Public" Name="INodeRootProvider" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Represents a root node provider.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="GetRootNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::GetRootNode" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::GetRootNode()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the instance of the root node.&lt;/summary&gt;
  &lt;returns&gt;Returns the instance of the root node.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::tree::INodeProvider" Name="INodeProvider">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::tree::INodeProvider@s:vl.presentation.controls.tree.INodeProvider" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CanGetNodeByVisibleIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::CanGetNodeByVisibleIndex" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::CanGetNodeByVisibleIndex()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test does the provider provided an optimized algorithm to get an instance of a node by the index of all visible nodes. If this function returns true, &lt;links&gt;&lt;link cref="::vl::presentation::controls::tree::INodeRootProvider::GetNodeByVisibleIndex(vint)@s:vl.presentation.controls.tree.INodeRootProvider" /&gt;&lt;/links&gt; can be used.&lt;/summary&gt;
  &lt;returns&gt;Returns true if such an algorithm is provided.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetNodeByVisibleIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::GetNodeByVisibleIndex" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::GetNodeByVisibleIndex(vint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get a node by the index in all visible nodes. This requires &lt;links&gt;&lt;link cref="::vl::presentation::controls::tree::INodeRootProvider::CanGetNodeByVisibleIndex()@s:vl.presentation.controls.tree.INodeRootProvider" /&gt;&lt;/links&gt; returning true. If the node is no longer needed, a call to the &lt;links&gt;&lt;link cref="::vl::presentation::controls::tree::INodeProvider::Release()@s:vl.presentation.controls.tree.INodeProvider" /&gt;&lt;/links&gt; is needed, unless this is a root node so that its parent is null.&lt;/summary&gt;
  &lt;returns&gt;The node for the index in all visible nodes.&lt;/returns&gt;
  &lt;param name="index"&gt;The index in all visible nodes.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::tree::INodeProvider" Name="INodeProvider">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::tree::INodeProvider@s:vl.presentation.controls.tree.INodeProvider" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::GetNodeByVisibleIndex::index" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::GetNodeByVisibleIndex(vint)::index" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="AttachCallback" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::AttachCallback" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::AttachCallback(* INodeProviderCallback)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Attach an node provider callback to this node provider.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="value"&gt;The node provider callback.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::AttachCallback::value" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::AttachCallback(* INodeProviderCallback)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::tree::INodeProviderCallback" Name="INodeProviderCallback">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::tree::INodeProviderCallback@s:vl.presentation.controls.tree.INodeProviderCallback" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DetachCallback" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::DetachCallback" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::DetachCallback(* INodeProviderCallback)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Detach an node provider callback from this node provider.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="value"&gt;The node provider callback.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::DetachCallback::value" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::DetachCallback(* INodeProviderCallback)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::tree::INodeProviderCallback" Name="INodeProviderCallback">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::tree::INodeProviderCallback@s:vl.presentation.controls.tree.INodeProviderCallback" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTextValue" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::GetTextValue" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::GetTextValue(* INodeProvider)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the primary text of a node.&lt;/summary&gt;
  &lt;returns&gt;The primary text of a node.&lt;/returns&gt;
  &lt;param name="node"&gt;The node.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::GetTextValue::node" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::GetTextValue(* INodeProvider)::node" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::tree::INodeProvider" Name="INodeProvider">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::tree::INodeProvider@s:vl.presentation.controls.tree.INodeProvider" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetBindingValue" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::GetBindingValue" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::GetBindingValue(* INodeProvider)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the binding value of a node.&lt;/summary&gt;
  &lt;returns&gt;The binding value of a node.&lt;/returns&gt;
  &lt;param name="node"&gt;The node.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <SubTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description" Name="description">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description@ns:vl.reflection.description" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="node" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::GetBindingValue::node" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::GetBindingValue(* INodeProvider)::node" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::tree::INodeProvider" Name="INodeProvider">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::tree::INodeProvider@s:vl.presentation.controls.tree.INodeProvider" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RequestView" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::RequestView" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::RequestView(&amp; const WString)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Request a view for this node provider. If the specified view is not supported, it returns null. If you want to get a view of type IXXX, use IXXX::Identifier as the identifier. When the view object is no longer needed, A call to the [M:vl.presentation.controls.tree.INodeRootProvider.ReleaseView][M:vl.presentation.controls.tree.INodeRootProvider.ReleaseView] is needed.&lt;/summary&gt;
  &lt;returns&gt;The view object.&lt;/returns&gt;
  &lt;param name="identifier"&gt;The identifier for the requested view.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="identifier" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::tree::INodeRootProvider::RequestView::identifier" OverloadKey="::vl::presentation::controls::tree::INodeRootProvider::RequestView(&amp; const WString)::identifier" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::tree::INodeRootProvider" Name="INodeRootProvider">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::tree::INodeRootProvider@s:vl.presentation.controls.tree.INodeRootProvider" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>