<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.operator +`1(Point_{T},Size_{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator +`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator +" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +" OverloadKey="::vl::presentation::operator +`1(Point_&lt;T&gt;,Size_&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator +`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +`1(Point_{T},Size_{T})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="p" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +::p" OverloadKey="::vl::presentation::operator +`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::p" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator +`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +`1(Point_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="s" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +::s" OverloadKey="::vl::presentation::operator +`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::s" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator +`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +`1(Point_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator +`1(Size_{T},Point_{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator +`1(Size_&lt;T&gt;,Point_&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator +" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +" OverloadKey="::vl::presentation::operator +`1(Size_&lt;T&gt;,Point_&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator +`1(Size_&lt;T&gt;,Point_&lt;T&gt;)::T@s:vl.presentation.operator +`1(Size_{T},Point_{T})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="s" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +::s" OverloadKey="::vl::presentation::operator +`1(Size_&lt;T&gt;,Point_&lt;T&gt;)::s" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator +`1(Size_&lt;T&gt;,Point_&lt;T&gt;)::T@s:vl.presentation.operator +`1(Size_{T},Point_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="p" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +::p" OverloadKey="::vl::presentation::operator +`1(Size_&lt;T&gt;,Point_&lt;T&gt;)::p" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator +`1(Size_&lt;T&gt;,Point_&lt;T&gt;)::T@s:vl.presentation.operator +`1(Size_{T},Point_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator -`1(Point_{T},Size_{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator -`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator -" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -" OverloadKey="::vl::presentation::operator -`1(Point_&lt;T&gt;,Size_&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator -`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -`1(Point_{T},Size_{T})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="p" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -::p" OverloadKey="::vl::presentation::operator -`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::p" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator -`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -`1(Point_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="s" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -::s" OverloadKey="::vl::presentation::operator -`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::s" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator -`1(Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -`1(Point_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator -`1(Point_{T},Point_{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator -`1(Point_&lt;T&gt;,Point_&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator -" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -" OverloadKey="::vl::presentation::operator -`1(Point_&lt;T&gt;,Point_&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator -`1(Point_&lt;T&gt;,Point_&lt;T&gt;)::T@s:vl.presentation.operator -`1(Point_{T},Point_{T})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="p1" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -::p1" OverloadKey="::vl::presentation::operator -`1(Point_&lt;T&gt;,Point_&lt;T&gt;)::p1" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator -`1(Point_&lt;T&gt;,Point_&lt;T&gt;)::T@s:vl.presentation.operator -`1(Point_{T},Point_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="p2" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -::p2" OverloadKey="::vl::presentation::operator -`1(Point_&lt;T&gt;,Point_&lt;T&gt;)::p2" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator -`1(Point_&lt;T&gt;,Point_&lt;T&gt;)::T@s:vl.presentation.operator -`1(Point_{T},Point_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator +`1(Size_{T},Size_{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator +`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator +" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +" OverloadKey="::vl::presentation::operator +`1(Size_&lt;T&gt;,Size_&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator +`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +`1(Size_{T},Size_{T})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="s1" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +::s1" OverloadKey="::vl::presentation::operator +`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::s1" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator +`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +`1(Size_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="s2" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +::s2" OverloadKey="::vl::presentation::operator +`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::s2" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator +`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +`1(Size_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator -`1(Size_{T},Size_{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator -`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator -" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -" OverloadKey="::vl::presentation::operator -`1(Size_&lt;T&gt;,Size_&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator -`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -`1(Size_{T},Size_{T})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="s1" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -::s1" OverloadKey="::vl::presentation::operator -`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::s1" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator -`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -`1(Size_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="s2" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -::s2" OverloadKey="::vl::presentation::operator -`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::s2" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator -`1(Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -`1(Size_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator ^`1(Size_{T},vint)">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator *`1(Size_&lt;T&gt;,vint)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator *" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator *" OverloadKey="::vl::presentation::operator *`1(Size_&lt;T&gt;,vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator *`1(Size_&lt;T&gt;,vint)::T@s:vl.presentation.operator ^`1(Size_{T},vint)" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="s" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator *::s" OverloadKey="::vl::presentation::operator *`1(Size_&lt;T&gt;,vint)::s" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator *`1(Size_&lt;T&gt;,vint)::T@s:vl.presentation.operator ^`1(Size_{T},vint)" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="i" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator *::i" OverloadKey="::vl::presentation::operator *`1(Size_&lt;T&gt;,vint)::i" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator %`1(Size_{T},vint)">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator /`1(Size_&lt;T&gt;,vint)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator /" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator /" OverloadKey="::vl::presentation::operator /`1(Size_&lt;T&gt;,vint)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator /`1(Size_&lt;T&gt;,vint)::T@s:vl.presentation.operator %`1(Size_{T},vint)" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="s" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator /::s" OverloadKey="::vl::presentation::operator /`1(Size_&lt;T&gt;,vint)::s" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator /`1(Size_&lt;T&gt;,vint)::T@s:vl.presentation.operator %`1(Size_{T},vint)" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="i" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator /::i" OverloadKey="::vl::presentation::operator /`1(Size_&lt;T&gt;,vint)::i" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator +=`1(&amp; Point_{T},Size_{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator +=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator +=" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +=" OverloadKey="::vl::presentation::operator +=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator +=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +=`1(&amp; Point_{T},Size_{T})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="s1" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +=::s1" OverloadKey="::vl::presentation::operator +=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::s1" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::operator +=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +=`1(&amp; Point_{T},Size_{T})" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="s2" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +=::s2" OverloadKey="::vl::presentation::operator +=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::s2" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator +=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +=`1(&amp; Point_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator -=`1(&amp; Point_{T},Size_{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator -=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator -=" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -=" OverloadKey="::vl::presentation::operator -=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator -=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -=`1(&amp; Point_{T},Size_{T})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="s1" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -=::s1" OverloadKey="::vl::presentation::operator -=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::s1" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::operator -=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -=`1(&amp; Point_{T},Size_{T})" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="s2" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -=::s2" OverloadKey="::vl::presentation::operator -=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::s2" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator -=`1(&amp; Point_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -=`1(&amp; Point_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator +=`1(&amp; Size_{T},Size_{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator +=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator +=" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +=" OverloadKey="::vl::presentation::operator +=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator +=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +=`1(&amp; Size_{T},Size_{T})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="s1" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +=::s1" OverloadKey="::vl::presentation::operator +=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::s1" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::operator +=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +=`1(&amp; Size_{T},Size_{T})" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="s2" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator +=::s2" OverloadKey="::vl::presentation::operator +=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::s2" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator +=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator +=`1(&amp; Size_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator -=`1(&amp; Size_{T},Size_{T})">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::operator -=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <FuncDecl Access="Public" Name="operator -=" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -=" OverloadKey="::vl::presentation::operator -=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::operator -=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -=`1(&amp; Size_{T},Size_{T})" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="s1" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -=::s1" OverloadKey="::vl::presentation::operator -=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::s1" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::operator -=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -=`1(&amp; Size_{T},Size_{T})" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="s2" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator -=::s2" OverloadKey="::vl::presentation::operator -=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::s2" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Size_" Name="Size_">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Size_`1@s:vl.presentation.Size_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::operator -=`1(&amp; Size_&lt;T&gt;,Size_&lt;T&gt;)::T@s:vl.presentation.operator -=`1(&amp; Size_{T},Size_{T})" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator ==(VKEY,VKEY)">
    <FuncDecl Access="Public" Name="operator ==" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator ==" OverloadKey="::vl::presentation::operator ==(VKEY,VKEY)" Virtual="Static" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="a" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator ==::a" OverloadKey="::vl::presentation::operator ==(VKEY,VKEY)::a" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="b" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator ==::b" OverloadKey="::vl::presentation::operator ==(VKEY,VKEY)::b" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator !=(VKEY,VKEY)">
    <FuncDecl Access="Public" Name="operator !=" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator !=" OverloadKey="::vl::presentation::operator !=(VKEY,VKEY)" Virtual="Static" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="a" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator !=::a" OverloadKey="::vl::presentation::operator !=(VKEY,VKEY)::a" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="b" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator !=::b" OverloadKey="::vl::presentation::operator !=(VKEY,VKEY)::b" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator {(VKEY,VKEY)">
    <FuncDecl Access="Public" Name="operator &lt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &lt;" OverloadKey="::vl::presentation::operator &lt;(VKEY,VKEY)" Virtual="Static" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="a" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &lt;::a" OverloadKey="::vl::presentation::operator &lt;(VKEY,VKEY)::a" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="b" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &lt;::b" OverloadKey="::vl::presentation::operator &lt;(VKEY,VKEY)::b" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator {=(VKEY,VKEY)">
    <FuncDecl Access="Public" Name="operator &lt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &lt;=" OverloadKey="::vl::presentation::operator &lt;=(VKEY,VKEY)" Virtual="Static" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="a" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &lt;=::a" OverloadKey="::vl::presentation::operator &lt;=(VKEY,VKEY)::a" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="b" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &lt;=::b" OverloadKey="::vl::presentation::operator &lt;=(VKEY,VKEY)::b" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator }(VKEY,VKEY)">
    <FuncDecl Access="Public" Name="operator &gt;" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &gt;" OverloadKey="::vl::presentation::operator &gt;(VKEY,VKEY)" Virtual="Static" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="a" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &gt;::a" OverloadKey="::vl::presentation::operator &gt;(VKEY,VKEY)::a" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="b" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &gt;::b" OverloadKey="::vl::presentation::operator &gt;(VKEY,VKEY)::b" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator }=(VKEY,VKEY)">
    <FuncDecl Access="Public" Name="operator &gt;=" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &gt;=" OverloadKey="::vl::presentation::operator &gt;=(VKEY,VKEY)" Virtual="Static" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl Name="bool" />
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="a" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &gt;=::a" OverloadKey="::vl::presentation::operator &gt;=(VKEY,VKEY)::a" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="b" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &gt;=::b" OverloadKey="::vl::presentation::operator &gt;=(VKEY,VKEY)::b" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator &amp;(VKEY,VKEY)">
    <FuncDecl Access="Public" Name="operator &amp;" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &amp;" OverloadKey="::vl::presentation::operator &amp;(VKEY,VKEY)" Virtual="Static" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="a" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &amp;::a" OverloadKey="::vl::presentation::operator &amp;(VKEY,VKEY)::a" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="b" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &amp;::b" OverloadKey="::vl::presentation::operator &amp;(VKEY,VKEY)::b" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator $(VKEY,VKEY)">
    <FuncDecl Access="Public" Name="operator |" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator |" OverloadKey="::vl::presentation::operator |(VKEY,VKEY)" Virtual="Static" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="a" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator |::a" OverloadKey="::vl::presentation::operator |(VKEY,VKEY)::a" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="b" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator |::b" OverloadKey="::vl::presentation::operator |(VKEY,VKEY)::b" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator $(INativeDialogService.FileDialogOptions,INativeDialogService.FileDialogOptions)">
    <FuncDecl Access="Public" Name="operator |" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator |" OverloadKey="::vl::presentation::operator |(INativeDialogService::FileDialogOptions,INativeDialogService::FileDialogOptions)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <SubTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService::FileDialogOptions" Name="FileDialogOptions">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::INativeDialogService::FileDialogOptions@s:vl.presentation.INativeDialogService" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService" Name="INativeDialogService">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeDialogService@s:vl.presentation.INativeDialogService" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="a" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator |::a" OverloadKey="::vl::presentation::operator |(INativeDialogService::FileDialogOptions,INativeDialogService::FileDialogOptions)::a" Static="False">
              <Type>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService::FileDialogOptions" Name="FileDialogOptions">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeDialogService::FileDialogOptions@s:vl.presentation.INativeDialogService" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService" Name="INativeDialogService">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeDialogService@s:vl.presentation.INativeDialogService" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="b" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator |::b" OverloadKey="::vl::presentation::operator |(INativeDialogService::FileDialogOptions,INativeDialogService::FileDialogOptions)::b" Static="False">
              <Type>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService::FileDialogOptions" Name="FileDialogOptions">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeDialogService::FileDialogOptions@s:vl.presentation.INativeDialogService" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService" Name="INativeDialogService">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeDialogService@s:vl.presentation.INativeDialogService" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
  <Symbols Key="vl.presentation.operator &amp;(INativeDialogService.FileDialogOptions,INativeDialogService.FileDialogOptions)">
    <FuncDecl Access="Public" Name="operator &amp;" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &amp;" OverloadKey="::vl::presentation::operator &amp;(INativeDialogService::FileDialogOptions,INativeDialogService::FileDialogOptions)" Virtual="Normal" Function="Function">
      <Type>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <SubTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService::FileDialogOptions" Name="FileDialogOptions">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::INativeDialogService::FileDialogOptions@s:vl.presentation.INativeDialogService" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService" Name="INativeDialogService">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeDialogService@s:vl.presentation.INativeDialogService" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Name="a" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &amp;::a" OverloadKey="::vl::presentation::operator &amp;(INativeDialogService::FileDialogOptions,INativeDialogService::FileDialogOptions)::a" Static="False">
              <Type>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService::FileDialogOptions" Name="FileDialogOptions">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeDialogService::FileDialogOptions@s:vl.presentation.INativeDialogService" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService" Name="INativeDialogService">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeDialogService@s:vl.presentation.INativeDialogService" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="b" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::operator &amp;::b" OverloadKey="::vl::presentation::operator &amp;(INativeDialogService::FileDialogOptions,INativeDialogService::FileDialogOptions)::b" Static="False">
              <Type>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService::FileDialogOptions" Name="FileDialogOptions">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeDialogService::FileDialogOptions@s:vl.presentation.INativeDialogService" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeDialogService" Name="INativeDialogService">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeDialogService@s:vl.presentation.INativeDialogService" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Type>
    </FuncDecl>
  </Symbols>
</OverloadingSymbols>