<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.presentation.Margin_`1">
    <SymbolTree NamespaceUrlName="vl.presentation">
      <SymbolParentMapping>
        <Map From="::vl::presentation::Margin_`1::T" To="::vl::presentation::Margin_`1" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::presentation::Margin_`1" DisplayName="Margin_ struct" Doc="true">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::presentation::Margin_`1::left" DisplayName="left field" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::presentation::Margin_`1::top" DisplayName="top field" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::presentation::Margin_`1::right" DisplayName="right field" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::presentation::Margin_`1::bottom" DisplayName="bottom field" Doc="true" />
        <Overloads DisplayName="Margin_ constructor">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::presentation::Margin_`1::Margin_()" DisplayName="Margin_ constructor" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::presentation::Margin_`1::Margin_(T,T,T,T)" DisplayName="Margin_ constructor" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::presentation::Margin_`1::operator ==(Margin_&lt;T&gt;)const" DisplayName="operator == method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::presentation::Margin_`1::operator !=(Margin_&lt;T&gt;)const" DisplayName="operator != method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>