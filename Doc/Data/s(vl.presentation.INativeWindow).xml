<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.INativeWindow">
    <ClassDecl Access="Public" Name="INativeWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow" OverloadKey="::vl::presentation::INativeWindow" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Represents a window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="Convert" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert" OverloadKey="::vl::presentation::INativeWindow::Convert(NativePoint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Convert point from native coordinate to GUI coordinate.
&lt;/summary&gt;
  &lt;returns&gt;The converted result.&lt;/returns&gt;
  &lt;param name="value"&gt;The coordinate to convert.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert::value" OverloadKey="::vl::presentation::INativeWindow::Convert(NativePoint)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Convert" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert" OverloadKey="::vl::presentation::INativeWindow::Convert(Point)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Convert point from GUI coordinate to native coordinate.
&lt;/summary&gt;
  &lt;returns&gt;The converted result.&lt;/returns&gt;
  &lt;param name="value"&gt;The coordinate to convert.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert::value" OverloadKey="::vl::presentation::INativeWindow::Convert(Point)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Convert" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert" OverloadKey="::vl::presentation::INativeWindow::Convert(NativeSize)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Convert size from native coordinate to GUI coordinate.
&lt;/summary&gt;
  &lt;returns&gt;The converted result.&lt;/returns&gt;
  &lt;param name="value"&gt;The coordinate to convert.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::Size" Name="Size">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::Size@s:vl.presentation.Size" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert::value" OverloadKey="::vl::presentation::INativeWindow::Convert(NativeSize)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeSize" Name="NativeSize">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativeSize@s:vl.presentation.NativeSize" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Convert" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert" OverloadKey="::vl::presentation::INativeWindow::Convert(Size)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Convert size from GUI coordinate to native coordinate.
&lt;/summary&gt;
  &lt;returns&gt;The converted result.&lt;/returns&gt;
  &lt;param name="value"&gt;The coordinate to convert.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeSize" Name="NativeSize">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::NativeSize@s:vl.presentation.NativeSize" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert::value" OverloadKey="::vl::presentation::INativeWindow::Convert(Size)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Size" Name="Size">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Size@s:vl.presentation.Size" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Convert" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert" OverloadKey="::vl::presentation::INativeWindow::Convert(NativeMargin)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Convert margin from native coordinate to GUI coordinate.
&lt;/summary&gt;
  &lt;returns&gt;The converted result.&lt;/returns&gt;
  &lt;param name="value"&gt;The coordinate to convert.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::Margin" Name="Margin">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::Margin@s:vl.presentation.Margin" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert::value" OverloadKey="::vl::presentation::INativeWindow::Convert(NativeMargin)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeMargin" Name="NativeMargin">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativeMargin@s:vl.presentation.NativeMargin" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Convert" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert" OverloadKey="::vl::presentation::INativeWindow::Convert(Margin)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Convert margin from GUI coordinate to native coordinate.
&lt;/summary&gt;
  &lt;returns&gt;The converted result.&lt;/returns&gt;
  &lt;param name="value"&gt;The coordinate to convert.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeMargin" Name="NativeMargin">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::NativeMargin@s:vl.presentation.NativeMargin" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Convert::value" OverloadKey="::vl::presentation::INativeWindow::Convert(Margin)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Margin" Name="Margin">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Margin@s:vl.presentation.Margin" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetBounds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetBounds" OverloadKey="::vl::presentation::INativeWindow::GetBounds()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the bounds of the window.
&lt;/summary&gt;
  &lt;returns&gt;The bounds of the window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeRect" Name="NativeRect">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::NativeRect@s:vl.presentation.NativeRect" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetBounds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetBounds" OverloadKey="::vl::presentation::INativeWindow::SetBounds(&amp; const NativeRect)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the bounds of the window.
&lt;/summary&gt;
  &lt;param name="bounds"&gt;The bounds of the window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="bounds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetBounds::bounds" OverloadKey="::vl::presentation::INativeWindow::SetBounds(&amp; const NativeRect)::bounds" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeRect" Name="NativeRect">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeRect@s:vl.presentation.NativeRect" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetClientSize" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetClientSize" OverloadKey="::vl::presentation::INativeWindow::GetClientSize()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the client size of the window.
&lt;/summary&gt;
  &lt;returns&gt;The client size of the window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeSize" Name="NativeSize">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::NativeSize@s:vl.presentation.NativeSize" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetClientSize" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetClientSize" OverloadKey="::vl::presentation::INativeWindow::SetClientSize(NativeSize)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the client size of the window.
&lt;/summary&gt;
  &lt;param name="size"&gt;The client size of the window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="size" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetClientSize::size" OverloadKey="::vl::presentation::INativeWindow::SetClientSize(NativeSize)::size" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeSize" Name="NativeSize">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativeSize@s:vl.presentation.NativeSize" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetClientBoundsInScreen" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetClientBoundsInScreen" OverloadKey="::vl::presentation::INativeWindow::GetClientBoundsInScreen()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the client bounds in screen space.
&lt;/summary&gt;
  &lt;returns&gt;The client bounds in screen space.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeRect" Name="NativeRect">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::NativeRect@s:vl.presentation.NativeRect" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTitle" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetTitle" OverloadKey="::vl::presentation::INativeWindow::GetTitle()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the title of the window. A title will be displayed as a name of this window.
&lt;/summary&gt;
  &lt;returns&gt;The title of the window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetTitle" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetTitle" OverloadKey="::vl::presentation::INativeWindow::SetTitle(WString)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the title of the window. A title will be displayed as a name of this window.
&lt;/summary&gt;
  &lt;param name="title"&gt;The title of the window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="title" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetTitle::title" OverloadKey="::vl::presentation::INativeWindow::SetTitle(WString)::title" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::WString@s:vl.WString" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetWindowCursor" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetWindowCursor" OverloadKey="::vl::presentation::INativeWindow::GetWindowCursor()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the mouse cursor of the window. When the mouse is on the window, the mouse cursor will be rendered.
&lt;/summary&gt;
  &lt;returns&gt;The mouse cursor of the window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeCursor" Name="INativeCursor">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeCursor@s:vl.presentation.INativeCursor" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetWindowCursor" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetWindowCursor" OverloadKey="::vl::presentation::INativeWindow::SetWindowCursor(* INativeCursor)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the mouse cursor of the window. When the mouse is on the window, the mouse cursor will be rendered.
&lt;/summary&gt;
  &lt;param name="cursor"&gt;The mouse cursor of the window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="cursor" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetWindowCursor::cursor" OverloadKey="::vl::presentation::INativeWindow::SetWindowCursor(* INativeCursor)::cursor" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeCursor" Name="INativeCursor">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeCursor@s:vl.presentation.INativeCursor" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCaretPoint" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetCaretPoint" OverloadKey="::vl::presentation::INativeWindow::GetCaretPoint()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the caret point of the window. When an input method editor is opened, the input text box will be located to the caret point.
&lt;/summary&gt;
  &lt;returns&gt;The caret point of the window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetCaretPoint" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetCaretPoint" OverloadKey="::vl::presentation::INativeWindow::SetCaretPoint(NativePoint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the caret point of the window. When an input method editor is opened, the input text box will be located to the caret point.
&lt;/summary&gt;
  &lt;param name="point"&gt;The caret point of the window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="point" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetCaretPoint::point" OverloadKey="::vl::presentation::INativeWindow::SetCaretPoint(NativePoint)::point" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetParent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetParent" OverloadKey="::vl::presentation::INativeWindow::GetParent()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the parent window. A parent window doesn't contain a child window. It always displayed below the child windows. When a parent window is minimized or restored, so as its child windows.
&lt;/summary&gt;
  &lt;returns&gt;The parent window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetParent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetParent" OverloadKey="::vl::presentation::INativeWindow::SetParent(* INativeWindow)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the parent window. A parent window doesn't contain a child window. It always displayed below the child windows. When a parent window is minimized or restored, so as its child windows.
&lt;/summary&gt;
  &lt;param name="parent"&gt;The parent window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="parent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetParent::parent" OverloadKey="::vl::presentation::INativeWindow::SetParent(* INativeWindow)::parent" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetAlwaysPassFocusToParent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetAlwaysPassFocusToParent" OverloadKey="::vl::presentation::INativeWindow::GetAlwaysPassFocusToParent()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the window always pass the focus to its parent window.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the window always pass the focus to its parent window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetAlwaysPassFocusToParent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetAlwaysPassFocusToParent" OverloadKey="::vl::presentation::INativeWindow::SetAlwaysPassFocusToParent(bool)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Enable or disble always passing the focus to its parent window.
&lt;/summary&gt;
  &lt;param name="value"&gt;True to enable always passing the focus to its parent window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetAlwaysPassFocusToParent::value" OverloadKey="::vl::presentation::INativeWindow::SetAlwaysPassFocusToParent(bool)::value" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="EnableCustomFrameMode" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::EnableCustomFrameMode" OverloadKey="::vl::presentation::INativeWindow::EnableCustomFrameMode()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Enable the window customized frame mode.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DisableCustomFrameMode" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::DisableCustomFrameMode" OverloadKey="::vl::presentation::INativeWindow::DisableCustomFrameMode()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Disable the window customized frame mode.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsCustomFrameModeEnabled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::IsCustomFrameModeEnabled" OverloadKey="::vl::presentation::INativeWindow::IsCustomFrameModeEnabled()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the window customized frame mode enabled.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the window customized frame mode is enabled.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCustomFramePadding" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetCustomFramePadding" OverloadKey="::vl::presentation::INativeWindow::GetCustomFramePadding()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the amount of the border. The window template may need this value to calculate where to put the client area.
&lt;/summary&gt;
  &lt;returns&gt;Returns the amount of the border.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeMargin" Name="NativeMargin">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::NativeMargin@s:vl.presentation.NativeMargin" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <EnumDecl Access="Public" Name="WindowSizeState" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::WindowSizeState" OverloadKey="::vl::presentation::INativeWindow::WindowSizeState" EnumClass="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Window size state.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Children>
            <EnumItemDecl Access="Public" Name="Minimized" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::WindowSizeState::Minimized" OverloadKey="::vl::presentation::INativeWindow::WindowSizeState::Minimized">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Minimized.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="Restored" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::WindowSizeState::Restored" OverloadKey="::vl::presentation::INativeWindow::WindowSizeState::Restored">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Restored.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="Maximized" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::WindowSizeState::Maximized" OverloadKey="::vl::presentation::INativeWindow::WindowSizeState::Maximized">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Maximized.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
          </Children>
        </EnumDecl>
        <FuncDecl Access="Public" Name="GetIcon" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetIcon" OverloadKey="::vl::presentation::INativeWindow::GetIcon()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the icon.
&lt;/summary&gt;
  &lt;returns&gt;Returns the icon.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::GuiImageData" Name="GuiImageData">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::GuiImageData@s:vl.presentation.GuiImageData" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetIcon" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetIcon" OverloadKey="::vl::presentation::INativeWindow::SetIcon(Ptr&lt;GuiImageData&gt;)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set the icon.
&lt;/summary&gt;
  &lt;param name="icon"&gt;The icon. Set to null to use the default icon.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="icon" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetIcon::icon" OverloadKey="::vl::presentation::INativeWindow::SetIcon(Ptr&lt;GuiImageData&gt;)::icon" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::GuiImageData" Name="GuiImageData">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::GuiImageData@s:vl.presentation.GuiImageData" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetSizeState" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetSizeState" OverloadKey="::vl::presentation::INativeWindow::GetSizeState()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the window size state.
&lt;/summary&gt;
  &lt;returns&gt;Returns the window size state.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow::WindowSizeState" Name="WindowSizeState">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeWindow::WindowSizeState@s:vl.presentation.INativeWindow" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Show" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Show" OverloadKey="::vl::presentation::INativeWindow::Show()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Show the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowDeactivated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::ShowDeactivated" OverloadKey="::vl::presentation::INativeWindow::ShowDeactivated()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Show the window without activation.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowRestored" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::ShowRestored" OverloadKey="::vl::presentation::INativeWindow::ShowRestored()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Restore the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowMaximized" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::ShowMaximized" OverloadKey="::vl::presentation::INativeWindow::ShowMaximized()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Maximize the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowMinimized" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::ShowMinimized" OverloadKey="::vl::presentation::INativeWindow::ShowMinimized()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Minimize the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Hide" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Hide" OverloadKey="::vl::presentation::INativeWindow::Hide(bool)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Hide the window.
&lt;/summary&gt;
  &lt;param name="closeWindow"&gt;Set to true to really close the window. Or the window will just be hidden. This parameter only affect the main window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="closeWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Hide::closeWindow" OverloadKey="::vl::presentation::INativeWindow::Hide(bool)::closeWindow" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::IsVisible" OverloadKey="::vl::presentation::INativeWindow::IsVisible()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the window visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the window is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Enable" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Enable" OverloadKey="::vl::presentation::INativeWindow::Enable()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Enable the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Disable" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::Disable" OverloadKey="::vl::presentation::INativeWindow::Disable()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Disable the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsEnabled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::IsEnabled" OverloadKey="::vl::presentation::INativeWindow::IsEnabled()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the window enabled.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the window is enabled.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetFocus" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetFocus" OverloadKey="::vl::presentation::INativeWindow::SetFocus()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Set focus to the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsFocused" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::IsFocused" OverloadKey="::vl::presentation::INativeWindow::IsFocused()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the window focused.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the window is focused.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetActivate" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetActivate" OverloadKey="::vl::presentation::INativeWindow::SetActivate()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Activate to the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsActivated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::IsActivated" OverloadKey="::vl::presentation::INativeWindow::IsActivated()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the window activated.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the window is activated.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowInTaskBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::ShowInTaskBar" OverloadKey="::vl::presentation::INativeWindow::ShowInTaskBar()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Show the icon in the task bar.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="HideInTaskBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::HideInTaskBar" OverloadKey="::vl::presentation::INativeWindow::HideInTaskBar()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Hide the icon in the task bar.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsAppearedInTaskBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::IsAppearedInTaskBar" OverloadKey="::vl::presentation::INativeWindow::IsAppearedInTaskBar()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the window icon appeared in the task bar.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the window icon appears in the task bar.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="EnableActivate" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::EnableActivate" OverloadKey="::vl::presentation::INativeWindow::EnableActivate()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Enable activation to the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DisableActivate" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::DisableActivate" OverloadKey="::vl::presentation::INativeWindow::DisableActivate()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Disable activation to the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsEnabledActivate" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::IsEnabledActivate" OverloadKey="::vl::presentation::INativeWindow::IsEnabledActivate()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the window allowed to be activated.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the window is allowed to be activated.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RequireCapture" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::RequireCapture" OverloadKey="::vl::presentation::INativeWindow::RequireCapture()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Require mouse message capturing to this window. If the capture is required, all mouse message will be send to this window.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ReleaseCapture" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::ReleaseCapture" OverloadKey="::vl::presentation::INativeWindow::ReleaseCapture()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Release mouse message capturing to this window. If the capture is required, all mouse message will be send to this window.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsCapturing" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::IsCapturing" OverloadKey="::vl::presentation::INativeWindow::IsCapturing()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test if the window is capturing mouse messages.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the window is capturing mouse messages.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetMaximizedBox" OverloadKey="::vl::presentation::INativeWindow::GetMaximizedBox()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the maximize box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the maximize box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetMaximizedBox" OverloadKey="::vl::presentation::INativeWindow::SetMaximizedBox(bool)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the maximize box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the maximize box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetMaximizedBox::visible" OverloadKey="::vl::presentation::INativeWindow::SetMaximizedBox(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetMinimizedBox" OverloadKey="::vl::presentation::INativeWindow::GetMinimizedBox()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the minimize box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the minimize box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetMinimizedBox" OverloadKey="::vl::presentation::INativeWindow::SetMinimizedBox(bool)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the minimize box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the minimize box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetMinimizedBox::visible" OverloadKey="::vl::presentation::INativeWindow::SetMinimizedBox(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetBorder" OverloadKey="::vl::presentation::INativeWindow::GetBorder()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the border visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the border is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetBorder" OverloadKey="::vl::presentation::INativeWindow::SetBorder(bool)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the border visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the border visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetBorder::visible" OverloadKey="::vl::presentation::INativeWindow::SetBorder(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetSizeBox" OverloadKey="::vl::presentation::INativeWindow::GetSizeBox()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the size box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the size box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetSizeBox" OverloadKey="::vl::presentation::INativeWindow::SetSizeBox(bool)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the size box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the size box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetSizeBox::visible" OverloadKey="::vl::presentation::INativeWindow::SetSizeBox(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetIconVisible" OverloadKey="::vl::presentation::INativeWindow::GetIconVisible()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the icon visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the icon is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetIconVisible" OverloadKey="::vl::presentation::INativeWindow::SetIconVisible(bool)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the icon visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the icon visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetIconVisible::visible" OverloadKey="::vl::presentation::INativeWindow::SetIconVisible(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetTitleBar" OverloadKey="::vl::presentation::INativeWindow::GetTitleBar()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the title bar visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the title bar is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetTitleBar" OverloadKey="::vl::presentation::INativeWindow::SetTitleBar(bool)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the title bar visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the title bar visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetTitleBar::visible" OverloadKey="::vl::presentation::INativeWindow::SetTitleBar(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTopMost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::GetTopMost" OverloadKey="::vl::presentation::INativeWindow::GetTopMost()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the window always on top of the desktop.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the window is always on top of the desktop.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetTopMost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetTopMost" OverloadKey="::vl::presentation::INativeWindow::SetTopMost(bool)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the window always or never on top of the desktop.
&lt;/summary&gt;
  &lt;param name="topmost"&gt;True to make the window always  on top of the desktop.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="topmost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SetTopMost::topmost" OverloadKey="::vl::presentation::INativeWindow::SetTopMost(bool)::topmost" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SupressAlt" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::SupressAlt" OverloadKey="::vl::presentation::INativeWindow::SupressAlt()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Supress the system's Alt+X hot key
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="InstallListener" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::InstallListener" OverloadKey="::vl::presentation::INativeWindow::InstallListener(* INativeWindowListener)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Install an message listener.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="listener"&gt;The listener to install.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="listener" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::InstallListener::listener" OverloadKey="::vl::presentation::INativeWindow::InstallListener(* INativeWindowListener)::listener" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindowListener" Name="INativeWindowListener">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindowListener@s:vl.presentation.INativeWindowListener" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="UninstallListener" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::UninstallListener" OverloadKey="::vl::presentation::INativeWindow::UninstallListener(* INativeWindowListener)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Uninstall an message listener.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="listener"&gt;The listener to uninstall.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="listener" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::UninstallListener::listener" OverloadKey="::vl::presentation::INativeWindow::UninstallListener(* INativeWindowListener)::listener" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindowListener" Name="INativeWindowListener">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindowListener@s:vl.presentation.INativeWindowListener" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RedrawContent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindow::RedrawContent" OverloadKey="::vl::presentation::INativeWindow::RedrawContent()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Redraw the content of the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Interface" Name="Interface">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Interface@s:vl.Interface" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>