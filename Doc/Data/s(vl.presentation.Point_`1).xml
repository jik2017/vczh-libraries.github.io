<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.Point_`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Represents a position in a two dimensions space.
&lt;/summary&gt;
  &lt;typeparam name="T"&gt;Type of the coordinate.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::T" OverloadKey="::vl::presentation::Point_`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="Point_" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_" OverloadKey="::vl::presentation::Point_`1" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="x" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_::x" OverloadKey="::vl::presentation::Point_`1::x" Static="False">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Position in x dimension.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::Point_`1::T@s:vl.presentation.Point_`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <VarDecl Access="Public" Name="y" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_::y" OverloadKey="::vl::presentation::Point_`1::y" Static="False">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Position in y dimension.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::Point_`1::T@s:vl.presentation.Point_`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="Point_" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_::Point_" OverloadKey="::vl::presentation::Point_`1::Point_()" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Point_" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_::Point_" OverloadKey="::vl::presentation::Point_`1::Point_(T,T)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_x" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_::Point_::_x" OverloadKey="::vl::presentation::Point_`1::Point_(T,T)::_x" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Point_`1::T@s:vl.presentation.Point_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="_y" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_::Point_::_y" OverloadKey="::vl::presentation::Point_`1::Point_(T,T)::_y" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Point_`1::T@s:vl.presentation.Point_`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator ==" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_::operator ==" OverloadKey="::vl::presentation::Point_`1::operator ==(Point_&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="point" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_::operator ==::point" OverloadKey="::vl::presentation::Point_`1::operator ==(Point_&lt;T&gt;)const::point" Static="False">
                      <Type>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::Point_`1::T@s:vl.presentation.Point_`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator !=" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_::operator !=" OverloadKey="::vl::presentation::Point_`1::operator !=(Point_&lt;T&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="point" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::Point_::operator !=::point" OverloadKey="::vl::presentation::Point_`1::operator !=(Point_&lt;T&gt;)const::point" Static="False">
                      <Type>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::Point_" Name="Point_">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::Point_`1@s:vl.presentation.Point_`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::Point_`1::T@s:vl.presentation.Point_`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>