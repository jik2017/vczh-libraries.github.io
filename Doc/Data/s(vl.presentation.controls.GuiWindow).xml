<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.controls.GuiWindow">
    <ClassDecl Access="Public" Name="GuiWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow" OverloadKey="::vl::presentation::controls::GuiWindow" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Represents a normal window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <TypedefDecl Access="Public" Name="ControlTemplateType" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ControlTemplateType" OverloadKey="::vl::presentation::controls::GuiWindow::ControlTemplateType">
          <Type>
            <SubTypeDecl ReferencingNameKey="::vl::presentation::templates::GuiWindowTemplate" Name="GuiWindowTemplate">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::templates::GuiWindowTemplate@s:vl.presentation.templates.GuiWindowTemplate" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::templates" Name="templates">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::templates@ns:vl.presentation.templates" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Type>
        </TypedefDecl>
        <VarDecl Access="Private" Name="controlTemplateObject8732" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::controlTemplateObject8732" OverloadKey="::vl::presentation::controls::GuiWindow::controlTemplateObject8732" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::templates::GuiWindowTemplate" Name="GuiWindowTemplate">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::templates::GuiWindowTemplate@s:vl.presentation.templates.GuiWindowTemplate" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::templates" Name="templates">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::templates@ns:vl.presentation.templates" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Private" Name="BeforeControlTemplateUninstalled_" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::BeforeControlTemplateUninstalled_" OverloadKey="::vl::presentation::controls::GuiWindow::BeforeControlTemplateUninstalled_()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="AfterControlTemplateInstalled_" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::AfterControlTemplateInstalled_" OverloadKey="::vl::presentation::controls::GuiWindow::AfterControlTemplateInstalled_(bool)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="initialize" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::AfterControlTemplateInstalled_::initialize" OverloadKey="::vl::presentation::controls::GuiWindow::AfterControlTemplateInstalled_(bool)::initialize" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="BeforeControlTemplateUninstalled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::BeforeControlTemplateUninstalled" OverloadKey="::vl::presentation::controls::GuiWindow::BeforeControlTemplateUninstalled()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="AfterControlTemplateInstalled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::AfterControlTemplateInstalled" OverloadKey="::vl::presentation::controls::GuiWindow::AfterControlTemplateInstalled(bool)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="initialize" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::AfterControlTemplateInstalled::initialize" OverloadKey="::vl::presentation::controls::GuiWindow::AfterControlTemplateInstalled(bool)::initialize" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="CheckAndStoreControlTemplate" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::CheckAndStoreControlTemplate" OverloadKey="::vl::presentation::controls::GuiWindow::CheckAndStoreControlTemplate(* templates::GuiControlTemplate)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::CheckAndStoreControlTemplate::value" OverloadKey="::vl::presentation::controls::GuiWindow::CheckAndStoreControlTemplate(* templates::GuiControlTemplate)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::templates::GuiControlTemplate" Name="GuiControlTemplate">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::templates::GuiControlTemplate@s:vl.presentation.templates.GuiControlTemplate" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::templates" Name="templates">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::templates@ns:vl.presentation.templates" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetControlTemplateObject" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetControlTemplateObject" OverloadKey="::vl::presentation::controls::GuiWindow::GetControlTemplateObject(bool)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::presentation::templates::GuiWindowTemplate" Name="GuiWindowTemplate">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::templates::GuiWindowTemplate@s:vl.presentation.templates.GuiWindowTemplate" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::templates" Name="templates">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::templates@ns:vl.presentation.templates" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="ensureExists" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetControlTemplateObject::ensureExists" OverloadKey="::vl::presentation::controls::GuiWindow::GetControlTemplateObject(bool)::ensureExists" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <VarDecl Access="Protected" Name="previousAltHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::previousAltHost" OverloadKey="::vl::presentation::controls::GuiWindow::previousAltHost" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiAltActionHost" Name="IGuiAltActionHost">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions::IGuiAltActionHost@s:vl.presentation.compositions.IGuiAltActionHost" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="hasMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::hasMaximizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::hasMaximizedBox" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="hasMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::hasMinimizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::hasMinimizedBox" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="hasBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::hasBorder" OverloadKey="::vl::presentation::controls::GuiWindow::hasBorder" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="hasSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::hasSizeBox" OverloadKey="::vl::presentation::controls::GuiWindow::hasSizeBox" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="isIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::isIconVisible" OverloadKey="::vl::presentation::controls::GuiWindow::isIconVisible" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="hasTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::hasTitleBar" OverloadKey="::vl::presentation::controls::GuiWindow::hasTitleBar" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="SyncNativeWindowProperties" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SyncNativeWindowProperties" OverloadKey="::vl::presentation::controls::GuiWindow::SyncNativeWindowProperties()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="Moved" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::Moved" OverloadKey="::vl::presentation::controls::GuiWindow::Moved()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnNativeWindowChanged" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnNativeWindowChanged" OverloadKey="::vl::presentation::controls::GuiWindow::OnNativeWindowChanged()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnVisualStatusChanged" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnVisualStatusChanged" OverloadKey="::vl::presentation::controls::GuiWindow::OnVisualStatusChanged()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="MouseClickedOnOtherWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::MouseClickedOnOtherWindow" OverloadKey="::vl::presentation::controls::GuiWindow::MouseClickedOnOtherWindow(* GuiWindow)" Virtual="Virtual" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::MouseClickedOnOtherWindow::window" OverloadKey="::vl::presentation::controls::GuiWindow::MouseClickedOnOtherWindow(* GuiWindow)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnWindowActivated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnWindowActivated" OverloadKey="::vl::presentation::controls::GuiWindow::OnWindowActivated(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="sender" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnWindowActivated::sender" OverloadKey="::vl::presentation::controls::GuiWindow::OnWindowActivated(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)::sender" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="arguments" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnWindowActivated::arguments" OverloadKey="::vl::presentation::controls::GuiWindow::OnWindowActivated(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)::arguments" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiEventArgs" Name="GuiEventArgs">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiEventArgs@s:vl.presentation.compositions.GuiEventArgs" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnWindowDeactivated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnWindowDeactivated" OverloadKey="::vl::presentation::controls::GuiWindow::OnWindowDeactivated(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="sender" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnWindowDeactivated::sender" OverloadKey="::vl::presentation::controls::GuiWindow::OnWindowDeactivated(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)::sender" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="arguments" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnWindowDeactivated::arguments" OverloadKey="::vl::presentation::controls::GuiWindow::OnWindowDeactivated(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)::arguments" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiEventArgs" Name="GuiEventArgs">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiEventArgs@s:vl.presentation.compositions.GuiEventArgs" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GuiWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GuiWindow" OverloadKey="::vl::presentation::controls::GuiWindow::GuiWindow(theme::ThemeName)" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a control with a specified default theme.&lt;/summary&gt;
  &lt;param name="themeName"&gt;The theme name for retriving a default control template.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="themeName" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GuiWindow::themeName" OverloadKey="::vl::presentation::controls::GuiWindow::GuiWindow(theme::ThemeName)::themeName" Static="False">
                  <Type>
                    <SubTypeDecl ReferencingNameKey="::vl::presentation::theme::ThemeName" Name="ThemeName">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::theme::ThemeName@s:vl.presentation.theme.ThemeName" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::theme" Name="theme">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::theme@ns:vl.presentation.theme" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~GuiWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::~GuiWindow" OverloadKey="::vl::presentation::controls::GuiWindow::~GuiWindow()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="QueryService" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::QueryService" OverloadKey="::vl::presentation::controls::GuiWindow::QueryService(&amp; const WString)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="identifier" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::QueryService::identifier" OverloadKey="::vl::presentation::controls::GuiWindow::QueryService(&amp; const WString)::identifier" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <VarDecl Access="Public" Name="ClipboardUpdated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ClipboardUpdated" OverloadKey="::vl::presentation::controls::GuiWindow::ClipboardUpdated" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Clipboard updated event.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiNotifyEvent" Name="GuiNotifyEvent">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::compositions::GuiNotifyEvent@s:vl.presentation.compositions.GuiNotifyEvent" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="MoveToScreenCenter" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter" OverloadKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Move the window to the center of the screen. If multiple screens exist, the window move to the screen that contains the biggest part of the window.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="MoveToScreenCenter" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter" OverloadKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter(* INativeScreen)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Move the window to the center of the specified screen.&lt;/summary&gt;
  &lt;param name="screen"&gt;The screen.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="screen" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter::screen" OverloadKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter(* INativeScreen)::screen" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeScreen" Name="INativeScreen">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeScreen@s:vl.presentation.INativeScreen" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetMaximizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::GetMaximizedBox()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the maximize box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the maximize box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetMaximizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::SetMaximizedBox(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the maximize box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the maximize box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetMaximizedBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetMaximizedBox(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetMinimizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::GetMinimizedBox()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the minimize box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the minimize box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetMinimizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::SetMinimizedBox(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the minimize box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the minimize box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetMinimizedBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetMinimizedBox(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetBorder" OverloadKey="::vl::presentation::controls::GuiWindow::GetBorder()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the border visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the border is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetBorder" OverloadKey="::vl::presentation::controls::GuiWindow::SetBorder(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the border visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the border visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetBorder::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetBorder(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetSizeBox" OverloadKey="::vl::presentation::controls::GuiWindow::GetSizeBox()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the size box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the size box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetSizeBox" OverloadKey="::vl::presentation::controls::GuiWindow::SetSizeBox(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the size box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the size box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetSizeBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetSizeBox(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetIconVisible" OverloadKey="::vl::presentation::controls::GuiWindow::GetIconVisible()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the icon visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the icon is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetIconVisible" OverloadKey="::vl::presentation::controls::GuiWindow::SetIconVisible(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the icon visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the icon visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetIconVisible::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetIconVisible(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetTitleBar" OverloadKey="::vl::presentation::controls::GuiWindow::GetTitleBar()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the title bar visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the title bar is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetTitleBar" OverloadKey="::vl::presentation::controls::GuiWindow::SetTitleBar(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the title bar visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the title bar visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetTitleBar::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetTitleBar(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowModal" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModal" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModal(* GuiWindow,&amp; const Func&lt;function () : void&gt;)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Show a model window, get a callback when the window is closed.
&lt;/summary&gt;
  &lt;param name="owner"&gt;The window to disable as a parent window.&lt;/param&gt;
  &lt;param name="callback"&gt;The callback to call after the window is closed.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="owner" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModal::owner" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModal(* GuiWindow,&amp; const Func&lt;function () : void&gt;)::owner" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="callback" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModal::callback" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModal(* GuiWindow,&amp; const Func&lt;function () : void&gt;)::callback" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowModalAndDelete" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete(* GuiWindow,&amp; const Func&lt;function () : void&gt;)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Show a model window, get a callback when the window is closed, and then delete itself.
&lt;/summary&gt;
  &lt;param name="owner"&gt;The window to disable as a parent window.&lt;/param&gt;
  &lt;param name="callback"&gt;The callback to call after the window is closed.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="owner" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete::owner" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete(* GuiWindow,&amp; const Func&lt;function () : void&gt;)::owner" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="callback" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete::callback" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete(* GuiWindow,&amp; const Func&lt;function () : void&gt;)::callback" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowModalAsync" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModalAsync" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModalAsync(* GuiWindow)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Show a model window as an async operation, which ends when the window is closed.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the size box is visible.&lt;/returns&gt;
  &lt;param name="owner"&gt;The window to disable as a parent window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <SubTypeDecl ReferencingNameKey="::vl::reflection::description::IAsync" Name="IAsync">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IAsync@s:vl.reflection.description.IAsync" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <SubTypeDecl ReferencingNameKey="::vl::reflection::description" Name="description">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description@ns:vl.reflection.description" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection" Name="reflection">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection@ns:vl.reflection" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="owner" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModalAsync::owner" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModalAsync(* GuiWindow)::owner" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Protected" Tags="x86, Windows">
          <Type>
            <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiAltActionHostBase" Name="GuiAltActionHostBase">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::compositions::GuiAltActionHostBase@s:vl.presentation.compositions.GuiAltActionHostBase" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::AggregatableDescription" Name="AggregatableDescription">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::AggregatableDescription`1@s:vl.reflection.AggregatableDescription`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>