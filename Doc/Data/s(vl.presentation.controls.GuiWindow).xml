<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.controls.GuiWindow">
    <ClassDecl Access="Public" Name="GuiWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow" OverloadKey="::vl::presentation::controls::GuiWindow" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Represents a normal window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <ClassDecl Access="Public" Name="IStyleController" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController" ClassType="Class">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Style controller interface for &lt;links&gt;&lt;link cref="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" /&gt;&lt;/links&gt;.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Children>
            <FuncDecl Access="Public" Name="AttachWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::AttachWindow" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::AttachWindow(* GuiWindow)" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Called when the style controller is attached to the window.&lt;/summary&gt;
  &lt;param name="_window"&gt;The window.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::AttachWindow::_window" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::AttachWindow(* GuiWindow)::_window" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="InitializeNativeWindowProperties" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::InitializeNativeWindowProperties" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::InitializeNativeWindowProperties()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Initialize visual properties of the window. This callback is for some window template that don't need the standard window border.&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetSizeState" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetSizeState" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetSizeState(INativeWindow::WindowSizeState)" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Update the size state.
&lt;/summary&gt;
  &lt;param name="value"&gt;The new border size.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetSizeState::value" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetSizeState(INativeWindow::WindowSizeState)::value" Static="False">
                      <Type>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow::WindowSizeState" Name="WindowSizeState">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow::WindowSizeState@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::GetMaximizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::GetMaximizedBox()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the maximize box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the maximize box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetMaximizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetMaximizedBox(bool)" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the maximize box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the maximize box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetMaximizedBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetMaximizedBox(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::GetMinimizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::GetMinimizedBox()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the minimize box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the minimize box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetMinimizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetMinimizedBox(bool)" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the minimize box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the minimize box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetMinimizedBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetMinimizedBox(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::GetBorder" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::GetBorder()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the border visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the border is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetBorder" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetBorder(bool)" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the border visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the border visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetBorder::visible" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetBorder(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::GetSizeBox" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::GetSizeBox()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the size box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the size box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetSizeBox" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetSizeBox(bool)" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the size box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the size box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetSizeBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetSizeBox(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::GetIconVisible" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::GetIconVisible()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the icon visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the icon is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetIconVisible" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetIconVisible(bool)" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the icon visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the icon visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetIconVisible::visible" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetIconVisible(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::GetTitleBar" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::GetTitleBar()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the title bar visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the title bar is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetTitleBar" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetTitleBar(bool)" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the title bar visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the title bar visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::SetTitleBar::visible" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::SetTitleBar(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="CreateTooltipStyle" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::CreateTooltipStyle" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::CreateTooltipStyle()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Create a control style for tooltip control.
&lt;/summary&gt;
  &lt;returns&gt;Returns the control style. Returns null for default control style.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow::IStyleController" Name="IStyleController">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow::IStyleController@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="CreateShortcutKeyStyle" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::IStyleController::CreateShortcutKeyStyle" OverloadKey="::vl::presentation::controls::GuiWindow::IStyleController::CreateShortcutKeyStyle()" Virtual="Abstract" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;
Create a control style for shortcut key label control.
&lt;/summary&gt;
  &lt;returns&gt;Returns the control style. Returns null for default control style.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiLabel::IStyleController" Name="IStyleController">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiLabel::IStyleController@s:vl.presentation.controls.GuiLabel" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiLabel" Name="GuiLabel">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::controls::GuiLabel@s:vl.presentation.controls.GuiLabel" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControl::IStyleController" Name="IStyleController">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiControl::IStyleController@s:vl.presentation.controls.GuiControl" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControl" Name="GuiControl">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::GuiControl@s:vl.presentation.controls.GuiControl" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                        <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                        <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow::IStyleController" Name="IStyleController">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::GuiWindow::IStyleController@s:vl.presentation.controls.GuiWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
        <ClassDecl Access="Public" Name="DefaultBehaviorStyleController" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController" ClassType="Class">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Style controller with default behavior for &lt;links&gt;&lt;link cref="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" /&gt;&lt;/links&gt;.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Children>
            <VarDecl Access="Protected" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::window" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::window" Static="False">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="DefaultBehaviorStyleController" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::DefaultBehaviorStyleController" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::DefaultBehaviorStyleController()" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="~DefaultBehaviorStyleController" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::~DefaultBehaviorStyleController" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::~DefaultBehaviorStyleController()" Virtual="Normal" Function="Destructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="AttachWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::AttachWindow" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::AttachWindow(* GuiWindow)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::AttachWindow::_window" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::AttachWindow(* GuiWindow)::_window" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="InitializeNativeWindowProperties" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::InitializeNativeWindowProperties" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::InitializeNativeWindowProperties()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetSizeState" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetSizeState" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetSizeState(INativeWindow::WindowSizeState)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetSizeState::value" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetSizeState(INativeWindow::WindowSizeState)::value" Static="False">
                      <Type>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow::WindowSizeState" Name="WindowSizeState">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow::WindowSizeState@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetMaximizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetMaximizedBox()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetMaximizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetMaximizedBox(bool)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetMaximizedBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetMaximizedBox(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetMinimizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetMinimizedBox()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetMinimizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetMinimizedBox(bool)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetMinimizedBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetMinimizedBox(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetBorder" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetBorder()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetBorder" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetBorder(bool)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetBorder::visible" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetBorder(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetSizeBox" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetSizeBox()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetSizeBox" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetSizeBox(bool)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetSizeBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetSizeBox(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetIconVisible" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetIconVisible()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetIconVisible" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetIconVisible(bool)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetIconVisible::visible" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetIconVisible(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetTitleBar" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::GetTitleBar()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="SetTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetTitleBar" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetTitleBar(bool)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetTitleBar::visible" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::SetTitleBar(bool)::visible" Static="False">
                      <Type>
                        <RefTypeDecl Name="bool" />
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="CreateTooltipStyle" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::CreateTooltipStyle" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::CreateTooltipStyle()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow::IStyleController" Name="IStyleController">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow::IStyleController@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="CreateShortcutKeyStyle" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::CreateShortcutKeyStyle" OverloadKey="::vl::presentation::controls::GuiWindow::DefaultBehaviorStyleController::CreateShortcutKeyStyle()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiLabel::IStyleController" Name="IStyleController">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiLabel::IStyleController@s:vl.presentation.controls.GuiLabel" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiLabel" Name="GuiLabel">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::controls::GuiLabel@s:vl.presentation.controls.GuiLabel" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow::IStyleController" Name="IStyleController">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiWindow::IStyleController@s:vl.presentation.controls.GuiWindow" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
        <VarDecl Access="Protected" Name="styleController" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::styleController" OverloadKey="::vl::presentation::controls::GuiWindow::styleController" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow::IStyleController" Name="IStyleController">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiWindow::IStyleController@s:vl.presentation.controls.GuiWindow" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="previousAltHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::previousAltHost" OverloadKey="::vl::presentation::controls::GuiWindow::previousAltHost" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiAltActionHost" Name="IGuiAltActionHost">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions::IGuiAltActionHost@s:vl.presentation.compositions.IGuiAltActionHost" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="Moved" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::Moved" OverloadKey="::vl::presentation::controls::GuiWindow::Moved()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnNativeWindowChanged" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnNativeWindowChanged" OverloadKey="::vl::presentation::controls::GuiWindow::OnNativeWindowChanged()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnVisualStatusChanged" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnVisualStatusChanged" OverloadKey="::vl::presentation::controls::GuiWindow::OnVisualStatusChanged()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="MouseClickedOnOtherWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::MouseClickedOnOtherWindow" OverloadKey="::vl::presentation::controls::GuiWindow::MouseClickedOnOtherWindow(* GuiWindow)" Virtual="Virtual" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::MouseClickedOnOtherWindow::window" OverloadKey="::vl::presentation::controls::GuiWindow::MouseClickedOnOtherWindow(* GuiWindow)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="GetAltComposition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetAltComposition" OverloadKey="::vl::presentation::controls::GuiWindow::GetAltComposition()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="GetPreviousAltHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetPreviousAltHost" OverloadKey="::vl::presentation::controls::GuiWindow::GetPreviousAltHost()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiAltActionHost" Name="IGuiAltActionHost">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::compositions::IGuiAltActionHost@s:vl.presentation.compositions.IGuiAltActionHost" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnActivatedAltHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnActivatedAltHost" OverloadKey="::vl::presentation::controls::GuiWindow::OnActivatedAltHost(* IGuiAltActionHost)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="previousHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnActivatedAltHost::previousHost" OverloadKey="::vl::presentation::controls::GuiWindow::OnActivatedAltHost(* IGuiAltActionHost)::previousHost" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="IGuiAltActionHost">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::IGuiAltActionHost@s:vl.presentation.compositions.IGuiAltActionHost" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnDeactivatedAltHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::OnDeactivatedAltHost" OverloadKey="::vl::presentation::controls::GuiWindow::OnDeactivatedAltHost()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="CollectAltActions" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::CollectAltActions" OverloadKey="::vl::presentation::controls::GuiWindow::CollectAltActions(&amp; collections::Group&lt;WString, * IGuiAltAction&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="actions" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::CollectAltActions::actions" OverloadKey="::vl::presentation::controls::GuiWindow::CollectAltActions(&amp; collections::Group&lt;WString, * IGuiAltAction&gt;)::actions" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <SubTypeDecl ReferencingNameKey="::vl::collections::Group" Name="Group">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::Group`4@s:vl.collections.Group`4" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections@ns:vl.collections" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <RefTypeDecl Name="IGuiAltAction">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::presentation::compositions::IGuiAltAction@s:vl.presentation.compositions.IGuiAltAction" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GuiWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GuiWindow" OverloadKey="::vl::presentation::controls::GuiWindow::GuiWindow(* IStyleController)" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a control with a specified style controller.&lt;/summary&gt;
  &lt;param name="_styleController"&gt;The style controller.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_styleController" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GuiWindow::_styleController" OverloadKey="::vl::presentation::controls::GuiWindow::GuiWindow(* IStyleController)::_styleController" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow::IStyleController" Name="IStyleController">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow::IStyleController@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~GuiWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::~GuiWindow" OverloadKey="::vl::presentation::controls::GuiWindow::~GuiWindow()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="QueryService" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::QueryService" OverloadKey="::vl::presentation::controls::GuiWindow::QueryService(&amp; const WString)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="identifier" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::QueryService::identifier" OverloadKey="::vl::presentation::controls::GuiWindow::QueryService(&amp; const WString)::identifier" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <VarDecl Access="Public" Name="ClipboardUpdated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ClipboardUpdated" OverloadKey="::vl::presentation::controls::GuiWindow::ClipboardUpdated" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Clipboard updated event.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiNotifyEvent" Name="GuiNotifyEvent">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::compositions::GuiNotifyEvent@s:vl.presentation.compositions.GuiNotifyEvent" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="MoveToScreenCenter" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter" OverloadKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Move the window to the center of the screen. If multiple screens exist, the window move to the screen that contains the biggest part of the window.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="MoveToScreenCenter" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter" OverloadKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter(* INativeScreen)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Move the window to the center of the specified screen.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="screen" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter::screen" OverloadKey="::vl::presentation::controls::GuiWindow::MoveToScreenCenter(* INativeScreen)::screen" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeScreen" Name="INativeScreen">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeScreen@s:vl.presentation.INativeScreen" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetMaximizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::GetMaximizedBox()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the maximize box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the maximize box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetMaximizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetMaximizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::SetMaximizedBox(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the maximize box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the maximize box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetMaximizedBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetMaximizedBox(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetMinimizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::GetMinimizedBox()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the minimize box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the minimize box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetMinimizedBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetMinimizedBox" OverloadKey="::vl::presentation::controls::GuiWindow::SetMinimizedBox(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the minimize box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the minimize box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetMinimizedBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetMinimizedBox(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetBorder" OverloadKey="::vl::presentation::controls::GuiWindow::GetBorder()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the border visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the border is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetBorder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetBorder" OverloadKey="::vl::presentation::controls::GuiWindow::SetBorder(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the border visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the border visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetBorder::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetBorder(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetSizeBox" OverloadKey="::vl::presentation::controls::GuiWindow::GetSizeBox()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the size box visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the size box is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetSizeBox" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetSizeBox" OverloadKey="::vl::presentation::controls::GuiWindow::SetSizeBox(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the size box visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the size box visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetSizeBox::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetSizeBox(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetIconVisible" OverloadKey="::vl::presentation::controls::GuiWindow::GetIconVisible()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the icon visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the icon is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetIconVisible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetIconVisible" OverloadKey="::vl::presentation::controls::GuiWindow::SetIconVisible(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the icon visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the icon visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetIconVisible::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetIconVisible(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::GetTitleBar" OverloadKey="::vl::presentation::controls::GuiWindow::GetTitleBar()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the title bar visible.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the title bar is visible.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetTitleBar" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetTitleBar" OverloadKey="::vl::presentation::controls::GuiWindow::SetTitleBar(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the title bar visible or invisible.
&lt;/summary&gt;
  &lt;param name="visible"&gt;True to make the title bar visible.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="visible" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::SetTitleBar::visible" OverloadKey="::vl::presentation::controls::GuiWindow::SetTitleBar(bool)::visible" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowModal" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModal" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModal(* GuiWindow,&amp; const Func&lt;function () : void&gt;)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Show a model window, get a callback when the window is closed.
&lt;/summary&gt;
  &lt;param name="owner"&gt;The window to disable as a parent window.&lt;/param&gt;
  &lt;param name="callback"&gt;The callback to call after the window is closed.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="owner" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModal::owner" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModal(* GuiWindow,&amp; const Func&lt;function () : void&gt;)::owner" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="callback" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModal::callback" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModal(* GuiWindow,&amp; const Func&lt;function () : void&gt;)::callback" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowModalAndDelete" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete(* GuiWindow,&amp; const Func&lt;function () : void&gt;)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Show a model window, get a callback when the window is closed, and then delete itself.
&lt;/summary&gt;
  &lt;param name="owner"&gt;The window to disable as a parent window.&lt;/param&gt;
  &lt;param name="callback"&gt;The callback to call after the window is closed.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="owner" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete::owner" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete(* GuiWindow,&amp; const Func&lt;function () : void&gt;)::owner" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="callback" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete::callback" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModalAndDelete(* GuiWindow,&amp; const Func&lt;function () : void&gt;)::callback" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowModalAsync" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModalAsync" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModalAsync(* GuiWindow)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Show a model window as an async operation, which ends when the window is closed.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the size box is visible.&lt;/returns&gt;
  &lt;param name="owner"&gt;The window to disable as a parent window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <SubTypeDecl ReferencingNameKey="::vl::reflection::description::IAsync" Name="IAsync">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IAsync@s:vl.reflection.description.IAsync" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <SubTypeDecl ReferencingNameKey="::vl::reflection::description" Name="description">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description@ns:vl.reflection.description" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection" Name="reflection">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection@ns:vl.reflection" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="owner" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiWindow::ShowModalAsync::owner" OverloadKey="::vl::presentation::controls::GuiWindow::ShowModalAsync(* GuiWindow)::owner" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Protected" Tags="x86, Windows">
          <Type>
            <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiAltActionHost" Name="IGuiAltActionHost">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::compositions::IGuiAltActionHost@s:vl.presentation.compositions.IGuiAltActionHost" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::AggregatableDescription" Name="AggregatableDescription">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::AggregatableDescription`1@s:vl.reflection.AggregatableDescription`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>