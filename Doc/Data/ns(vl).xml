<?xml version="1.0" encoding="utf-8"?>
<Namespace DisplayName="::vl">
  <Overloads DisplayName="_atow function">
    <Symbol Key="::vl::_atow(* const char,* wchar_t,vint)" UrlName="vl._atow(^ const char,^ wchar_t,vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="_wtoa function">
    <Symbol Key="::vl::_wtoa(* const wchar_t,* char,vint)" UrlName="vl._wtoa(^ const wchar_t,^ char,vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="AcceptAlways struct">
    <Symbol Key="::vl::AcceptAlways`2" UrlName="vl.AcceptAlways`2" Doc="false" />
  </Overloads>
  <Overloads DisplayName="AcceptType struct">
    <Symbol Key="::vl::AcceptType`2" UrlName="vl.AcceptType`2" Doc="false" />
    <Symbol Key="::vl::AcceptType`1&lt;T,YesType&gt;" UrlName="vl.AcceptType`1{T,YesType}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="AcceptValue struct">
    <Symbol Key="::vl::AcceptValue`1" UrlName="vl.AcceptValue`1" Doc="false" />
    <Symbol Key="::vl::AcceptValue`0&lt;YesType&gt;" UrlName="vl.AcceptValue`0{YesType}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="alower function">
    <Symbol Key="::vl::alower(&amp; const AString)" UrlName="vl.alower(&amp; const AString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ArgumentException class">
    <Symbol Key="::vl::ArgumentException" UrlName="vl.ArgumentException" Doc="false" />
  </Overloads>
  <Overloads DisplayName="AString typedecl">
    <Symbol Key="::vl::AString" UrlName="vl.AString" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atof function">
    <Symbol Key="::vl::atof(&amp; const AString)" UrlName="vl.atof(&amp; const AString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atof_test function">
    <Symbol Key="::vl::atof_test(&amp; const AString,&amp; bool)" UrlName="vl.atof_test(&amp; const AString,&amp; bool)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atoi function">
    <Symbol Key="::vl::atoi(&amp; const AString)" UrlName="vl.atoi(&amp; const AString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atoi_test function">
    <Symbol Key="::vl::atoi_test(&amp; const AString,&amp; bool)" UrlName="vl.atoi_test(&amp; const AString,&amp; bool)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atoi64 function">
    <Symbol Key="::vl::atoi64(&amp; const AString)" UrlName="vl.atoi64(&amp; const AString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atoi64_test function">
    <Symbol Key="::vl::atoi64_test(&amp; const AString,&amp; bool)" UrlName="vl.atoi64_test(&amp; const AString,&amp; bool)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atou function">
    <Symbol Key="::vl::atou(&amp; const AString)" UrlName="vl.atou(&amp; const AString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atou_test function">
    <Symbol Key="::vl::atou_test(&amp; const AString,&amp; bool)" UrlName="vl.atou_test(&amp; const AString,&amp; bool)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atou64 function">
    <Symbol Key="::vl::atou64(&amp; const AString)" UrlName="vl.atou64(&amp; const AString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atou64_test function">
    <Symbol Key="::vl::atou64_test(&amp; const AString,&amp; bool)" UrlName="vl.atou64_test(&amp; const AString,&amp; bool)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="atow function">
    <Symbol Key="::vl::atow(&amp; const AString)" UrlName="vl.atow(&amp; const AString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="aupper function">
    <Symbol Key="::vl::aupper(&amp; const AString)" UrlName="vl.aupper(&amp; const AString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="BinaryRetriver union">
    <Symbol Key="::vl::BinaryRetriver`2" UrlName="vl.BinaryRetriver`2" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Combine function">
    <Symbol Key="::vl::Combine`3(Func&lt;C&gt;,Func&lt;F1&gt;,Func&lt;F2&gt;)" UrlName="vl.Combine`3(Func{C},Func{F1},Func{F2})" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Combiner function">
    <Symbol Key="::vl::Combiner`1(&amp; const Func&lt;function (Func&lt;T&gt;::ResultType, Func&lt;T&gt;::ResultType) : Func&lt;T&gt;::ResultType&gt;)" UrlName="vl.Combiner`1(&amp; const Func{function (Func{T}.ResultType, Func{T}.ResultType) # Func{T}.ResultType})" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ComPtr class">
    <Symbol Key="::vl::ComPtr`1" UrlName="vl.ComPtr`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ConditionVariable class">
    <Symbol Key="::vl::ConditionVariable" UrlName="vl.ConditionVariable" Doc="true" />
  </Overloads>
  <Overloads DisplayName="CriticalSection class">
    <Symbol Key="::vl::CriticalSection" UrlName="vl.CriticalSection" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Curry function">
    <Symbol Key="::vl::Curry`1(* T)" UrlName="vl.Curry`1(^ T)" Doc="true" />
    <Symbol Key="::vl::Curry`1(&amp; const Func&lt;T&gt;)" UrlName="vl.Curry`1(&amp; const Func{T})" Doc="true" />
  </Overloads>
  <Overloads DisplayName="DateTime struct">
    <Symbol Key="::vl::DateTime" UrlName="vl.DateTime" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Error class">
    <Symbol Key="::vl::Error" UrlName="vl.Error" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Event class">
    <Symbol Key="::vl::Event`1" UrlName="vl.Event`1" Doc="false" />
    <Symbol Key="::vl::Event`1&lt;function (... TArgs) : void&gt;" UrlName="vl.Event`1{function (... TArgs) # void}" Doc="true" />
  </Overloads>
  <Overloads DisplayName="EventHandler class">
    <Symbol Key="::vl::EventHandler" UrlName="vl.EventHandler" Doc="false" />
  </Overloads>
  <Overloads DisplayName="EventObject class">
    <Symbol Key="::vl::EventObject" UrlName="vl.EventObject" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Exception class">
    <Symbol Key="::vl::Exception" UrlName="vl.Exception" Doc="true" />
  </Overloads>
  <Overloads DisplayName="FinalizeGlobalStorage function">
    <Symbol Key="::vl::FinalizeGlobalStorage()" UrlName="vl.FinalizeGlobalStorage()" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ForwardValue function">
    <Symbol Key="::vl::ForwardValue`1(&amp;&amp; RemoveReference&lt;T&gt;::Type)" UrlName="vl.ForwardValue`1(&amp;&amp; RemoveReference{T}.Type)" Doc="false" />
    <Symbol Key="::vl::ForwardValue`1(&amp; RemoveReference&lt;T&gt;::Type)" UrlName="vl.ForwardValue`1(&amp; RemoveReference{T}.Type)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ftoa function">
    <Symbol Key="::vl::ftoa(double)" UrlName="vl.ftoa(double)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ftow function">
    <Symbol Key="::vl::ftow(double)" UrlName="vl.ftow(double)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Func class">
    <Symbol Key="::vl::Func`1" UrlName="vl.Func`1" Doc="false" />
    <Symbol Key="::vl::Func`2&lt;function (... TArgs) : R&gt;" UrlName="vl.Func`2{function (... TArgs) # R}" Doc="true" />
  </Overloads>
  <Overloads DisplayName="GetGlobalStorage function">
    <Symbol Key="::vl::GetGlobalStorage(* const wchar_t)" UrlName="vl.GetGlobalStorage(^ const wchar_t)" Doc="false" />
    <Symbol Key="::vl::GetGlobalStorage(&amp; const WString)" UrlName="vl.GetGlobalStorage(&amp; const WString)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="GlobalStorage class">
    <Symbol Key="::vl::GlobalStorage" UrlName="vl.GlobalStorage" Doc="true" />
  </Overloads>
  <Overloads DisplayName="HttpQuery function">
    <Symbol Key="::vl::HttpQuery(&amp; const HttpRequest,&amp; HttpResponse)" UrlName="vl.HttpQuery(&amp; const HttpRequest,&amp; HttpResponse)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="HttpRequest class">
    <Symbol Key="::vl::HttpRequest" UrlName="vl.HttpRequest" Doc="true" />
  </Overloads>
  <Overloads DisplayName="HttpResponse class">
    <Symbol Key="::vl::HttpResponse" UrlName="vl.HttpResponse" Doc="true" />
  </Overloads>
  <Overloads DisplayName="i64toa function">
    <Symbol Key="::vl::i64toa(vint64_t)" UrlName="vl.i64toa(vint64_t)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="i64tow function">
    <Symbol Key="::vl::i64tow(vint64_t)" UrlName="vl.i64tow(vint64_t)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="InitializeGlobalStorage function">
    <Symbol Key="::vl::InitializeGlobalStorage()" UrlName="vl.InitializeGlobalStorage()" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Interface class">
    <Symbol Key="::vl::Interface" UrlName="vl.Interface" Doc="true" />
  </Overloads>
  <Overloads DisplayName="itoa function">
    <Symbol Key="::vl::itoa(vint)" UrlName="vl.itoa(vint)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="itow function">
    <Symbol Key="::vl::itow(vint)" UrlName="vl.itow(vint)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="KeyType struct">
    <Symbol Key="::vl::KeyType`1" UrlName="vl.KeyType`1" Doc="true" />
    <Symbol Key="::vl::KeyType`1&lt;Ptr&lt;T&gt;&gt;" UrlName="vl.KeyType`1{Ptr{T}}" Doc="false" />
    <Symbol Key="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;" UrlName="vl.KeyType`1{ComPtr{T}}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Lazy class">
    <Symbol Key="::vl::Lazy`1" UrlName="vl.Lazy`1" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Locale class">
    <Symbol Key="::vl::Locale" UrlName="vl.Locale" Doc="true" />
  </Overloads>
  <Overloads DisplayName="LockedInt typedecl">
    <Symbol Key="::vl::LockedInt" UrlName="vl.LockedInt" Doc="false" />
  </Overloads>
  <Overloads DisplayName="LoremIpsum function">
    <Symbol Key="::vl::LoremIpsum(vint,LoremIpsumCasing)" UrlName="vl.LoremIpsum(vint,LoremIpsumCasing)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="LoremIpsumCasing enum">
    <Symbol Key="::vl::LoremIpsumCasing" UrlName="vl.LoremIpsumCasing" Doc="false" />
  </Overloads>
  <Overloads DisplayName="LoremIpsumParagraph function">
    <Symbol Key="::vl::LoremIpsumParagraph(vint)" UrlName="vl.LoremIpsumParagraph(vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="LoremIpsumSentence function">
    <Symbol Key="::vl::LoremIpsumSentence(vint)" UrlName="vl.LoremIpsumSentence(vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="LoremIpsumTitle function">
    <Symbol Key="::vl::LoremIpsumTitle(vint)" UrlName="vl.LoremIpsumTitle(vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="MakePtr function">
    <Symbol Key="::vl::MakePtr`2(... TArgs)" UrlName="vl.MakePtr`2(... TArgs)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="MoveValue function">
    <Symbol Key="::vl::MoveValue`1(&amp;&amp; T)" UrlName="vl.MoveValue`1(&amp;&amp; T)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Mutex class">
    <Symbol Key="::vl::Mutex" UrlName="vl.Mutex" Doc="true" />
  </Overloads>
  <Overloads DisplayName="NotCopyable class">
    <Symbol Key="::vl::NotCopyable" UrlName="vl.NotCopyable" Doc="false" />
  </Overloads>
  <Overloads DisplayName="NoType struct">
    <Symbol Key="::vl::NoType" UrlName="vl.NoType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Nullable class">
    <Symbol Key="::vl::Nullable`1" UrlName="vl.Nullable`1" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Object class">
    <Symbol Key="::vl::Object" UrlName="vl.Object" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ObjectBox class">
    <Symbol Key="::vl::ObjectBox`1" UrlName="vl.ObjectBox`1" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ObjectString class">
    <Symbol Key="::vl::ObjectString`1" UrlName="vl.ObjectString`1" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ParsingException class">
    <Symbol Key="::vl::ParsingException" UrlName="vl.ParsingException" Doc="false" />
  </Overloads>
  <Overloads DisplayName="POD struct">
    <Symbol Key="::vl::POD`1" UrlName="vl.POD`1" Doc="true" />
    <Symbol Key="::vl::POD`0&lt;bool&gt;" UrlName="vl.POD`0{bool}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;vint8_t&gt;" UrlName="vl.POD`0{vint8_t}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;vuint8_t&gt;" UrlName="vl.POD`0{vuint8_t}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;vint16_t&gt;" UrlName="vl.POD`0{vint16_t}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;vuint16_t&gt;" UrlName="vl.POD`0{vuint16_t}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;vint32_t&gt;" UrlName="vl.POD`0{vint32_t}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;vuint32_t&gt;" UrlName="vl.POD`0{vuint32_t}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;vint64_t&gt;" UrlName="vl.POD`0{vint64_t}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;vuint64_t&gt;" UrlName="vl.POD`0{vuint64_t}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;char&gt;" UrlName="vl.POD`0{char}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;wchar_t&gt;" UrlName="vl.POD`0{wchar_t}" Doc="false" />
    <Symbol Key="::vl::POD`1&lt;* T&gt;" UrlName="vl.POD`1{^ T}" Doc="false" />
    <Symbol Key="::vl::POD`1&lt;&amp; T&gt;" UrlName="vl.POD`1{&amp; T}" Doc="false" />
    <Symbol Key="::vl::POD`2&lt;* C::(T)&gt;" UrlName="vl.POD`2{^ C.(T)}" Doc="false" />
    <Symbol Key="::vl::POD`2&lt;array[_Size] T&gt;" UrlName="vl.POD`2{array[_Size] T}" Doc="false" />
    <Symbol Key="::vl::POD`1&lt;const T&gt;" UrlName="vl.POD`1{const T}" Doc="false" />
    <Symbol Key="::vl::POD`1&lt;volatile T&gt;" UrlName="vl.POD`1{volatile T}" Doc="false" />
    <Symbol Key="::vl::POD`1&lt;const volatile T&gt;" UrlName="vl.POD`1{const volatile T}" Doc="false" />
    <Symbol Key="::vl::POD`2&lt;collections::Pair&lt;K, V&gt;&gt;" UrlName="vl.POD`2{collections.Pair{K, V}}" Doc="false" />
    <Symbol Key="::vl::POD`1&lt;Ptr&lt;T&gt;&gt;" UrlName="vl.POD`1{Ptr{T}}" Doc="false" />
    <Symbol Key="::vl::POD`1&lt;ComPtr&lt;T&gt;&gt;" UrlName="vl.POD`1{ComPtr{T}}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;regex_internal::CharRange&gt;" UrlName="vl.POD`0{regex_internal.CharRange}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;regex_internal::CaptureRecord&gt;" UrlName="vl.POD`0{regex_internal.CaptureRecord}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;presentation::elements_windows_gdi::UniscribeColorRange&gt;" UrlName="vl.POD`0{presentation.elements_windows_gdi.UniscribeColorRange}" Doc="false" />
    <Symbol Key="::vl::POD`0&lt;presentation::elements_windows_gdi::UniscribeColor&gt;" UrlName="vl.POD`0{presentation.elements_windows_gdi.UniscribeColor}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="pos_t typedecl">
    <Symbol Key="::vl::pos_t" UrlName="vl.pos_t" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Ptr class">
    <Symbol Key="::vl::Ptr`1" UrlName="vl.Ptr`1" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ReaderWriterLock class">
    <Symbol Key="::vl::ReaderWriterLock" UrlName="vl.ReaderWriterLock" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ReferenceCounterOperator struct">
    <Symbol Key="::vl::ReferenceCounterOperator`2" UrlName="vl.ReferenceCounterOperator`2" Doc="true" />
    <Symbol Key="::vl::ReferenceCounterOperator`1&lt;T,RequiresConvertable&lt;T, reflection::DescriptableObject&gt;::YesNoType&gt;" UrlName="vl.ReferenceCounterOperator`1{T,RequiresConvertable{T, reflection.DescriptableObject}.YesNoType}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="RemoveConst struct">
    <Symbol Key="::vl::RemoveConst`1" UrlName="vl.RemoveConst`1" Doc="false" />
    <Symbol Key="::vl::RemoveConst`1&lt;const T&gt;" UrlName="vl.RemoveConst`1{const T}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="RemoveCVR struct">
    <Symbol Key="::vl::RemoveCVR`1" UrlName="vl.RemoveCVR`1" Doc="false" />
    <Symbol Key="::vl::RemoveCVR`1&lt;&amp; T&gt;" UrlName="vl.RemoveCVR`1{&amp; T}" Doc="false" />
    <Symbol Key="::vl::RemoveCVR`1&lt;&amp;&amp; T&gt;" UrlName="vl.RemoveCVR`1{&amp;&amp; T}" Doc="false" />
    <Symbol Key="::vl::RemoveCVR`1&lt;const T&gt;" UrlName="vl.RemoveCVR`1{const T}" Doc="false" />
    <Symbol Key="::vl::RemoveCVR`1&lt;volatile T&gt;" UrlName="vl.RemoveCVR`1{volatile T}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="RemoveReference struct">
    <Symbol Key="::vl::RemoveReference`1" UrlName="vl.RemoveReference`1" Doc="false" />
    <Symbol Key="::vl::RemoveReference`1&lt;&amp; T&gt;" UrlName="vl.RemoveReference`1{&amp; T}" Doc="false" />
    <Symbol Key="::vl::RemoveReference`1&lt;&amp;&amp; T&gt;" UrlName="vl.RemoveReference`1{&amp;&amp; T}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="RemoveVolatile struct">
    <Symbol Key="::vl::RemoveVolatile`1" UrlName="vl.RemoveVolatile`1" Doc="false" />
    <Symbol Key="::vl::RemoveVolatile`1&lt;volatile T&gt;" UrlName="vl.RemoveVolatile`1{volatile T}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="RepeatingTaskExecutor class">
    <Symbol Key="::vl::RepeatingTaskExecutor`1" UrlName="vl.RepeatingTaskExecutor`1" Doc="true" />
  </Overloads>
  <Overloads DisplayName="RequiresConvertable struct">
    <Symbol Key="::vl::RequiresConvertable`2" UrlName="vl.RequiresConvertable`2" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Semaphore class">
    <Symbol Key="::vl::Semaphore" UrlName="vl.Semaphore" Doc="true" />
  </Overloads>
  <Overloads DisplayName="SpinLock class">
    <Symbol Key="::vl::SpinLock" UrlName="vl.SpinLock" Doc="true" />
  </Overloads>
  <Overloads DisplayName="Thread class">
    <Symbol Key="::vl::Thread" UrlName="vl.Thread" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ThreadLocalStorage class">
    <Symbol Key="::vl::ThreadLocalStorage" UrlName="vl.ThreadLocalStorage" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ThreadPoolLite class">
    <Symbol Key="::vl::ThreadPoolLite" UrlName="vl.ThreadPoolLite" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ThreadVariable class">
    <Symbol Key="::vl::ThreadVariable`1" UrlName="vl.ThreadVariable`1" Doc="true" />
    <Symbol Key="::vl::ThreadVariable`1&lt;* T&gt;" UrlName="vl.ThreadVariable`1{^ T}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Tuple class">
    <Symbol Key="::vl::Tuple`11" UrlName="vl.Tuple`11" Doc="false" />
    <Symbol Key="::vl::Tuple`1&lt;T0&gt;" UrlName="vl.Tuple`1{T0}" Doc="false" />
    <Symbol Key="::vl::Tuple`2&lt;T0,T1&gt;" UrlName="vl.Tuple`2{T0,T1}" Doc="false" />
    <Symbol Key="::vl::Tuple`3&lt;T0,T1,T2&gt;" UrlName="vl.Tuple`3{T0,T1,T2}" Doc="false" />
    <Symbol Key="::vl::Tuple`4&lt;T0,T1,T2,T3&gt;" UrlName="vl.Tuple`4{T0,T1,T2,T3}" Doc="false" />
    <Symbol Key="::vl::Tuple`5&lt;T0,T1,T2,T3,T4&gt;" UrlName="vl.Tuple`5{T0,T1,T2,T3,T4}" Doc="false" />
    <Symbol Key="::vl::Tuple`6&lt;T0,T1,T2,T3,T4,T5&gt;" UrlName="vl.Tuple`6{T0,T1,T2,T3,T4,T5}" Doc="false" />
    <Symbol Key="::vl::Tuple`7&lt;T0,T1,T2,T3,T4,T5,T6&gt;" UrlName="vl.Tuple`7{T0,T1,T2,T3,T4,T5,T6}" Doc="false" />
    <Symbol Key="::vl::Tuple`8&lt;T0,T1,T2,T3,T4,T5,T6,T7&gt;" UrlName="vl.Tuple`8{T0,T1,T2,T3,T4,T5,T6,T7}" Doc="false" />
    <Symbol Key="::vl::Tuple`9&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8&gt;" UrlName="vl.Tuple`9{T0,T1,T2,T3,T4,T5,T6,T7,T8}" Doc="false" />
    <Symbol Key="::vl::Tuple`10&lt;T0,T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;" UrlName="vl.Tuple`10{T0,T1,T2,T3,T4,T5,T6,T7,T8,T9}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="TupleNullItem class">
    <Symbol Key="::vl::TupleNullItem" UrlName="vl.TupleNullItem" Doc="false" />
  </Overloads>
  <Overloads DisplayName="TypeTuple struct">
    <Symbol Key="::vl::TypeTuple`1" UrlName="vl.TypeTuple`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="u64toa function">
    <Symbol Key="::vl::u64toa(vuint64_t)" UrlName="vl.u64toa(vuint64_t)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="u64tow function">
    <Symbol Key="::vl::u64tow(vuint64_t)" UrlName="vl.u64tow(vuint64_t)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="UrlEncodeQuery function">
    <Symbol Key="::vl::UrlEncodeQuery(&amp; const WString)" UrlName="vl.UrlEncodeQuery(&amp; const WString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="utoa function">
    <Symbol Key="::vl::utoa(vuint)" UrlName="vl.utoa(vuint)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="utow function">
    <Symbol Key="::vl::utow(vuint)" UrlName="vl.utow(vuint)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vint typedecl">
    <Symbol Key="::vl::vint" UrlName="vl.vint" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vint16_t typedecl">
    <Symbol Key="::vl::vint16_t" UrlName="vl.vint16_t" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vint32_t typedecl">
    <Symbol Key="::vl::vint32_t" UrlName="vl.vint32_t" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vint64_t typedecl">
    <Symbol Key="::vl::vint64_t" UrlName="vl.vint64_t" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vint8_t typedecl">
    <Symbol Key="::vl::vint8_t" UrlName="vl.vint8_t" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vsint typedecl">
    <Symbol Key="::vl::vsint" UrlName="vl.vsint" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vuint typedecl">
    <Symbol Key="::vl::vuint" UrlName="vl.vuint" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vuint16_t typedecl">
    <Symbol Key="::vl::vuint16_t" UrlName="vl.vuint16_t" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vuint32_t typedecl">
    <Symbol Key="::vl::vuint32_t" UrlName="vl.vuint32_t" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vuint64_t typedecl">
    <Symbol Key="::vl::vuint64_t" UrlName="vl.vuint64_t" Doc="true" />
  </Overloads>
  <Overloads DisplayName="vuint8_t typedecl">
    <Symbol Key="::vl::vuint8_t" UrlName="vl.vuint8_t" Doc="true" />
  </Overloads>
  <Overloads DisplayName="WaitableObject class">
    <Symbol Key="::vl::WaitableObject" UrlName="vl.WaitableObject" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wlower function">
    <Symbol Key="::vl::wlower(&amp; const WString)" UrlName="vl.wlower(&amp; const WString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="WString typedecl">
    <Symbol Key="::vl::WString" UrlName="vl.WString" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtoa function">
    <Symbol Key="::vl::wtoa(&amp; const WString)" UrlName="vl.wtoa(&amp; const WString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtof function">
    <Symbol Key="::vl::wtof(&amp; const WString)" UrlName="vl.wtof(&amp; const WString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtof_test function">
    <Symbol Key="::vl::wtof_test(&amp; const WString,&amp; bool)" UrlName="vl.wtof_test(&amp; const WString,&amp; bool)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtoi function">
    <Symbol Key="::vl::wtoi(&amp; const WString)" UrlName="vl.wtoi(&amp; const WString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtoi_test function">
    <Symbol Key="::vl::wtoi_test(&amp; const WString,&amp; bool)" UrlName="vl.wtoi_test(&amp; const WString,&amp; bool)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtoi64 function">
    <Symbol Key="::vl::wtoi64(&amp; const WString)" UrlName="vl.wtoi64(&amp; const WString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtoi64_test function">
    <Symbol Key="::vl::wtoi64_test(&amp; const WString,&amp; bool)" UrlName="vl.wtoi64_test(&amp; const WString,&amp; bool)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtou function">
    <Symbol Key="::vl::wtou(&amp; const WString)" UrlName="vl.wtou(&amp; const WString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtou_test function">
    <Symbol Key="::vl::wtou_test(&amp; const WString,&amp; bool)" UrlName="vl.wtou_test(&amp; const WString,&amp; bool)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtou64 function">
    <Symbol Key="::vl::wtou64(&amp; const WString)" UrlName="vl.wtou64(&amp; const WString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wtou64_test function">
    <Symbol Key="::vl::wtou64_test(&amp; const WString,&amp; bool)" UrlName="vl.wtou64_test(&amp; const WString,&amp; bool)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="wupper function">
    <Symbol Key="::vl::wupper(&amp; const WString)" UrlName="vl.wupper(&amp; const WString)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="YesType struct">
    <Symbol Key="::vl::YesType" UrlName="vl.YesType" Doc="false" />
  </Overloads>
</Namespace>