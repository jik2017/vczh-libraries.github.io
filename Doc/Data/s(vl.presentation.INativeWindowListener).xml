<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.INativeWindowListener">
    <ClassDecl Access="Public" Name="INativeWindowListener" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener" OverloadKey="::vl::presentation::INativeWindowListener" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Represents a message listener to an &lt;links&gt;&lt;link cref="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" /&gt;&lt;/links&gt;.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <EnumDecl Access="Public" Name="HitTestResult" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult" EnumClass="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Hit test result for a native window.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Children>
            <EnumItemDecl Access="Public" Name="BorderNoSizing" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderNoSizing" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderNoSizing">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Border that doesn't contain sizing functionalitiy.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="BorderLeft" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderLeft" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderLeft">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Left border.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="BorderRight" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderRight" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderRight">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Right border.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="BorderTop" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderTop" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderTop">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Top border.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="BorderBottom" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderBottom" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderBottom">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Bottom border.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="BorderLeftTop" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderLeftTop" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderLeftTop">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Left top border.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="BorderRightTop" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderRightTop" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderRightTop">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Right top border.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="BorderLeftBottom" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderLeftBottom" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderLeftBottom">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Left bottom border.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="BorderRightBottom" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderRightBottom" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::BorderRightBottom">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Right bottom border.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="Title" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::Title" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::Title">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Title&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="ButtonMinimum" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::ButtonMinimum" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::ButtonMinimum">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Minimum button.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="ButtonMaximum" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::ButtonMaximum" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::ButtonMaximum">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Maximum button.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="ButtonClose" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::ButtonClose" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::ButtonClose">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Close button.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="Client" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::Client" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::Client">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Client button.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="Icon" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::Icon" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::Icon">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Icon.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
            <EnumItemDecl Access="Public" Name="NoDecision" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTestResult::NoDecision" OverloadKey="::vl::presentation::INativeWindowListener::HitTestResult::NoDecision">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Let the OS window layer decide.&lt;/summary&gt;
&lt;/Document&gt;</Document>
            </EnumItemDecl>
          </Children>
        </EnumDecl>
        <FuncDecl Access="Public" Name="HitTest" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTest" OverloadKey="::vl::presentation::INativeWindowListener::HitTest(NativePoint)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Perform a hit test.
&lt;/summary&gt;
  &lt;returns&gt;Returns the hit test result. If "NoDecision" is returned, the native window provider should call the OS window layer to do the hit test.&lt;/returns&gt;
  &lt;param name="location"&gt;The location to do the hit test. This location is in the window space (not the client space).&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindowListener::HitTestResult" Name="HitTestResult">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeWindowListener::HitTestResult@s:vl.presentation.INativeWindowListener" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="location" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HitTest::location" OverloadKey="::vl::presentation::INativeWindowListener::HitTest(NativePoint)::location" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Moving" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Moving" OverloadKey="::vl::presentation::INativeWindowListener::Moving(&amp; NativeRect,bool)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is moving.
&lt;/summary&gt;
  &lt;param name="bounds"&gt;The bounds. Message handler can change the bounds.&lt;/param&gt;
  &lt;param name="fixSizeOnly"&gt;True if the message raise only want the message handler to change the size.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="bounds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Moving::bounds" OverloadKey="::vl::presentation::INativeWindowListener::Moving(&amp; NativeRect,bool)::bounds" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeRect" Name="NativeRect">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::NativeRect@s:vl.presentation.NativeRect" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="fixSizeOnly" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Moving::fixSizeOnly" OverloadKey="::vl::presentation::INativeWindowListener::Moving(&amp; NativeRect,bool)::fixSizeOnly" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Moved" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Moved" OverloadKey="::vl::presentation::INativeWindowListener::Moved()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is moved.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DpiChanged" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::DpiChanged" OverloadKey="::vl::presentation::INativeWindowListener::DpiChanged()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the dpi associated with this window is changed.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Enabled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Enabled" OverloadKey="::vl::presentation::INativeWindowListener::Enabled()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is enabled.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Disabled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Disabled" OverloadKey="::vl::presentation::INativeWindowListener::Disabled()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is disabled.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GotFocus" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::GotFocus" OverloadKey="::vl::presentation::INativeWindowListener::GotFocus()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window got the focus.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="LostFocus" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::LostFocus" OverloadKey="::vl::presentation::INativeWindowListener::LostFocus()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window lost the focus.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Activated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Activated" OverloadKey="::vl::presentation::INativeWindowListener::Activated()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is activated.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Deactivated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Deactivated" OverloadKey="::vl::presentation::INativeWindowListener::Deactivated()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is deactivated.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Opened" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Opened" OverloadKey="::vl::presentation::INativeWindowListener::Opened()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is opened.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Closing" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Closing" OverloadKey="::vl::presentation::INativeWindowListener::Closing(&amp; bool)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is closing.
&lt;/summary&gt;
  &lt;param name="cancel"&gt;Change the value to true to prevent the windows from being closed.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="cancel" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Closing::cancel" OverloadKey="::vl::presentation::INativeWindowListener::Closing(&amp; bool)::cancel" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl Name="bool" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Closed" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Closed" OverloadKey="::vl::presentation::INativeWindowListener::Closed()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is closed.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Paint" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Paint" OverloadKey="::vl::presentation::INativeWindowListener::Paint()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is painting.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Destroying" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Destroying" OverloadKey="::vl::presentation::INativeWindowListener::Destroying()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is destroying.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Destroyed" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Destroyed" OverloadKey="::vl::presentation::INativeWindowListener::Destroyed()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the window is destroyed.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="LeftButtonDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::LeftButtonDown" OverloadKey="::vl::presentation::INativeWindowListener::LeftButtonDown(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the left mouse button is pressed.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::LeftButtonDown::info" OverloadKey="::vl::presentation::INativeWindowListener::LeftButtonDown(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="LeftButtonUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::LeftButtonUp" OverloadKey="::vl::presentation::INativeWindowListener::LeftButtonUp(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the left mouse button is released.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::LeftButtonUp::info" OverloadKey="::vl::presentation::INativeWindowListener::LeftButtonUp(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="LeftButtonDoubleClick" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::LeftButtonDoubleClick" OverloadKey="::vl::presentation::INativeWindowListener::LeftButtonDoubleClick(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the left mouse button performed a double click.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::LeftButtonDoubleClick::info" OverloadKey="::vl::presentation::INativeWindowListener::LeftButtonDoubleClick(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RightButtonDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::RightButtonDown" OverloadKey="::vl::presentation::INativeWindowListener::RightButtonDown(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the right mouse button is pressed.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::RightButtonDown::info" OverloadKey="::vl::presentation::INativeWindowListener::RightButtonDown(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RightButtonUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::RightButtonUp" OverloadKey="::vl::presentation::INativeWindowListener::RightButtonUp(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the right mouse button is released.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::RightButtonUp::info" OverloadKey="::vl::presentation::INativeWindowListener::RightButtonUp(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RightButtonDoubleClick" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::RightButtonDoubleClick" OverloadKey="::vl::presentation::INativeWindowListener::RightButtonDoubleClick(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the right mouse button performed a double click.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::RightButtonDoubleClick::info" OverloadKey="::vl::presentation::INativeWindowListener::RightButtonDoubleClick(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="MiddleButtonDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::MiddleButtonDown" OverloadKey="::vl::presentation::INativeWindowListener::MiddleButtonDown(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the middle mouse button is pressed.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::MiddleButtonDown::info" OverloadKey="::vl::presentation::INativeWindowListener::MiddleButtonDown(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="MiddleButtonUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::MiddleButtonUp" OverloadKey="::vl::presentation::INativeWindowListener::MiddleButtonUp(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the middle mouse button is released.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::MiddleButtonUp::info" OverloadKey="::vl::presentation::INativeWindowListener::MiddleButtonUp(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="MiddleButtonDoubleClick" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::MiddleButtonDoubleClick" OverloadKey="::vl::presentation::INativeWindowListener::MiddleButtonDoubleClick(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the middle mouse button performed a double click.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::MiddleButtonDoubleClick::info" OverloadKey="::vl::presentation::INativeWindowListener::MiddleButtonDoubleClick(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="HorizontalWheel" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HorizontalWheel" OverloadKey="::vl::presentation::INativeWindowListener::HorizontalWheel(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the horizontal mouse wheel scrolls.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::HorizontalWheel::info" OverloadKey="::vl::presentation::INativeWindowListener::HorizontalWheel(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="VerticalWheel" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::VerticalWheel" OverloadKey="::vl::presentation::INativeWindowListener::VerticalWheel(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the horizontal vertical wheel scrolls.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::VerticalWheel::info" OverloadKey="::vl::presentation::INativeWindowListener::VerticalWheel(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="MouseMoving" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::MouseMoving" OverloadKey="::vl::presentation::INativeWindowListener::MouseMoving(&amp; const NativeWindowMouseInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the mouse is moving on the window.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::MouseMoving::info" OverloadKey="::vl::presentation::INativeWindowListener::MouseMoving(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="MouseEntered" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::MouseEntered" OverloadKey="::vl::presentation::INativeWindowListener::MouseEntered()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the mouse entered the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="MouseLeaved" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::MouseLeaved" OverloadKey="::vl::presentation::INativeWindowListener::MouseLeaved()" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called when the mouse leaved the window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="KeyDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::KeyDown" OverloadKey="::vl::presentation::INativeWindowListener::KeyDown(&amp; const NativeWindowKeyInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called a key is pressed.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::KeyDown::info" OverloadKey="::vl::presentation::INativeWindowListener::KeyDown(&amp; const NativeWindowKeyInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowKeyInfo" Name="NativeWindowKeyInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowKeyInfo@s:vl.presentation.NativeWindowKeyInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="KeyUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::KeyUp" OverloadKey="::vl::presentation::INativeWindowListener::KeyUp(&amp; const NativeWindowKeyInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called a key is released.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::KeyUp::info" OverloadKey="::vl::presentation::INativeWindowListener::KeyUp(&amp; const NativeWindowKeyInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowKeyInfo" Name="NativeWindowKeyInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowKeyInfo@s:vl.presentation.NativeWindowKeyInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SysKeyDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::SysKeyDown" OverloadKey="::vl::presentation::INativeWindowListener::SysKeyDown(&amp; const NativeWindowKeyInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called a system key is pressed.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::SysKeyDown::info" OverloadKey="::vl::presentation::INativeWindowListener::SysKeyDown(&amp; const NativeWindowKeyInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowKeyInfo" Name="NativeWindowKeyInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowKeyInfo@s:vl.presentation.NativeWindowKeyInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SysKeyUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::SysKeyUp" OverloadKey="::vl::presentation::INativeWindowListener::SysKeyUp(&amp; const NativeWindowKeyInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called a system key is released.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::SysKeyUp::info" OverloadKey="::vl::presentation::INativeWindowListener::SysKeyUp(&amp; const NativeWindowKeyInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowKeyInfo" Name="NativeWindowKeyInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowKeyInfo@s:vl.presentation.NativeWindowKeyInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Char" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Char" OverloadKey="::vl::presentation::INativeWindowListener::Char(&amp; const NativeWindowCharInfo)" Virtual="Virtual" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Called an input character is generated.
&lt;/summary&gt;
  &lt;param name="info"&gt;Detailed information to this message.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowListener::Char::info" OverloadKey="::vl::presentation::INativeWindowListener::Char(&amp; const NativeWindowCharInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowCharInfo" Name="NativeWindowCharInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowCharInfo@s:vl.presentation.NativeWindowCharInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Interface" Name="Interface">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Interface@s:vl.Interface" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>