<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex.RegexLexer">
    <ClassDecl Access="Public" Name="RegexLexer" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer" OverloadKey="::vl::regex::RegexLexer" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Lexical analyzer.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Protected" Name="pure" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::pure" OverloadKey="::vl::regex::RegexLexer::pure" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::regex_internal::PureInterpretor" Name="PureInterpretor">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::PureInterpretor@s:vl.regex_internal.PureInterpretor" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal" Name="regex_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal@ns:vl.regex_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="ids" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::ids" OverloadKey="::vl::regex::RegexLexer::ids" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="stateTokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::stateTokens" OverloadKey="::vl::regex::RegexLexer::stateTokens" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::proc" OverloadKey="::vl::regex::RegexLexer::proc" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexProc" Name="RegexProc">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex::RegexProc@s:vl.regex.RegexProc" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="RegexLexer" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::RegexLexer" OverloadKey="::vl::regex::RegexLexer::RegexLexer(&amp; const collections::IEnumerable&lt;WString&gt;,RegexProc)" Virtual="Normal" Function="Constructor">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a lexical analyzer by a set of regular expressions. &lt;links&gt;&lt;link cref="::vl::regex::RegexToken::token@s:vl.regex.RegexToken" /&gt;&lt;/links&gt; will be the index of the matched regular expression.&lt;/summary&gt;
  &lt;param name="tokens"&gt;The regular expressions.&lt;/param&gt;
  &lt;param name="_proc"&gt;Callback procedures.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="tokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::RegexLexer::tokens" OverloadKey="::vl::regex::RegexLexer::RegexLexer(&amp; const collections::IEnumerable&lt;WString&gt;,RegexProc)::tokens" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <SubTypeDecl ReferencingNameKey="::vl::collections::IEnumerable" Name="IEnumerable">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::IEnumerable`1@s:vl.collections.IEnumerable`1" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections@ns:vl.collections" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::WString@s:vl.WString" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::RegexLexer::_proc" OverloadKey="::vl::regex::RegexLexer::RegexLexer(&amp; const collections::IEnumerable&lt;WString&gt;,RegexProc)::_proc" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex::RegexProc" Name="RegexProc">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex::RegexProc@s:vl.regex.RegexProc" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~RegexLexer" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::~RegexLexer" OverloadKey="::vl::regex::RegexLexer::~RegexLexer()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Parse" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::Parse" OverloadKey="::vl::regex::RegexLexer::Parse(&amp; const WString,vint)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Tokenize a input text.&lt;/summary&gt;
  &lt;returns&gt;The result.&lt;/returns&gt;
  &lt;param name="code"&gt;The text to tokenize.&lt;/param&gt;
  &lt;param name="codeIndex"&gt;Extra information that will store in &lt;links&gt;&lt;link cref="::vl::regex::RegexToken::codeIndex@s:vl.regex.RegexToken" /&gt;&lt;/links&gt;.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexTokens" Name="RegexTokens">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexTokens@s:vl.regex.RegexTokens" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="code" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::Parse::code" OverloadKey="::vl::regex::RegexLexer::Parse(&amp; const WString,vint)const::code" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="codeIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::Parse::codeIndex" OverloadKey="::vl::regex::RegexLexer::Parse(&amp; const WString,vint)const::codeIndex" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Walk" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::Walk" OverloadKey="::vl::regex::RegexLexer::Walk()const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a equivalence walker from this lexical analyzer.&lt;/summary&gt;
  &lt;returns&gt;The walker.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexLexerWalker" Name="RegexLexerWalker">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexLexerWalker@s:vl.regex.RegexLexerWalker" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Colorize" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexLexer::Colorize" OverloadKey="::vl::regex::RegexLexer::Colorize()const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Create a equivalence colorizer from this lexical analyzer.&lt;/summary&gt;
  &lt;returns&gt;The colorizer.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexLexerColorizer" Name="RegexLexerColorizer">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexLexerColorizer@s:vl.regex.RegexLexerColorizer" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Private" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::NotCopyable" Name="NotCopyable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::NotCopyable@s:vl.NotCopyable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>