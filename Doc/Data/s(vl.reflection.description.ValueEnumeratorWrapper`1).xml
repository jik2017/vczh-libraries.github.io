<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.ValueEnumeratorWrapper`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::ValueEnumeratorWrapper`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="ValueEnumeratorWrapper" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueEnumeratorWrapper" OverloadKey="::vl::reflection::description::ValueEnumeratorWrapper`1" ClassType="Class">
          <Children>
            <TypedefDecl Access="Protected" Name="ContainerType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueEnumeratorWrapper::ContainerType" OverloadKey="::vl::reflection::description::ValueEnumeratorWrapper`1::ContainerType">
              <Type>
                <SubTypeDecl ReferencingNameKey="::vl::reflection::description::trait_helper::RemovePtr::Type" Name="Type">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::trait_helper::RemovePtr`1::Type@s:vl.reflection.description.trait_helper.RemovePtr`1" />
                    <Key Value="::vl::reflection::description::trait_helper::RemovePtr`1&lt;* T&gt;::Type@s:vl.reflection.description.trait_helper.RemovePtr`1{^ T}" />
                    <Key Value="::vl::reflection::description::trait_helper::RemovePtr`1&lt;Ptr&lt;T&gt;&gt;::Type@s:vl.reflection.description.trait_helper.RemovePtr`1{Ptr{T}}" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::trait_helper::RemovePtr" Name="RemovePtr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::trait_helper::RemovePtr`1@s:vl.reflection.description.trait_helper.RemovePtr`1" />
                            <Key Value="::vl::reflection::description::trait_helper::RemovePtr`1&lt;* T&gt;@s:vl.reflection.description.trait_helper.RemovePtr`1{^ T}" />
                            <Key Value="::vl::reflection::description::trait_helper::RemovePtr`1&lt;Ptr&lt;T&gt;&gt;@s:vl.reflection.description.trait_helper.RemovePtr`1{Ptr{T}}" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::trait_helper" Name="trait_helper">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::trait_helper@ns:vl.reflection.description.trait_helper" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::DescriptableObject::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1(&amp; * T)::T@s:vl.reflection.DescriptableObject" />
                            <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1()::T@s:vl.reflection.DescriptableObject" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Type>
            </TypedefDecl>
            <TypedefDecl Access="Protected" Name="ElementType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueEnumeratorWrapper::ElementType" OverloadKey="::vl::reflection::description::ValueEnumeratorWrapper`1::ElementType">
              <Type>
                <SubTypeDecl Name="ElementType">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::IEnumerator`1::ElementType@s:vl.collections.IEnumerator`1" />
                    <Key Value="::vl::collections::IEnumerable`1::ElementType@s:vl.collections.IEnumerable`1" />
                    <Key Value="::vl::reflection::description::ValueEnumeratorWrapper`1::ElementType@s:vl.reflection.description.ValueEnumeratorWrapper`1" />
                    <Key Value="::vl::reflection::description::ValueEnumerableWrapper`1::ElementType@s:vl.reflection.description.ValueEnumerableWrapper`1" />
                    <Key Value="::vl::reflection::description::ValueReadonlyListWrapper`1::ElementType@s:vl.reflection.description.ValueReadonlyListWrapper`1" />
                    <Key Value="::vl::reflection::description::ValueListWrapper`1::ElementType@s:vl.reflection.description.ValueListWrapper`1" />
                    <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::ElementType@s:vl.reflection.description.ValueListWrapper`2{^ collections.Array{T, K}}" />
                    <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::ElementType@s:vl.reflection.description.ValueListWrapper`2{^ collections.SortedList{T, K}}" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ValueEnumeratorWrapper::ContainerType" Name="ContainerType">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ValueEnumeratorWrapper`1::ContainerType@s:vl.reflection.description.ValueEnumeratorWrapper`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Type>
            </TypedefDecl>
            <VarDecl Access="Protected" Name="wrapperPointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueEnumeratorWrapper::wrapperPointer" OverloadKey="::vl::reflection::description::ValueEnumeratorWrapper`1::wrapperPointer" Static="False">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::DescriptableObject::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1(&amp; * T)::T@s:vl.reflection.DescriptableObject" />
                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1()::T@s:vl.reflection.DescriptableObject" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </VarDecl>
            <FuncDecl Access="Public" Name="ValueEnumeratorWrapper" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueEnumeratorWrapper::ValueEnumeratorWrapper" OverloadKey="::vl::reflection::description::ValueEnumeratorWrapper`1::ValueEnumeratorWrapper(&amp; const T)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_wrapperPointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueEnumeratorWrapper::ValueEnumeratorWrapper::_wrapperPointer" OverloadKey="::vl::reflection::description::ValueEnumeratorWrapper`1::ValueEnumeratorWrapper(&amp; const T)::_wrapperPointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::DescriptableObject::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1(&amp; * T)::T@s:vl.reflection.DescriptableObject" />
                                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1()::T@s:vl.reflection.DescriptableObject" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetCurrent" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueEnumeratorWrapper::GetCurrent" OverloadKey="::vl::reflection::description::ValueEnumeratorWrapper`1::GetCurrent()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="GetIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueEnumeratorWrapper::GetIndex" OverloadKey="::vl::reflection::description::ValueEnumeratorWrapper`1::GetIndex()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Next" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueEnumeratorWrapper::Next" OverloadKey="::vl::reflection::description::ValueEnumeratorWrapper`1::Next()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueEnumerator" Name="IValueEnumerator">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::IValueEnumerator@s:vl.reflection.description.IValueEnumerator" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>