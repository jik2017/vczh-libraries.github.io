<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.KeyType`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Get the index type of a value for containers.&lt;/summary&gt;
  &lt;typeparam name="T"&gt;Type of the value.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::KeyType`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="KeyType" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType" OverloadKey="::vl::KeyType`1" ClassType="Struct">
          <Children>
            <TypedefDecl Access="Public" Name="Type" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::Type" OverloadKey="::vl::KeyType`1::Type">
              <Document>&lt;Document&gt;
  &lt;summary&gt;The index type of a value for containers.&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::KeyType`1::T@s:vl.KeyType`1" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </TypedefDecl>
            <FuncDecl Access="Public" Name="GetKeyValue" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::GetKeyValue" OverloadKey="::vl::KeyType`1::GetKeyValue(&amp; const T)" Virtual="Static" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Convert a value to its index type.&lt;/summary&gt;
  &lt;returns&gt;The corresponding index value.&lt;/returns&gt;
  &lt;param name="value"&gt;The value.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::KeyType`1::T@s:vl.KeyType`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::GetKeyValue::value" OverloadKey="::vl::KeyType`1::GetKeyValue(&amp; const T)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::KeyType`1::T@s:vl.KeyType`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.KeyType`1{Ptr{T}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::KeyType`1&lt;Ptr&lt;T&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::KeyType`1&lt;Ptr&lt;T&gt;&gt;::T@s:vl.KeyType`1{Ptr{T}}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="KeyType" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType" OverloadKey="::vl::KeyType`1&lt;Ptr&lt;T&gt;&gt;" ClassType="Struct">
          <Children>
            <TypedefDecl Access="Public" Name="Type" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::Type" OverloadKey="::vl::KeyType`1&lt;Ptr&lt;T&gt;&gt;::Type">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::KeyType`1&lt;Ptr&lt;T&gt;&gt;::T@s:vl.KeyType`1{Ptr{T}}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </TypedefDecl>
            <FuncDecl Access="Public" Name="GetKeyValue" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::GetKeyValue" OverloadKey="::vl::KeyType`1&lt;Ptr&lt;T&gt;&gt;::GetKeyValue(&amp; const Ptr&lt;T&gt;)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::KeyType`1&lt;Ptr&lt;T&gt;&gt;::T@s:vl.KeyType`1{Ptr{T}}" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="key" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::GetKeyValue::key" OverloadKey="::vl::KeyType`1&lt;Ptr&lt;T&gt;&gt;::GetKeyValue(&amp; const Ptr&lt;T&gt;)::key" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::KeyType`1&lt;Ptr&lt;T&gt;&gt;::T@s:vl.KeyType`1{Ptr{T}}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.KeyType`1{ComPtr{T}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::T" OverloadKey="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
              <ReferencingOverloadKeys>
                <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::T@s:vl.KeyType`1{ComPtr{T}}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="KeyType" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType" OverloadKey="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;" ClassType="Struct">
          <Children>
            <TypedefDecl Access="Public" Name="Type" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::Type" OverloadKey="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::Type">
              <Type>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::T@s:vl.KeyType`1{ComPtr{T}}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </TypedefDecl>
            <FuncDecl Access="Public" Name="GetKeyValue" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::GetKeyValue" OverloadKey="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::GetKeyValue(&amp; const ComPtr&lt;T&gt;)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::T@s:vl.KeyType`1{ComPtr{T}}" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="key" Tags="x64, Windows;x86, Windows" NameKey="::vl::KeyType::GetKeyValue::key" OverloadKey="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::GetKeyValue(&amp; const ComPtr&lt;T&gt;)::key" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::ComPtr" Name="ComPtr">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::ComPtr`1@s:vl.ComPtr`1" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <RefTypeDecl ReferencingNameKey="::vl::T" Name="T">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::KeyType`1&lt;ComPtr&lt;T&gt;&gt;::T@s:vl.KeyType`1{ComPtr{T}}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>