<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.EventHelper`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="TArgs" Tags="x86, Windows" NameKey="::vl::reflection::description::TArgs" OverloadKey="::vl::reflection::description::EventHelper`1::TArgs" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="EventHelper" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper" OverloadKey="::vl::reflection::description::EventHelper`1" ClassType="Struct">
          <Children>
            <TypedefDecl Access="Public" Name="Handler" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::Handler" OverloadKey="::vl::reflection::description::EventHelper`1::Handler">
              <Type>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Func`1@s:vl.Func`1" />
                                <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <FunctionTypeDecl CallingConvention="Default" Const="False">
                              <ReturnType>
                                <RefTypeDecl Name="void" />
                              </ReturnType>
                              <Parameters>
                                <VarDecl Access="Public" Static="False">
                                  <Type>
                                    <VariadicArgumentTypeDecl>
                                      <Element>
                                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TArgs" Name="TArgs">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::reflection::description::EventHelper`1::TArgs@s:vl.reflection.description.EventHelper`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Element>
                                    </VariadicArgumentTypeDecl>
                                  </Type>
                                </VarDecl>
                              </Parameters>
                            </FunctionTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </TypedefDecl>
            <ClassDecl Access="Public" Name="EventHandlerImpl" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::EventHandlerImpl" OverloadKey="::vl::reflection::description::EventHelper`1::EventHandlerImpl" ClassType="Class">
              <Children>
                <VarDecl Access="Public" Name="handler" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::EventHandlerImpl::handler" OverloadKey="::vl::reflection::description::EventHelper`1::EventHandlerImpl::handler" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::EventHandler" Name="EventHandler">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::EventHandler@s:vl.EventHandler" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
                <FuncDecl Access="Public" Name="EventHandlerImpl" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::EventHandlerImpl::EventHandlerImpl" OverloadKey="::vl::reflection::description::EventHelper`1::EventHandlerImpl::EventHandlerImpl(Ptr&lt;EventHandler&gt;)" Virtual="Normal" Function="Constructor">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="void" />
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="_handler" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::EventHandlerImpl::EventHandlerImpl::_handler" OverloadKey="::vl::reflection::description::EventHelper`1::EventHandlerImpl::EventHandlerImpl(Ptr&lt;EventHandler&gt;)::_handler" Static="False">
                          <Type>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::EventHandler" Name="EventHandler">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::EventHandler@s:vl.EventHandler" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
                <FuncDecl Access="Public" Name="IsAttached" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::EventHandlerImpl::IsAttached" OverloadKey="::vl::reflection::description::EventHelper`1::EventHandlerImpl::IsAttached()" Virtual="Normal" Function="Function">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="bool" />
                      </ReturnType>
                      <Parameters />
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Children>
              <BaseTypes>
                <BaseTypeDecl Access="Public" Tags="x86, Windows">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Object@s:vl.Object" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </BaseTypeDecl>
                <BaseTypeDecl Access="Public" Tags="x86, Windows">
                  <Type>
                    <SubTypeDecl ReferencingNameKey="::vl::reflection::description::IEventHandler" Name="IEventHandler">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IEventHandler@s:vl.reflection.description.IEventHandler" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <SubTypeDecl ReferencingNameKey="::vl::reflection::description" Name="description">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description@ns:vl.reflection.description" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection" Name="reflection">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection@ns:vl.reflection" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Type>
                </BaseTypeDecl>
              </BaseTypes>
            </ClassDecl>
            <FuncDecl Access="Public" Name="Attach" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::Attach" OverloadKey="::vl::reflection::description::EventHelper`1::Attach(&amp; Event&lt;function (... TArgs) : void&gt;,Handler)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <SubTypeDecl ReferencingNameKey="::vl::reflection::description::IEventHandler" Name="IEventHandler">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::IEventHandler@s:vl.reflection.description.IEventHandler" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <SubTypeDecl ReferencingNameKey="::vl::reflection::description" Name="description">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description@ns:vl.reflection.description" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection" Name="reflection">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection@ns:vl.reflection" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="e" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::Attach::e" OverloadKey="::vl::reflection::description::EventHelper`1::Attach(&amp; Event&lt;function (... TArgs) : void&gt;,Handler)::e" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Event" Name="Event">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Event`1@s:vl.Event`1" />
                                    <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;@s:vl.Event`1{function (... TArgs) # void}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters>
                                    <VarDecl Access="Public" Static="False">
                                      <Type>
                                        <VariadicArgumentTypeDecl>
                                          <Element>
                                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TArgs" Name="TArgs">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::reflection::description::EventHelper`1::TArgs@s:vl.reflection.description.EventHelper`1" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </Element>
                                        </VariadicArgumentTypeDecl>
                                      </Type>
                                    </VarDecl>
                                  </Parameters>
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="handler" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::Attach::handler" OverloadKey="::vl::reflection::description::EventHelper`1::Attach(&amp; Event&lt;function (... TArgs) : void&gt;,Handler)::handler" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::EventHelper::Handler" Name="Handler">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::EventHelper`1::Handler@s:vl.reflection.description.EventHelper`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Detach" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::Detach" OverloadKey="::vl::reflection::description::EventHelper`1::Detach(&amp; Event&lt;function (... TArgs) : void&gt;,Ptr&lt;reflection::description::IEventHandler&gt;)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="e" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::Detach::e" OverloadKey="::vl::reflection::description::EventHelper`1::Detach(&amp; Event&lt;function (... TArgs) : void&gt;,Ptr&lt;reflection::description::IEventHandler&gt;)::e" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Event" Name="Event">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Event`1@s:vl.Event`1" />
                                    <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;@s:vl.Event`1{function (... TArgs) # void}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters>
                                    <VarDecl Access="Public" Static="False">
                                      <Type>
                                        <VariadicArgumentTypeDecl>
                                          <Element>
                                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TArgs" Name="TArgs">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::reflection::description::EventHelper`1::TArgs@s:vl.reflection.description.EventHelper`1" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </Element>
                                        </VariadicArgumentTypeDecl>
                                      </Type>
                                    </VarDecl>
                                  </Parameters>
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="handler" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::Detach::handler" OverloadKey="::vl::reflection::description::EventHelper`1::Detach(&amp; Event&lt;function (... TArgs) : void&gt;,Ptr&lt;reflection::description::IEventHandler&gt;)::handler" Static="False">
                      <Type>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <SubTypeDecl ReferencingNameKey="::vl::reflection::description::IEventHandler" Name="IEventHandler">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::IEventHandler@s:vl.reflection.description.IEventHandler" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <SubTypeDecl ReferencingNameKey="::vl::reflection::description" Name="description">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description@ns:vl.reflection.description" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::reflection" Name="reflection">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::reflection@ns:vl.reflection" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Invoke" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::Invoke" OverloadKey="::vl::reflection::description::EventHelper`1::Invoke(&amp; Event&lt;function (... TArgs) : void&gt;)" Virtual="Static" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::Event" Name="Event">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Event`1@s:vl.Event`1" />
                                <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;@s:vl.Event`1{function (... TArgs) # void}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <TypeArguments>
                            <FunctionTypeDecl CallingConvention="Default" Const="False">
                              <ReturnType>
                                <RefTypeDecl Name="void" />
                              </ReturnType>
                              <Parameters>
                                <VarDecl Access="Public" Static="False">
                                  <Type>
                                    <VariadicArgumentTypeDecl>
                                      <Element>
                                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TArgs" Name="TArgs">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::reflection::description::EventHelper`1::TArgs@s:vl.reflection.description.EventHelper`1" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Element>
                                    </VariadicArgumentTypeDecl>
                                  </Type>
                                </VarDecl>
                              </Parameters>
                            </FunctionTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="e" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::EventHelper::Invoke::e" OverloadKey="::vl::reflection::description::EventHelper`1::Invoke(&amp; Event&lt;function (... TArgs) : void&gt;)::e" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Event" Name="Event">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Event`1@s:vl.Event`1" />
                                    <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;@s:vl.Event`1{function (... TArgs) # void}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters>
                                    <VarDecl Access="Public" Static="False">
                                      <Type>
                                        <VariadicArgumentTypeDecl>
                                          <Element>
                                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TArgs" Name="TArgs">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::reflection::description::EventHelper`1::TArgs@s:vl.reflection.description.EventHelper`1" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </Element>
                                        </VariadicArgumentTypeDecl>
                                      </Type>
                                    </VarDecl>
                                  </Parameters>
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>