<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.TypeHintTester`1">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeHintTester`1::T" />
      </TypeParameters>
      <Specialization />
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester" OverloadKey="::vl::reflection::description::TypeHintTester`1" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester::Result" OverloadKey="::vl::reflection::description::TypeHintTester`1::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeHintTester`1{^ T}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;* T&gt;::T" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="Pointer">
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeHintTester`1&lt;* T&gt;::T@s:vl.reflection.description.TypeHintTester`1{^ T}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;* T&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester::Result" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;* T&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeHintTester`1{&amp; T}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;&amp; T&gt;::T" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="LeftRef">
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeHintTester`1&lt;&amp; T&gt;::T@s:vl.reflection.description.TypeHintTester`1{&amp; T}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;&amp; T&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester::Result" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;&amp; T&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeHintTester`1{const T}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;const T&gt;::T" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="Const">
          <Element>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeHintTester`1&lt;const T&gt;::T@s:vl.reflection.description.TypeHintTester`1{const T}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;const T&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester::Result" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;const T&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeHintTester`1{collections.LazyList{T}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::LazyList&lt;T&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <SubTypeDecl ReferencingNameKey="::vl::collections::LazyList" Name="LazyList">
              <ReferencingOverloadKeys>
                <Key Value="::vl::collections::LazyList`1@s:vl.collections.LazyList`1" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections@ns:vl.collections" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeHintTester`1&lt;collections::LazyList&lt;T&gt;&gt;::T@s:vl.reflection.description.TypeHintTester`1{collections.LazyList{T}}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::LazyList&lt;T&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester::Result" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::LazyList&lt;T&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeHintTester`1{collections.Array{T}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::Array&lt;T&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
              <ReferencingOverloadKeys>
                <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections@ns:vl.collections" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeHintTester`1&lt;collections::Array&lt;T&gt;&gt;::T@s:vl.reflection.description.TypeHintTester`1{collections.Array{T}}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::Array&lt;T&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester::Result" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::Array&lt;T&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeHintTester`1{collections.List{T}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::List&lt;T&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
              <ReferencingOverloadKeys>
                <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections@ns:vl.collections" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeHintTester`1&lt;collections::List&lt;T&gt;&gt;::T@s:vl.reflection.description.TypeHintTester`1{collections.List{T}}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::List&lt;T&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester::Result" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::List&lt;T&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeHintTester`1{collections.SortedList{T}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::SortedList&lt;T&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <SubTypeDecl ReferencingNameKey="::vl::collections::SortedList" Name="SortedList">
              <ReferencingOverloadKeys>
                <Key Value="::vl::collections::SortedList`2@s:vl.collections.SortedList`2" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections@ns:vl.collections" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeHintTester`1&lt;collections::SortedList&lt;T&gt;&gt;::T@s:vl.reflection.description.TypeHintTester`1{collections.SortedList{T}}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::SortedList&lt;T&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester::Result" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::SortedList&lt;T&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeHintTester`1{collections.ObservableList{T}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::ObservableList&lt;T&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <GenericTypeDecl>
          <Element>
            <SubTypeDecl ReferencingNameKey="::vl::collections::ObservableList" Name="ObservableList">
              <ReferencingOverloadKeys>
                <Key Value="::vl::collections::ObservableList`1@s:vl.collections.ObservableList`1" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections@ns:vl.collections" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Element>
          <TypeArguments>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::description::TypeHintTester`1&lt;collections::ObservableList&lt;T&gt;&gt;::T@s:vl.reflection.description.TypeHintTester`1{collections.ObservableList{T}}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </TypeArguments>
        </GenericTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeHintTester" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::ObservableList&lt;T&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeHintTester::Result" OverloadKey="::vl::reflection::description::TypeHintTester`1&lt;collections::ObservableList&lt;T&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeInfoHint" Name="TypeInfoHint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeInfoHint@s:vl.reflection.description.TypeInfoHint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>