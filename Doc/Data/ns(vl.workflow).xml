<?xml version="1.0" encoding="utf-8"?>
<Namespace DisplayName="::vl::workflow">
  <Overloads DisplayName="IWfCompilerCallback class">
    <Symbol Key="::vl::workflow::IWfCompilerCallback" UrlName="vl.workflow.IWfCompilerCallback" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfAPConst enum">
    <Symbol Key="::vl::workflow::WfAPConst" UrlName="vl.workflow.WfAPConst" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfAPObserve enum">
    <Symbol Key="::vl::workflow::WfAPObserve" UrlName="vl.workflow.WfAPObserve" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfAttachEventExpression class">
    <Symbol Key="::vl::workflow::WfAttachEventExpression" UrlName="vl.workflow.WfAttachEventExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfAttribute class">
    <Symbol Key="::vl::workflow::WfAttribute" UrlName="vl.workflow.WfAttribute" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfAutoPropertyDeclaration class">
    <Symbol Key="::vl::workflow::WfAutoPropertyDeclaration" UrlName="vl.workflow.WfAutoPropertyDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfBaseConstructorCall class">
    <Symbol Key="::vl::workflow::WfBaseConstructorCall" UrlName="vl.workflow.WfBaseConstructorCall" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfBinaryExpression class">
    <Symbol Key="::vl::workflow::WfBinaryExpression" UrlName="vl.workflow.WfBinaryExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfBinaryOperator enum">
    <Symbol Key="::vl::workflow::WfBinaryOperator" UrlName="vl.workflow.WfBinaryOperator" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfBindExpression class">
    <Symbol Key="::vl::workflow::WfBindExpression" UrlName="vl.workflow.WfBindExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfBlockStatement class">
    <Symbol Key="::vl::workflow::WfBlockStatement" UrlName="vl.workflow.WfBlockStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfBreakStatement class">
    <Symbol Key="::vl::workflow::WfBreakStatement" UrlName="vl.workflow.WfBreakStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCallExpression class">
    <Symbol Key="::vl::workflow::WfCallExpression" UrlName="vl.workflow.WfCallExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCastResultInterfaceDeclaration class">
    <Symbol Key="::vl::workflow::WfCastResultInterfaceDeclaration" UrlName="vl.workflow.WfCastResultInterfaceDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfChildExpression class">
    <Symbol Key="::vl::workflow::WfChildExpression" UrlName="vl.workflow.WfChildExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfChildType class">
    <Symbol Key="::vl::workflow::WfChildType" UrlName="vl.workflow.WfChildType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfClassDeclaration class">
    <Symbol Key="::vl::workflow::WfClassDeclaration" UrlName="vl.workflow.WfClassDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfClassKind enum">
    <Symbol Key="::vl::workflow::WfClassKind" UrlName="vl.workflow.WfClassKind" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfClassMember class">
    <Symbol Key="::vl::workflow::WfClassMember" UrlName="vl.workflow.WfClassMember" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfClassMemberKind enum">
    <Symbol Key="::vl::workflow::WfClassMemberKind" UrlName="vl.workflow.WfClassMemberKind" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfConstructorArgument class">
    <Symbol Key="::vl::workflow::WfConstructorArgument" UrlName="vl.workflow.WfConstructorArgument" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfConstructorDeclaration class">
    <Symbol Key="::vl::workflow::WfConstructorDeclaration" UrlName="vl.workflow.WfConstructorDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfConstructorExpression class">
    <Symbol Key="::vl::workflow::WfConstructorExpression" UrlName="vl.workflow.WfConstructorExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfConstructorType enum">
    <Symbol Key="::vl::workflow::WfConstructorType" UrlName="vl.workflow.WfConstructorType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfContinueStatement class">
    <Symbol Key="::vl::workflow::WfContinueStatement" UrlName="vl.workflow.WfContinueStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfConvertParsingTreeNode function">
    <Symbol Key="::vl::workflow::WfConvertParsingTreeNode(vl::Ptr&lt;vl::parsing::ParsingTreeNode&gt;,&amp; const vl::collections::List&lt;vl::regex::RegexToken&gt;)" UrlName="vl.workflow.WfConvertParsingTreeNode(vl.Ptr{vl.parsing.ParsingTreeNode},&amp; const vl.collections.List{vl.regex.RegexToken})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCoOperatorStatement class">
    <Symbol Key="::vl::workflow::WfCoOperatorStatement" UrlName="vl.workflow.WfCoOperatorStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCoPauseStatement class">
    <Symbol Key="::vl::workflow::WfCoPauseStatement" UrlName="vl.workflow.WfCoPauseStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCoProviderStatement class">
    <Symbol Key="::vl::workflow::WfCoProviderStatement" UrlName="vl.workflow.WfCoProviderStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfCoroutineStatement class">
    <Symbol Key="::vl::workflow::WfCoroutineStatement" UrlName="vl.workflow.WfCoroutineStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfDeclaration class">
    <Symbol Key="::vl::workflow::WfDeclaration" UrlName="vl.workflow.WfDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfDeleteStatement class">
    <Symbol Key="::vl::workflow::WfDeleteStatement" UrlName="vl.workflow.WfDeleteStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfDestructorDeclaration class">
    <Symbol Key="::vl::workflow::WfDestructorDeclaration" UrlName="vl.workflow.WfDestructorDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfDetachEventExpression class">
    <Symbol Key="::vl::workflow::WfDetachEventExpression" UrlName="vl.workflow.WfDetachEventExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfEnumDeclaration class">
    <Symbol Key="::vl::workflow::WfEnumDeclaration" UrlName="vl.workflow.WfEnumDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfEnumerableType class">
    <Symbol Key="::vl::workflow::WfEnumerableType" UrlName="vl.workflow.WfEnumerableType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfEnumItem class">
    <Symbol Key="::vl::workflow::WfEnumItem" UrlName="vl.workflow.WfEnumItem" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfEnumItemIntersection class">
    <Symbol Key="::vl::workflow::WfEnumItemIntersection" UrlName="vl.workflow.WfEnumItemIntersection" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfEnumItemKind enum">
    <Symbol Key="::vl::workflow::WfEnumItemKind" UrlName="vl.workflow.WfEnumItemKind" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfEnumKind enum">
    <Symbol Key="::vl::workflow::WfEnumKind" UrlName="vl.workflow.WfEnumKind" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfEventDeclaration class">
    <Symbol Key="::vl::workflow::WfEventDeclaration" UrlName="vl.workflow.WfEventDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfExpectedTypeCastExpression class">
    <Symbol Key="::vl::workflow::WfExpectedTypeCastExpression" UrlName="vl.workflow.WfExpectedTypeCastExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfExpression class">
    <Symbol Key="::vl::workflow::WfExpression" UrlName="vl.workflow.WfExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfExpressionStatement class">
    <Symbol Key="::vl::workflow::WfExpressionStatement" UrlName="vl.workflow.WfExpressionStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfFloatingExpression class">
    <Symbol Key="::vl::workflow::WfFloatingExpression" UrlName="vl.workflow.WfFloatingExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfForEachDirection enum">
    <Symbol Key="::vl::workflow::WfForEachDirection" UrlName="vl.workflow.WfForEachDirection" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfForEachStatement class">
    <Symbol Key="::vl::workflow::WfForEachStatement" UrlName="vl.workflow.WfForEachStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfFormatExpression class">
    <Symbol Key="::vl::workflow::WfFormatExpression" UrlName="vl.workflow.WfFormatExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfFunctionAnonymity enum">
    <Symbol Key="::vl::workflow::WfFunctionAnonymity" UrlName="vl.workflow.WfFunctionAnonymity" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfFunctionArgument class">
    <Symbol Key="::vl::workflow::WfFunctionArgument" UrlName="vl.workflow.WfFunctionArgument" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfFunctionDeclaration class">
    <Symbol Key="::vl::workflow::WfFunctionDeclaration" UrlName="vl.workflow.WfFunctionDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfFunctionExpression class">
    <Symbol Key="::vl::workflow::WfFunctionExpression" UrlName="vl.workflow.WfFunctionExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfFunctionType class">
    <Symbol Key="::vl::workflow::WfFunctionType" UrlName="vl.workflow.WfFunctionType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfGetParserTextBuffer function">
    <Symbol Key="::vl::workflow::WfGetParserTextBuffer()" UrlName="vl.workflow.WfGetParserTextBuffer()" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfIfExpression class">
    <Symbol Key="::vl::workflow::WfIfExpression" UrlName="vl.workflow.WfIfExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfIfStatement class">
    <Symbol Key="::vl::workflow::WfIfStatement" UrlName="vl.workflow.WfIfStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfInferExpression class">
    <Symbol Key="::vl::workflow::WfInferExpression" UrlName="vl.workflow.WfInferExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfIntegerExpression class">
    <Symbol Key="::vl::workflow::WfIntegerExpression" UrlName="vl.workflow.WfIntegerExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfLetExpression class">
    <Symbol Key="::vl::workflow::WfLetExpression" UrlName="vl.workflow.WfLetExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfLetVariable class">
    <Symbol Key="::vl::workflow::WfLetVariable" UrlName="vl.workflow.WfLetVariable" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfLiteralExpression class">
    <Symbol Key="::vl::workflow::WfLiteralExpression" UrlName="vl.workflow.WfLiteralExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfLiteralValue enum">
    <Symbol Key="::vl::workflow::WfLiteralValue" UrlName="vl.workflow.WfLiteralValue" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfLoadTable function">
    <Symbol Key="::vl::workflow::WfLoadTable()" UrlName="vl.workflow.WfLoadTable()" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfMapType class">
    <Symbol Key="::vl::workflow::WfMapType" UrlName="vl.workflow.WfMapType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfMapWritability enum">
    <Symbol Key="::vl::workflow::WfMapWritability" UrlName="vl.workflow.WfMapWritability" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfMemberExpression class">
    <Symbol Key="::vl::workflow::WfMemberExpression" UrlName="vl.workflow.WfMemberExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfMixinCastExpression class">
    <Symbol Key="::vl::workflow::WfMixinCastExpression" UrlName="vl.workflow.WfMixinCastExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfModule class">
    <Symbol Key="::vl::workflow::WfModule" UrlName="vl.workflow.WfModule" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfModuleType enum">
    <Symbol Key="::vl::workflow::WfModuleType" UrlName="vl.workflow.WfModuleType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfModuleUsingFragment class">
    <Symbol Key="::vl::workflow::WfModuleUsingFragment" UrlName="vl.workflow.WfModuleUsingFragment" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfModuleUsingItem class">
    <Symbol Key="::vl::workflow::WfModuleUsingItem" UrlName="vl.workflow.WfModuleUsingItem" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfModuleUsingNameFragment class">
    <Symbol Key="::vl::workflow::WfModuleUsingNameFragment" UrlName="vl.workflow.WfModuleUsingNameFragment" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfModuleUsingPath class">
    <Symbol Key="::vl::workflow::WfModuleUsingPath" UrlName="vl.workflow.WfModuleUsingPath" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfModuleUsingWildCardFragment class">
    <Symbol Key="::vl::workflow::WfModuleUsingWildCardFragment" UrlName="vl.workflow.WfModuleUsingWildCardFragment" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfNamespaceDeclaration class">
    <Symbol Key="::vl::workflow::WfNamespaceDeclaration" UrlName="vl.workflow.WfNamespaceDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfNewClassExpression class">
    <Symbol Key="::vl::workflow::WfNewClassExpression" UrlName="vl.workflow.WfNewClassExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfNewCoroutineExpression class">
    <Symbol Key="::vl::workflow::WfNewCoroutineExpression" UrlName="vl.workflow.WfNewCoroutineExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfNewInterfaceExpression class">
    <Symbol Key="::vl::workflow::WfNewInterfaceExpression" UrlName="vl.workflow.WfNewInterfaceExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfNullableType class">
    <Symbol Key="::vl::workflow::WfNullableType" UrlName="vl.workflow.WfNullableType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfObservableListType class">
    <Symbol Key="::vl::workflow::WfObservableListType" UrlName="vl.workflow.WfObservableListType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfObserveExpression class">
    <Symbol Key="::vl::workflow::WfObserveExpression" UrlName="vl.workflow.WfObserveExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfObserveType enum">
    <Symbol Key="::vl::workflow::WfObserveType" UrlName="vl.workflow.WfObserveType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfOrderedLambdaExpression class">
    <Symbol Key="::vl::workflow::WfOrderedLambdaExpression" UrlName="vl.workflow.WfOrderedLambdaExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfOrderedNameExpression class">
    <Symbol Key="::vl::workflow::WfOrderedNameExpression" UrlName="vl.workflow.WfOrderedNameExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseCoProviderStatement function">
    <Symbol Key="::vl::workflow::WfParseCoProviderStatement(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseCoProviderStatement(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseCoProviderStatement(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseCoProviderStatement(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseCoProviderStatementAsParsingTreeNode function">
    <Symbol Key="::vl::workflow::WfParseCoProviderStatementAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseCoProviderStatementAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseCoProviderStatementAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseCoProviderStatementAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseDeclaration function">
    <Symbol Key="::vl::workflow::WfParseDeclaration(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseDeclaration(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseDeclaration(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseDeclaration(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseDeclarationAsParsingTreeNode function">
    <Symbol Key="::vl::workflow::WfParseDeclarationAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseDeclarationAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseDeclarationAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseDeclarationAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseExpression function">
    <Symbol Key="::vl::workflow::WfParseExpression(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseExpression(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseExpression(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseExpression(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseExpressionAsParsingTreeNode function">
    <Symbol Key="::vl::workflow::WfParseExpressionAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseExpressionAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseExpressionAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseExpressionAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseModule function">
    <Symbol Key="::vl::workflow::WfParseModule(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseModule(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseModule(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseModule(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseModuleAsParsingTreeNode function">
    <Symbol Key="::vl::workflow::WfParseModuleAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseModuleAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseModuleAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseModuleAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParserTokenIndex enum">
    <Symbol Key="::vl::workflow::WfParserTokenIndex" UrlName="vl.workflow.WfParserTokenIndex" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseStatement function">
    <Symbol Key="::vl::workflow::WfParseStatement(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseStatement(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseStatement(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseStatement(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseStatementAsParsingTreeNode function">
    <Symbol Key="::vl::workflow::WfParseStatementAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseStatementAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseStatementAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseStatementAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseType function">
    <Symbol Key="::vl::workflow::WfParseType(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseType(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseType(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseType(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfParseTypeAsParsingTreeNode function">
    <Symbol Key="::vl::workflow::WfParseTypeAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,&amp; vl::collections::List&lt;vl::Ptr&lt;vl::parsing::ParsingError&gt;&gt;,vl::vint)" UrlName="vl.workflow.WfParseTypeAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},&amp; vl.collections.List{vl.Ptr{vl.parsing.ParsingError}},vl.vint)" Doc="false" />
    <Symbol Key="::vl::workflow::WfParseTypeAsParsingTreeNode(&amp; const vl::WString,vl::Ptr&lt;vl::parsing::tabling::ParsingTable&gt;,vl::vint)" UrlName="vl.workflow.WfParseTypeAsParsingTreeNode(&amp; const vl.WString,vl.Ptr{vl.parsing.tabling.ParsingTable},vl.vint)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfPredefinedType class">
    <Symbol Key="::vl::workflow::WfPredefinedType" UrlName="vl.workflow.WfPredefinedType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfPredefinedTypeName enum">
    <Symbol Key="::vl::workflow::WfPredefinedTypeName" UrlName="vl.workflow.WfPredefinedTypeName" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfPrint function">
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfAttribute&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfAttribute},&amp; const WString,&amp; parsing.ParsingWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfType&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfType},&amp; const WString,&amp; parsing.ParsingWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfExpression&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfExpression},&amp; const WString,&amp; parsing.ParsingWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfStatement&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfStatement},&amp; const WString,&amp; parsing.ParsingWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfDeclaration&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfDeclaration},&amp; const WString,&amp; parsing.ParsingWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfModule&gt;,&amp; const WString,&amp; parsing::ParsingWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfModule},&amp; const WString,&amp; parsing.ParsingWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfAttribute&gt;,&amp; const WString,&amp; stream::TextWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfAttribute},&amp; const WString,&amp; stream.TextWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfType&gt;,&amp; const WString,&amp; stream::TextWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfType},&amp; const WString,&amp; stream.TextWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfExpression&gt;,&amp; const WString,&amp; stream::TextWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfExpression},&amp; const WString,&amp; stream.TextWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfStatement&gt;,&amp; const WString,&amp; stream::TextWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfStatement},&amp; const WString,&amp; stream.TextWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfDeclaration&gt;,&amp; const WString,&amp; stream::TextWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfDeclaration},&amp; const WString,&amp; stream.TextWriter)" Doc="true" />
    <Symbol Key="::vl::workflow::WfPrint(Ptr&lt;WfModule&gt;,&amp; const WString,&amp; stream::TextWriter)" UrlName="vl.workflow.WfPrint(Ptr{WfModule},&amp; const WString,&amp; stream.TextWriter)" Doc="true" />
  </Overloads>
  <Overloads DisplayName="WfPropertyDeclaration class">
    <Symbol Key="::vl::workflow::WfPropertyDeclaration" UrlName="vl.workflow.WfPropertyDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfRaiseExceptionStatement class">
    <Symbol Key="::vl::workflow::WfRaiseExceptionStatement" UrlName="vl.workflow.WfRaiseExceptionStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfRangeBoundary enum">
    <Symbol Key="::vl::workflow::WfRangeBoundary" UrlName="vl.workflow.WfRangeBoundary" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfRangeExpression class">
    <Symbol Key="::vl::workflow::WfRangeExpression" UrlName="vl.workflow.WfRangeExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfRawPointerType class">
    <Symbol Key="::vl::workflow::WfRawPointerType" UrlName="vl.workflow.WfRawPointerType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfReferenceExpression class">
    <Symbol Key="::vl::workflow::WfReferenceExpression" UrlName="vl.workflow.WfReferenceExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfReferenceType class">
    <Symbol Key="::vl::workflow::WfReferenceType" UrlName="vl.workflow.WfReferenceType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfReturnStatement class">
    <Symbol Key="::vl::workflow::WfReturnStatement" UrlName="vl.workflow.WfReturnStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfSetTesting enum">
    <Symbol Key="::vl::workflow::WfSetTesting" UrlName="vl.workflow.WfSetTesting" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfSetTestingExpression class">
    <Symbol Key="::vl::workflow::WfSetTestingExpression" UrlName="vl.workflow.WfSetTestingExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfSharedPointerType class">
    <Symbol Key="::vl::workflow::WfSharedPointerType" UrlName="vl.workflow.WfSharedPointerType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfStatement class">
    <Symbol Key="::vl::workflow::WfStatement" UrlName="vl.workflow.WfStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfStringExpression class">
    <Symbol Key="::vl::workflow::WfStringExpression" UrlName="vl.workflow.WfStringExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfStructDeclaration class">
    <Symbol Key="::vl::workflow::WfStructDeclaration" UrlName="vl.workflow.WfStructDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfStructMember class">
    <Symbol Key="::vl::workflow::WfStructMember" UrlName="vl.workflow.WfStructMember" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfSwitchCase class">
    <Symbol Key="::vl::workflow::WfSwitchCase" UrlName="vl.workflow.WfSwitchCase" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfSwitchStatement class">
    <Symbol Key="::vl::workflow::WfSwitchStatement" UrlName="vl.workflow.WfSwitchStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfThisExpression class">
    <Symbol Key="::vl::workflow::WfThisExpression" UrlName="vl.workflow.WfThisExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfTopQualifiedExpression class">
    <Symbol Key="::vl::workflow::WfTopQualifiedExpression" UrlName="vl.workflow.WfTopQualifiedExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfTopQualifiedType class">
    <Symbol Key="::vl::workflow::WfTopQualifiedType" UrlName="vl.workflow.WfTopQualifiedType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfTryStatement class">
    <Symbol Key="::vl::workflow::WfTryStatement" UrlName="vl.workflow.WfTryStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfType class">
    <Symbol Key="::vl::workflow::WfType" UrlName="vl.workflow.WfType" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfTypeCastingExpression class">
    <Symbol Key="::vl::workflow::WfTypeCastingExpression" UrlName="vl.workflow.WfTypeCastingExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfTypeCastingStrategy enum">
    <Symbol Key="::vl::workflow::WfTypeCastingStrategy" UrlName="vl.workflow.WfTypeCastingStrategy" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfTypeOfExpressionExpression class">
    <Symbol Key="::vl::workflow::WfTypeOfExpressionExpression" UrlName="vl.workflow.WfTypeOfExpressionExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfTypeOfTypeExpression class">
    <Symbol Key="::vl::workflow::WfTypeOfTypeExpression" UrlName="vl.workflow.WfTypeOfTypeExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfTypeTesting enum">
    <Symbol Key="::vl::workflow::WfTypeTesting" UrlName="vl.workflow.WfTypeTesting" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfTypeTestingExpression class">
    <Symbol Key="::vl::workflow::WfTypeTestingExpression" UrlName="vl.workflow.WfTypeTestingExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfUnaryExpression class">
    <Symbol Key="::vl::workflow::WfUnaryExpression" UrlName="vl.workflow.WfUnaryExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfUnaryOperator enum">
    <Symbol Key="::vl::workflow::WfUnaryOperator" UrlName="vl.workflow.WfUnaryOperator" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfVariableDeclaration class">
    <Symbol Key="::vl::workflow::WfVariableDeclaration" UrlName="vl.workflow.WfVariableDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfVariableStatement class">
    <Symbol Key="::vl::workflow::WfVariableStatement" UrlName="vl.workflow.WfVariableStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfVirtualDeclaration class">
    <Symbol Key="::vl::workflow::WfVirtualDeclaration" UrlName="vl.workflow.WfVirtualDeclaration" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfVirtualExpression class">
    <Symbol Key="::vl::workflow::WfVirtualExpression" UrlName="vl.workflow.WfVirtualExpression" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfVirtualStatement class">
    <Symbol Key="::vl::workflow::WfVirtualStatement" UrlName="vl.workflow.WfVirtualStatement" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WfWhileStatement class">
    <Symbol Key="::vl::workflow::WfWhileStatement" UrlName="vl.workflow.WfWhileStatement" Doc="false" />
  </Overloads>
</Namespace>