<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.parsing.analyzing.Automaton">
    <ClassDecl Access="Public" Name="Automaton" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton" OverloadKey="::vl::parsing::analyzing::Automaton" ClassType="Class">
      <Children>
        <TypedefDecl Access="Private" Name="RuleDefList" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::RuleDefList" OverloadKey="::vl::parsing::analyzing::Automaton::RuleDefList">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionRuleDefinition" Name="ParsingDefinitionRuleDefinition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::definitions::ParsingDefinitionRuleDefinition@s:vl.parsing.definitions.ParsingDefinitionRuleDefinition" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <TypedefDecl Access="Private" Name="RuleInfoMap" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::RuleInfoMap" OverloadKey="::vl::parsing::analyzing::Automaton::RuleInfoMap">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Dictionary" Name="Dictionary">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Dictionary`4@s:vl.collections.Dictionary`4" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionRuleDefinition" Name="ParsingDefinitionRuleDefinition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::definitions::ParsingDefinitionRuleDefinition@s:vl.parsing.definitions.ParsingDefinitionRuleDefinition" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::RuleInfo" Name="RuleInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::RuleInfo@s:vl.parsing.analyzing.RuleInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <VarDecl Access="Public" Name="symbolManager" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::symbolManager" OverloadKey="::vl::parsing::analyzing::Automaton::symbolManager" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::ParsingSymbolManager" Name="ParsingSymbolManager">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::parsing::analyzing::ParsingSymbolManager@s:vl.parsing.analyzing.ParsingSymbolManager" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="transitions" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::transitions" OverloadKey="::vl::parsing::analyzing::Automaton::transitions" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="states" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::states" OverloadKey="::vl::parsing::analyzing::Automaton::states" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="ruleInfos" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::ruleInfos" OverloadKey="::vl::parsing::analyzing::Automaton::ruleInfos" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::RuleInfo" Name="RuleInfo">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::RuleInfo@s:vl.parsing.analyzing.RuleInfo" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="orderedRulesDefs" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::orderedRulesDefs" OverloadKey="::vl::parsing::analyzing::Automaton::orderedRulesDefs" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Automaton::RuleDefList" Name="RuleDefList">
              <ReferencingOverloadKeys>
                <Key Value="::vl::parsing::analyzing::Automaton::RuleDefList@s:vl.parsing.analyzing.Automaton" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="ruleDefToInfoMap" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::ruleDefToInfoMap" OverloadKey="::vl::parsing::analyzing::Automaton::ruleDefToInfoMap" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Automaton::RuleInfoMap" Name="RuleInfoMap">
              <ReferencingOverloadKeys>
                <Key Value="::vl::parsing::analyzing::Automaton::RuleInfoMap@s:vl.parsing.analyzing.Automaton" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="Automaton" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::Automaton" OverloadKey="::vl::parsing::analyzing::Automaton::Automaton(* ParsingSymbolManager)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_symbolManager" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::Automaton::_symbolManager" OverloadKey="::vl::parsing::analyzing::Automaton::Automaton(* ParsingSymbolManager)::_symbolManager" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::ParsingSymbolManager" Name="ParsingSymbolManager">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::ParsingSymbolManager@s:vl.parsing.analyzing.ParsingSymbolManager" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~Automaton" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::~Automaton" OverloadKey="::vl::parsing::analyzing::Automaton::~Automaton()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="AddRuleInfo" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::AddRuleInfo" OverloadKey="::vl::parsing::analyzing::Automaton::AddRuleInfo(* definitions::ParsingDefinitionRuleDefinition,Ptr&lt;RuleInfo&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="rule" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::AddRuleInfo::rule" OverloadKey="::vl::parsing::analyzing::Automaton::AddRuleInfo(* definitions::ParsingDefinitionRuleDefinition,Ptr&lt;RuleInfo&gt;)::rule" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionRuleDefinition" Name="ParsingDefinitionRuleDefinition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions::ParsingDefinitionRuleDefinition@s:vl.parsing.definitions.ParsingDefinitionRuleDefinition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="ruleInfo" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::AddRuleInfo::ruleInfo" OverloadKey="::vl::parsing::analyzing::Automaton::AddRuleInfo(* definitions::ParsingDefinitionRuleDefinition,Ptr&lt;RuleInfo&gt;)::ruleInfo" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::RuleInfo" Name="RuleInfo">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::RuleInfo@s:vl.parsing.analyzing.RuleInfo" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RuleStartState" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::RuleStartState" OverloadKey="::vl::parsing::analyzing::Automaton::RuleStartState(* definitions::ParsingDefinitionRuleDefinition)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="ownerRule" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::RuleStartState::ownerRule" OverloadKey="::vl::parsing::analyzing::Automaton::RuleStartState(* definitions::ParsingDefinitionRuleDefinition)::ownerRule" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionRuleDefinition" Name="ParsingDefinitionRuleDefinition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions::ParsingDefinitionRuleDefinition@s:vl.parsing.definitions.ParsingDefinitionRuleDefinition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RootRuleStartState" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::RootRuleStartState" OverloadKey="::vl::parsing::analyzing::Automaton::RootRuleStartState(* definitions::ParsingDefinitionRuleDefinition)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="ownerRule" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::RootRuleStartState::ownerRule" OverloadKey="::vl::parsing::analyzing::Automaton::RootRuleStartState(* definitions::ParsingDefinitionRuleDefinition)::ownerRule" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionRuleDefinition" Name="ParsingDefinitionRuleDefinition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions::ParsingDefinitionRuleDefinition@s:vl.parsing.definitions.ParsingDefinitionRuleDefinition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RootRuleEndState" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::RootRuleEndState" OverloadKey="::vl::parsing::analyzing::Automaton::RootRuleEndState(* definitions::ParsingDefinitionRuleDefinition)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="ownerRule" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::RootRuleEndState::ownerRule" OverloadKey="::vl::parsing::analyzing::Automaton::RootRuleEndState(* definitions::ParsingDefinitionRuleDefinition)::ownerRule" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionRuleDefinition" Name="ParsingDefinitionRuleDefinition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions::ParsingDefinitionRuleDefinition@s:vl.parsing.definitions.ParsingDefinitionRuleDefinition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="StartState" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::StartState" OverloadKey="::vl::parsing::analyzing::Automaton::StartState(* definitions::ParsingDefinitionRuleDefinition,* definitions::ParsingDefinitionGrammar,* definitions::ParsingDefinitionGrammar)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="ownerRule" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::StartState::ownerRule" OverloadKey="::vl::parsing::analyzing::Automaton::StartState(* definitions::ParsingDefinitionRuleDefinition,* definitions::ParsingDefinitionGrammar,* definitions::ParsingDefinitionGrammar)::ownerRule" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionRuleDefinition" Name="ParsingDefinitionRuleDefinition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions::ParsingDefinitionRuleDefinition@s:vl.parsing.definitions.ParsingDefinitionRuleDefinition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="grammarNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::StartState::grammarNode" OverloadKey="::vl::parsing::analyzing::Automaton::StartState(* definitions::ParsingDefinitionRuleDefinition,* definitions::ParsingDefinitionGrammar,* definitions::ParsingDefinitionGrammar)::grammarNode" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionGrammar" Name="ParsingDefinitionGrammar">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions::ParsingDefinitionGrammar@s:vl.parsing.definitions.ParsingDefinitionGrammar" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="stateNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::StartState::stateNode" OverloadKey="::vl::parsing::analyzing::Automaton::StartState(* definitions::ParsingDefinitionRuleDefinition,* definitions::ParsingDefinitionGrammar,* definitions::ParsingDefinitionGrammar)::stateNode" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionGrammar" Name="ParsingDefinitionGrammar">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions::ParsingDefinitionGrammar@s:vl.parsing.definitions.ParsingDefinitionGrammar" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="EndState" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::EndState" OverloadKey="::vl::parsing::analyzing::Automaton::EndState(* definitions::ParsingDefinitionRuleDefinition,* definitions::ParsingDefinitionGrammar,* definitions::ParsingDefinitionGrammar)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="ownerRule" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::EndState::ownerRule" OverloadKey="::vl::parsing::analyzing::Automaton::EndState(* definitions::ParsingDefinitionRuleDefinition,* definitions::ParsingDefinitionGrammar,* definitions::ParsingDefinitionGrammar)::ownerRule" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionRuleDefinition" Name="ParsingDefinitionRuleDefinition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions::ParsingDefinitionRuleDefinition@s:vl.parsing.definitions.ParsingDefinitionRuleDefinition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="grammarNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::EndState::grammarNode" OverloadKey="::vl::parsing::analyzing::Automaton::EndState(* definitions::ParsingDefinitionRuleDefinition,* definitions::ParsingDefinitionGrammar,* definitions::ParsingDefinitionGrammar)::grammarNode" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionGrammar" Name="ParsingDefinitionGrammar">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions::ParsingDefinitionGrammar@s:vl.parsing.definitions.ParsingDefinitionGrammar" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="stateNode" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::EndState::stateNode" OverloadKey="::vl::parsing::analyzing::Automaton::EndState(* definitions::ParsingDefinitionRuleDefinition,* definitions::ParsingDefinitionGrammar,* definitions::ParsingDefinitionGrammar)::stateNode" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::parsing::definitions::ParsingDefinitionGrammar" Name="ParsingDefinitionGrammar">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::definitions::ParsingDefinitionGrammar@s:vl.parsing.definitions.ParsingDefinitionGrammar" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::parsing::definitions" Name="definitions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::parsing::definitions@ns:vl.parsing.definitions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CopyState" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::CopyState" OverloadKey="::vl::parsing::analyzing::Automaton::CopyState(* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="oldState" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::CopyState::oldState" OverloadKey="::vl::parsing::analyzing::Automaton::CopyState(* State)::oldState" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CreateTransition" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::CreateTransition" OverloadKey="::vl::parsing::analyzing::Automaton::CreateTransition(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::CreateTransition::start" OverloadKey="::vl::parsing::analyzing::Automaton::CreateTransition(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::CreateTransition::end" OverloadKey="::vl::parsing::analyzing::Automaton::CreateTransition(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="TokenBegin" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::TokenBegin" OverloadKey="::vl::parsing::analyzing::Automaton::TokenBegin(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::TokenBegin::start" OverloadKey="::vl::parsing::analyzing::Automaton::TokenBegin(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::TokenBegin::end" OverloadKey="::vl::parsing::analyzing::Automaton::TokenBegin(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="TokenFinish" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::TokenFinish" OverloadKey="::vl::parsing::analyzing::Automaton::TokenFinish(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::TokenFinish::start" OverloadKey="::vl::parsing::analyzing::Automaton::TokenFinish(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::TokenFinish::end" OverloadKey="::vl::parsing::analyzing::Automaton::TokenFinish(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="NormalReduce" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::NormalReduce" OverloadKey="::vl::parsing::analyzing::Automaton::NormalReduce(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::NormalReduce::start" OverloadKey="::vl::parsing::analyzing::Automaton::NormalReduce(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::NormalReduce::end" OverloadKey="::vl::parsing::analyzing::Automaton::NormalReduce(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="LeftRecursiveReduce" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::LeftRecursiveReduce" OverloadKey="::vl::parsing::analyzing::Automaton::LeftRecursiveReduce(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::LeftRecursiveReduce::start" OverloadKey="::vl::parsing::analyzing::Automaton::LeftRecursiveReduce(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::LeftRecursiveReduce::end" OverloadKey="::vl::parsing::analyzing::Automaton::LeftRecursiveReduce(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Epsilon" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::Epsilon" OverloadKey="::vl::parsing::analyzing::Automaton::Epsilon(* State,* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::Epsilon::start" OverloadKey="::vl::parsing::analyzing::Automaton::Epsilon(* State,* State)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::Epsilon::end" OverloadKey="::vl::parsing::analyzing::Automaton::Epsilon(* State,* State)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Symbol" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::Symbol" OverloadKey="::vl::parsing::analyzing::Automaton::Symbol(* State,* State,* ParsingSymbol)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::Symbol::start" OverloadKey="::vl::parsing::analyzing::Automaton::Symbol(* State,* State,* ParsingSymbol)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::Symbol::end" OverloadKey="::vl::parsing::analyzing::Automaton::Symbol(* State,* State,* ParsingSymbol)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="transitionSymbol" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::Symbol::transitionSymbol" OverloadKey="::vl::parsing::analyzing::Automaton::Symbol(* State,* State,* ParsingSymbol)::transitionSymbol" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::ParsingSymbol" Name="ParsingSymbol">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::ParsingSymbol@s:vl.parsing.analyzing.ParsingSymbol" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CopyTransition" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::CopyTransition" OverloadKey="::vl::parsing::analyzing::Automaton::CopyTransition(* State,* State,* Transition)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::CopyTransition::start" OverloadKey="::vl::parsing::analyzing::Automaton::CopyTransition(* State,* State,* Transition)::start" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="end" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::CopyTransition::end" OverloadKey="::vl::parsing::analyzing::Automaton::CopyTransition(* State,* State,* Transition)::end" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="oldTransition" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::CopyTransition::oldTransition" OverloadKey="::vl::parsing::analyzing::Automaton::CopyTransition(* State,* State,* Transition)::oldTransition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DeleteTransition" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::DeleteTransition" OverloadKey="::vl::parsing::analyzing::Automaton::DeleteTransition(* Transition)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="transition" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::DeleteTransition::transition" OverloadKey="::vl::parsing::analyzing::Automaton::DeleteTransition(* Transition)::transition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::Transition" Name="Transition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::Transition@s:vl.parsing.analyzing.Transition" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DeleteState" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::DeleteState" OverloadKey="::vl::parsing::analyzing::Automaton::DeleteState(* State)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="state" Tags="x64, Windows;x86, Windows" NameKey="::vl::parsing::analyzing::Automaton::DeleteState::state" OverloadKey="::vl::parsing::analyzing::Automaton::DeleteState(* State)::state" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::parsing::analyzing::State" Name="State">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::parsing::analyzing::State@s:vl.parsing.analyzing.State" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>