<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.Func`2{function (... TArgs) # R}">
    <SymbolTree NamespaceUrlName="vl">
      <SymbolParentMapping>
        <Map From="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(* C,* C::(function (... TArgs) : R))::C" To="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(* C,* C::(function (... TArgs) : R))" />
        <Map From="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)::R2" To="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)" />
        <Map From="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)::TArgs2" To="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)" />
        <Map From="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(&amp; const C)::C" To="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(&amp; const C)" />
        <Map From="::vl::Func`2&lt;function (... TArgs) : R&gt;::R" To="::vl::Func`2&lt;function (... TArgs) : R&gt;" />
        <Map From="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs" To="::vl::Func`2&lt;function (... TArgs) : R&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;" DisplayName="Func class" Doc="true">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::invoker" DisplayName="invoker field" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::FunctionType" DisplayName="FunctionType typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::ResultType" DisplayName="ResultType typedecl" Doc="false" />
        <Overloads DisplayName="Func constructor">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func()" DisplayName="Func constructor" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func(&amp; const Func&lt;function (... TArgs) : R&gt;)" DisplayName="Func constructor" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func(* function (... TArgs) : R)" DisplayName="Func constructor" Doc="true" />
        </Overloads>
        <Overloads DisplayName="Func function">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(* C,* C::(function (... TArgs) : R))" DisplayName="Func function" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)" DisplayName="Func function" Doc="true" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(&amp; const C)" DisplayName="Func function" Doc="true" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator ()(... TArgs)const" DisplayName="operator () method" Doc="true" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator ==(&amp; const Func&lt;function (... TArgs) : R&gt;)const" DisplayName="operator == method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator !=(&amp; const Func&lt;function (... TArgs) : R&gt;)const" DisplayName="operator != method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator()const" DisplayName="operator method" Doc="true" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>