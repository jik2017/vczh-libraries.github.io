<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.INativeAsyncService">
    <ClassDecl Access="Public" Name="INativeAsyncService" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService" OverloadKey="::vl::presentation::INativeAsyncService" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Asynchronized operation service. GacUI is not a thread safe library except for this service. To access this service, use &lt;links&gt;&lt;link cref="::vl::presentation::INativeController::AsyncService()@s:vl.presentation.INativeController" /&gt;&lt;/links&gt;.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="IsInMainThread" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::IsInMainThread" OverloadKey="::vl::presentation::INativeAsyncService::IsInMainThread(* INativeWindow)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the current thread the main thread.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the current thread is the main thread.&lt;/returns&gt;
  &lt;param name="window"&gt;A window to access the corressponding main thread.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::IsInMainThread::window" OverloadKey="::vl::presentation::INativeAsyncService::IsInMainThread(* INativeWindow)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="InvokeAsync" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::InvokeAsync" OverloadKey="::vl::presentation::INativeAsyncService::InvokeAsync(&amp; const Func&lt;function () : void&gt;)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Invoke a specified function with an specified argument asynchronisly.
&lt;/summary&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::InvokeAsync::proc" OverloadKey="::vl::presentation::INativeAsyncService::InvokeAsync(&amp; const Func&lt;function () : void&gt;)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="InvokeInMainThread" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::InvokeInMainThread" OverloadKey="::vl::presentation::INativeAsyncService::InvokeInMainThread(* INativeWindow,&amp; const Func&lt;function () : void&gt;)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Invoke a specified function with an specified argument in the main thread.
&lt;/summary&gt;
  &lt;param name="window"&gt;A window to access the corressponding main thread.&lt;/param&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::InvokeInMainThread::window" OverloadKey="::vl::presentation::INativeAsyncService::InvokeInMainThread(* INativeWindow,&amp; const Func&lt;function () : void&gt;)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::InvokeInMainThread::proc" OverloadKey="::vl::presentation::INativeAsyncService::InvokeInMainThread(* INativeWindow,&amp; const Func&lt;function () : void&gt;)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="InvokeInMainThreadAndWait" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::InvokeInMainThreadAndWait" OverloadKey="::vl::presentation::INativeAsyncService::InvokeInMainThreadAndWait(* INativeWindow,&amp; const Func&lt;function () : void&gt;,vint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Invoke a specified function with an specified argument in the main thread and wait for the function to complete or timeout.
&lt;/summary&gt;
  &lt;returns&gt;Return true if the function complete. Return false if the function has not completed during a specified period of time.&lt;/returns&gt;
  &lt;param name="window"&gt;A window to access the corressponding main thread.&lt;/param&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
  &lt;param name="milliseconds"&gt;The specified period of time to wait. Set to -1 (default value) to wait forever until the function completed.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::InvokeInMainThreadAndWait::window" OverloadKey="::vl::presentation::INativeAsyncService::InvokeInMainThreadAndWait(* INativeWindow,&amp; const Func&lt;function () : void&gt;,vint)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::InvokeInMainThreadAndWait::proc" OverloadKey="::vl::presentation::INativeAsyncService::InvokeInMainThreadAndWait(* INativeWindow,&amp; const Func&lt;function () : void&gt;,vint)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="milliseconds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::InvokeInMainThreadAndWait::milliseconds" OverloadKey="::vl::presentation::INativeAsyncService::InvokeInMainThreadAndWait(* INativeWindow,&amp; const Func&lt;function () : void&gt;,vint)::milliseconds" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DelayExecute" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::DelayExecute" OverloadKey="::vl::presentation::INativeAsyncService::DelayExecute(&amp; const Func&lt;function () : void&gt;,vint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Delay execute a specified function with an specified argument asynchronisly.
&lt;/summary&gt;
  &lt;returns&gt;The Delay execution controller for this task.&lt;/returns&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
  &lt;param name="milliseconds"&gt;Time to delay.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeDelay" Name="INativeDelay">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeDelay@s:vl.presentation.INativeDelay" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::DelayExecute::proc" OverloadKey="::vl::presentation::INativeAsyncService::DelayExecute(&amp; const Func&lt;function () : void&gt;,vint)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="milliseconds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::DelayExecute::milliseconds" OverloadKey="::vl::presentation::INativeAsyncService::DelayExecute(&amp; const Func&lt;function () : void&gt;,vint)::milliseconds" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DelayExecuteInMainThread" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::DelayExecuteInMainThread" OverloadKey="::vl::presentation::INativeAsyncService::DelayExecuteInMainThread(&amp; const Func&lt;function () : void&gt;,vint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Delay execute a specified function with an specified argument in the main thread.
&lt;/summary&gt;
  &lt;returns&gt;The Delay execution controller for this task.&lt;/returns&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
  &lt;param name="milliseconds"&gt;Time to delay.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeDelay" Name="INativeDelay">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeDelay@s:vl.presentation.INativeDelay" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::DelayExecuteInMainThread::proc" OverloadKey="::vl::presentation::INativeAsyncService::DelayExecuteInMainThread(&amp; const Func&lt;function () : void&gt;,vint)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="milliseconds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeAsyncService::DelayExecuteInMainThread::milliseconds" OverloadKey="::vl::presentation::INativeAsyncService::DelayExecuteInMainThread(&amp; const Func&lt;function () : void&gt;,vint)::milliseconds" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeAsyncService" Name="INativeAsyncService">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeAsyncService@s:vl.presentation.INativeAsyncService" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>