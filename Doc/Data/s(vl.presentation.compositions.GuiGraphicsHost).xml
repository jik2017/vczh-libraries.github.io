<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.compositions.GuiGraphicsHost">
    <ClassDecl Access="Public" Name="GuiGraphicsHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
GuiGraphicsHost hosts an &lt;links&gt;&lt;link cref="::vl::presentation::compositions::GuiWindowComposition@s:vl.presentation.compositions.GuiWindowComposition" /&gt;&lt;/links&gt; in an &lt;links&gt;&lt;link cref="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" /&gt;&lt;/links&gt;. The composition will fill the whole window.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <TypedefDecl Access="Private" Name="CompositionList" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::CompositionList" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::CompositionList">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <TypedefDecl Access="Private" Name="AltActionMap" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::AltActionMap" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::AltActionMap">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Dictionary" Name="Dictionary">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Dictionary`4@s:vl.collections.Dictionary`4" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiAltAction" Name="IGuiAltAction">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::compositions::IGuiAltAction@s:vl.presentation.compositions.IGuiAltAction" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <TypedefDecl Access="Private" Name="AltControlMap" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::AltControlMap" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::AltControlMap">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Dictionary" Name="Dictionary">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Dictionary`4@s:vl.collections.Dictionary`4" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControl" Name="GuiControl">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::GuiControl@s:vl.presentation.controls.GuiControl" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls" Name="controls">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls@ns:vl.presentation.controls" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </TypedefDecl>
        <TypedefDecl Access="Private" Name="HostRecord" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::HostRecord" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::HostRecord">
          <Type>
            <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition::GraphicsHostRecord" Name="GraphicsHostRecord">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::compositions::GuiGraphicsComposition::GraphicsHostRecord@s:vl.presentation.compositions.GuiGraphicsComposition" />
              </ReferencingOverloadKeys>
              <Parent>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Parent>
            </SubTypeDecl>
          </Type>
        </TypedefDecl>
        <VarDecl Access="Public" Name="CaretInterval" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::CaretInterval" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::CaretInterval" Static="True">
          <Type>
            <DecorateTypeDecl Decoration="Const">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::vuint64_t" Name="vuint64_t">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vuint64_t@s:vl.vuint64_t" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="hostRecord" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::hostRecord" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::hostRecord" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsHost::HostRecord" Name="HostRecord">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::compositions::GuiGraphicsHost::HostRecord@s:vl.presentation.compositions.GuiGraphicsHost" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="supressPaint" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::supressPaint" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::supressPaint" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="needRender" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::needRender" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::needRender" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="shortcutKeyManager" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::shortcutKeyManager" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::shortcutKeyManager" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiShortcutKeyManager" Name="IGuiShortcutKeyManager">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions::IGuiShortcutKeyManager@s:vl.presentation.compositions.IGuiShortcutKeyManager" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="controlHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::controlHost" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::controlHost" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls" Name="controls">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls@ns:vl.presentation.controls" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="windowComposition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::windowComposition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::windowComposition" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiWindowComposition" Name="GuiWindowComposition">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions::GuiWindowComposition@s:vl.presentation.compositions.GuiWindowComposition" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="focusedComposition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::focusedComposition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::focusedComposition" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="previousClientSize" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::previousClientSize" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::previousClientSize" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::Size" Name="Size">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::Size@s:vl.presentation.Size" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="minSize" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::minSize" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::minSize" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::Size" Name="Size">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::Size@s:vl.presentation.Size" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="caretPoint" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::caretPoint" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::caretPoint" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="lastCaretTime" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::lastCaretTime" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::lastCaretTime" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vuint64_t" Name="vuint64_t">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vuint64_t@s:vl.vuint64_t" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="timerManager" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::timerManager" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::timerManager" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsTimerManager" Name="GuiGraphicsTimerManager">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::compositions::GuiGraphicsTimerManager@s:vl.presentation.compositions.GuiGraphicsTimerManager" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="mouseCaptureComposition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::mouseCaptureComposition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::mouseCaptureComposition" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="mouseEnterCompositions" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::mouseEnterCompositions" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::mouseEnterCompositions" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsHost::CompositionList" Name="CompositionList">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::compositions::GuiGraphicsHost::CompositionList@s:vl.presentation.compositions.GuiGraphicsHost" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="currentAltHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::currentAltHost" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::currentAltHost" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiAltActionHost" Name="IGuiAltActionHost">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions::IGuiAltActionHost@s:vl.presentation.compositions.IGuiAltActionHost" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="currentActiveAltActions" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::currentActiveAltActions" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::currentActiveAltActions" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsHost::AltActionMap" Name="AltActionMap">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::compositions::GuiGraphicsHost::AltActionMap@s:vl.presentation.compositions.GuiGraphicsHost" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="currentActiveAltTitles" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::currentActiveAltTitles" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::currentActiveAltTitles" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsHost::AltControlMap" Name="AltControlMap">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::compositions::GuiGraphicsHost::AltControlMap@s:vl.presentation.compositions.GuiGraphicsHost" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="currentAltPrefix" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::currentAltPrefix" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::currentAltPrefix" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
              <ReferencingOverloadKeys>
                <Key Value="::vl::WString@s:vl.WString" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="supressAltKey" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::supressAltKey" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::supressAltKey" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="EnterAltHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::EnterAltHost" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::EnterAltHost(* IGuiAltActionHost)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="host" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::EnterAltHost::host" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::EnterAltHost(* IGuiAltActionHost)::host" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiAltActionHost" Name="IGuiAltActionHost">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::IGuiAltActionHost@s:vl.presentation.compositions.IGuiAltActionHost" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="LeaveAltHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::LeaveAltHost" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::LeaveAltHost()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="EnterAltKey" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::EnterAltKey" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::EnterAltKey(wchar_t)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="key" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::EnterAltKey::key" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::EnterAltKey(wchar_t)::key" Static="False">
                  <Type>
                    <RefTypeDecl Name="wchar_t" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="LeaveAltKey" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::LeaveAltKey" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::LeaveAltKey()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="CreateAltTitles" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::CreateAltTitles" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::CreateAltTitles(&amp; const collections::Group&lt;WString, * IGuiAltAction&gt;)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="actions" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::CreateAltTitles::actions" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::CreateAltTitles(&amp; const collections::Group&lt;WString, * IGuiAltAction&gt;)::actions" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <SubTypeDecl ReferencingNameKey="::vl::collections::Group" Name="Group">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::Group`4@s:vl.collections.Group`4" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections@ns:vl.collections" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::WString@s:vl.WString" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                                <DecorateTypeDecl Decoration="Pointer">
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiAltAction" Name="IGuiAltAction">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::presentation::compositions::IGuiAltAction@s:vl.presentation.compositions.IGuiAltAction" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="FilterTitles" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::FilterTitles" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::FilterTitles()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="ClearAltHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::ClearAltHost" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::ClearAltHost()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="CloseAltHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::CloseAltHost" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::CloseAltHost()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="RefreshRelatedHostRecord" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RefreshRelatedHostRecord" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RefreshRelatedHostRecord(* INativeWindow)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="nativeWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RefreshRelatedHostRecord::nativeWindow" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RefreshRelatedHostRecord(* INativeWindow)::nativeWindow" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="DisconnectCompositionInternal" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::DisconnectCompositionInternal" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::DisconnectCompositionInternal(* GuiGraphicsComposition)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="composition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::DisconnectCompositionInternal::composition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::DisconnectCompositionInternal(* GuiGraphicsComposition)::composition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="MouseCapture" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MouseCapture" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MouseCapture(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MouseCapture::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MouseCapture(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="MouseUncapture" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MouseUncapture" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MouseUncapture(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MouseUncapture::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MouseUncapture(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnCharInput" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnCharInput" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnCharInput(&amp; const NativeWindowCharInfo,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiCharEvent))" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnCharInput::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnCharInput(&amp; const NativeWindowCharInfo,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiCharEvent))::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowCharInfo" Name="NativeWindowCharInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowCharInfo@s:vl.presentation.NativeWindowCharInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="composition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnCharInput::composition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnCharInput(&amp; const NativeWindowCharInfo,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiCharEvent))::composition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="eventReceiverEvent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnCharInput::eventReceiverEvent" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnCharInput(&amp; const NativeWindowCharInfo,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiCharEvent))::eventReceiverEvent" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <ClassMemberTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiCharEvent" Name="GuiCharEvent">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions::GuiCharEvent@s:vl.presentation.compositions.GuiCharEvent" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <ClassType>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsEventReceiver" Name="GuiGraphicsEventReceiver">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions::GuiGraphicsEventReceiver@s:vl.presentation.compositions.GuiGraphicsEventReceiver" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </ClassType>
                        </ClassMemberTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnKeyInput" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnKeyInput" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnKeyInput(&amp; const NativeWindowKeyInfo,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiKeyEvent))" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnKeyInput::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnKeyInput(&amp; const NativeWindowKeyInfo,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiKeyEvent))::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowKeyInfo" Name="NativeWindowKeyInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowKeyInfo@s:vl.presentation.NativeWindowKeyInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="composition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnKeyInput::composition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnKeyInput(&amp; const NativeWindowKeyInfo,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiKeyEvent))::composition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="eventReceiverEvent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnKeyInput::eventReceiverEvent" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnKeyInput(&amp; const NativeWindowKeyInfo,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiKeyEvent))::eventReceiverEvent" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <ClassMemberTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiKeyEvent" Name="GuiKeyEvent">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions::GuiKeyEvent@s:vl.presentation.compositions.GuiKeyEvent" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <ClassType>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsEventReceiver" Name="GuiGraphicsEventReceiver">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions::GuiGraphicsEventReceiver@s:vl.presentation.compositions.GuiGraphicsEventReceiver" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </ClassType>
                        </ClassMemberTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="RaiseMouseEvent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RaiseMouseEvent" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RaiseMouseEvent(&amp; GuiMouseEventArgs,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiMouseEvent))" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="arguments" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RaiseMouseEvent::arguments" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RaiseMouseEvent(&amp; GuiMouseEventArgs,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiMouseEvent))::arguments" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiMouseEventArgs" Name="GuiMouseEventArgs">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiMouseEventArgs@s:vl.presentation.compositions.GuiMouseEventArgs" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="composition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RaiseMouseEvent::composition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RaiseMouseEvent(&amp; GuiMouseEventArgs,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiMouseEvent))::composition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="eventReceiverEvent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RaiseMouseEvent::eventReceiverEvent" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RaiseMouseEvent(&amp; GuiMouseEventArgs,* GuiGraphicsComposition,* GuiGraphicsEventReceiver::(GuiMouseEvent))::eventReceiverEvent" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <ClassMemberTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiMouseEvent" Name="GuiMouseEvent">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions::GuiMouseEvent@s:vl.presentation.compositions.GuiMouseEvent" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <ClassType>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsEventReceiver" Name="GuiGraphicsEventReceiver">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions::GuiGraphicsEventReceiver@s:vl.presentation.compositions.GuiGraphicsEventReceiver" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </ClassType>
                        </ClassMemberTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnMouseInput" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnMouseInput" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnMouseInput(&amp; const NativeWindowMouseInfo,* GuiGraphicsEventReceiver::(GuiMouseEvent))" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnMouseInput::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnMouseInput(&amp; const NativeWindowMouseInfo,* GuiGraphicsEventReceiver::(GuiMouseEvent))::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="eventReceiverEvent" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::OnMouseInput::eventReceiverEvent" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::OnMouseInput(&amp; const NativeWindowMouseInfo,* GuiGraphicsEventReceiver::(GuiMouseEvent))::eventReceiverEvent" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <ClassMemberTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiMouseEvent" Name="GuiMouseEvent">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions::GuiMouseEvent@s:vl.presentation.compositions.GuiMouseEvent" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                          <ClassType>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsEventReceiver" Name="GuiGraphicsEventReceiver">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions::GuiGraphicsEventReceiver@s:vl.presentation.compositions.GuiGraphicsEventReceiver" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </ClassType>
                        </ClassMemberTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="HitTest" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::HitTest" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::HitTest(Point)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <SubTypeDecl ReferencingNameKey="::vl::presentation::INativeWindowListener::HitTestResult" Name="HitTestResult">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeWindowListener::HitTestResult@s:vl.presentation.INativeWindowListener" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindowListener" Name="INativeWindowListener">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeWindowListener@s:vl.presentation.INativeWindowListener" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="location" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::HitTest::location" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::HitTest(Point)::location" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="Moving" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::Moving" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::Moving(&amp; Rect,bool)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="bounds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::Moving::bounds" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::Moving(&amp; Rect,bool)::bounds" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::Rect" Name="Rect">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::Rect@s:vl.presentation.Rect" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="fixSizeOnly" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::Moving::fixSizeOnly" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::Moving(&amp; Rect,bool)::fixSizeOnly" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="Moved" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::Moved" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::Moved()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="Paint" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::Paint" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::Paint()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="LeftButtonDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonDown" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonDown(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonDown::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonDown(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="LeftButtonUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonUp" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonUp(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonUp::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonUp(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="LeftButtonDoubleClick" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonDoubleClick" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonDoubleClick(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonDoubleClick::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::LeftButtonDoubleClick(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="RightButtonDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonDown" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonDown(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonDown::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonDown(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="RightButtonUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonUp" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonUp(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonUp::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonUp(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="RightButtonDoubleClick" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonDoubleClick" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonDoubleClick(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonDoubleClick::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RightButtonDoubleClick(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="MiddleButtonDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonDown" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonDown(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonDown::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonDown(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="MiddleButtonUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonUp" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonUp(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonUp::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonUp(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="MiddleButtonDoubleClick" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonDoubleClick" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonDoubleClick(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonDoubleClick::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MiddleButtonDoubleClick(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="HorizontalWheel" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::HorizontalWheel" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::HorizontalWheel(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::HorizontalWheel::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::HorizontalWheel(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="VerticalWheel" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::VerticalWheel" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::VerticalWheel(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::VerticalWheel::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::VerticalWheel(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="MouseMoving" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MouseMoving" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MouseMoving(&amp; const NativeWindowMouseInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MouseMoving::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MouseMoving(&amp; const NativeWindowMouseInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowMouseInfo" Name="NativeWindowMouseInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowMouseInfo@s:vl.presentation.NativeWindowMouseInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="MouseEntered" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MouseEntered" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MouseEntered()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="MouseLeaved" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::MouseLeaved" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::MouseLeaved()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="KeyDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::KeyDown" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::KeyDown(&amp; const NativeWindowKeyInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::KeyDown::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::KeyDown(&amp; const NativeWindowKeyInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowKeyInfo" Name="NativeWindowKeyInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowKeyInfo@s:vl.presentation.NativeWindowKeyInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="KeyUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::KeyUp" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::KeyUp(&amp; const NativeWindowKeyInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::KeyUp::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::KeyUp(&amp; const NativeWindowKeyInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowKeyInfo" Name="NativeWindowKeyInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowKeyInfo@s:vl.presentation.NativeWindowKeyInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="SysKeyDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SysKeyDown" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SysKeyDown(&amp; const NativeWindowKeyInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SysKeyDown::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SysKeyDown(&amp; const NativeWindowKeyInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowKeyInfo" Name="NativeWindowKeyInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowKeyInfo@s:vl.presentation.NativeWindowKeyInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="SysKeyUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SysKeyUp" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SysKeyUp(&amp; const NativeWindowKeyInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SysKeyUp::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SysKeyUp(&amp; const NativeWindowKeyInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowKeyInfo" Name="NativeWindowKeyInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowKeyInfo@s:vl.presentation.NativeWindowKeyInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="Char" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::Char" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::Char(&amp; const NativeWindowCharInfo)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="info" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::Char::info" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::Char(&amp; const NativeWindowCharInfo)::info" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::NativeWindowCharInfo" Name="NativeWindowCharInfo">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::NativeWindowCharInfo@s:vl.presentation.NativeWindowCharInfo" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="GlobalTimer" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::GlobalTimer" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::GlobalTimer()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GuiGraphicsHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::GuiGraphicsHost" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::GuiGraphicsHost(* controls::GuiControlHost,* GuiGraphicsComposition)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_controlHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::GuiGraphicsHost::_controlHost" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::GuiGraphicsHost(* controls::GuiControlHost,* GuiGraphicsComposition)::_controlHost" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::controls" Name="controls">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::controls@ns:vl.presentation.controls" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="boundsComposition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::GuiGraphicsHost::boundsComposition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::GuiGraphicsHost(* controls::GuiControlHost,* GuiGraphicsComposition)::boundsComposition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~GuiGraphicsHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::~GuiGraphicsHost" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::~GuiGraphicsHost()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetNativeWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::GetNativeWindow" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::GetNativeWindow()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the associated window.&lt;/summary&gt;
  &lt;returns&gt;The associated window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetNativeWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SetNativeWindow" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SetNativeWindow(* INativeWindow)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Associate a window. A &lt;links&gt;&lt;link cref="::vl::presentation::compositions::GuiWindowComposition@s:vl.presentation.compositions.GuiWindowComposition" /&gt;&lt;/links&gt; will fill and appear in the window.&lt;/summary&gt;
  &lt;param name="_nativeWindow"&gt;The window to associated.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_nativeWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SetNativeWindow::_nativeWindow" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SetNativeWindow(* INativeWindow)::_nativeWindow" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMainComposition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::GetMainComposition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::GetMainComposition()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the main &lt;links&gt;&lt;link cref="::vl::presentation::compositions::GuiWindowComposition@s:vl.presentation.compositions.GuiWindowComposition" /&gt;&lt;/links&gt;. If a window is associated, everything that put into the main composition will be shown in the window.&lt;/summary&gt;
  &lt;returns&gt;The main compositoin.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Render" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::Render" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::Render(bool)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Render the main composition and all content to the associated window.&lt;/summary&gt;
  &lt;param name="forceUpdate"&gt;Set to true to force updating layout and then render.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="forceUpdate" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::Render::forceUpdate" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::Render(bool)::forceUpdate" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RequestRender" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::RequestRender" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::RequestRender()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Request a rendering&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetShortcutKeyManager" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::GetShortcutKeyManager" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::GetShortcutKeyManager()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the &lt;links&gt;&lt;link cref="::vl::presentation::compositions::IGuiShortcutKeyManager@s:vl.presentation.compositions.IGuiShortcutKeyManager" /&gt;&lt;/links&gt; attached with this graphics host.&lt;/summary&gt;
  &lt;returns&gt;The shortcut key manager.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiShortcutKeyManager" Name="IGuiShortcutKeyManager">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::compositions::IGuiShortcutKeyManager@s:vl.presentation.compositions.IGuiShortcutKeyManager" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetShortcutKeyManager" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SetShortcutKeyManager" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SetShortcutKeyManager(* IGuiShortcutKeyManager)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Attach or detach the &lt;links&gt;&lt;link cref="::vl::presentation::compositions::IGuiShortcutKeyManager@s:vl.presentation.compositions.IGuiShortcutKeyManager" /&gt;&lt;/links&gt; associated with this graphics host. When this graphics host is disposing, the associated shortcut key manager will be deleted if exists.&lt;/summary&gt;
  &lt;param name="value"&gt;The shortcut key manager. Set to null to detach the previous shortcut key manager from this graphics host.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SetShortcutKeyManager::value" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SetShortcutKeyManager(* IGuiShortcutKeyManager)::value" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::IGuiShortcutKeyManager" Name="IGuiShortcutKeyManager">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::IGuiShortcutKeyManager@s:vl.presentation.compositions.IGuiShortcutKeyManager" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetFocus" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SetFocus" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SetFocus(* GuiGraphicsComposition)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Set the focus composition. A focused composition will receive keyboard messages.&lt;/summary&gt;
  &lt;returns&gt;Returns true if this operation succeeded.&lt;/returns&gt;
  &lt;param name="composition"&gt;The composition to set focus. This composition should be or in the main composition.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="composition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SetFocus::composition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SetFocus(* GuiGraphicsComposition)::composition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetFocusedComposition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::GetFocusedComposition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::GetFocusedComposition()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the focus composition. A focused composition will receive keyboard messages.&lt;/summary&gt;
  &lt;returns&gt;The focus composition.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetCaretPoint" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::GetCaretPoint" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::GetCaretPoint()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the caret point. A caret point is the position to place the edit box of the activated input method editor.&lt;/summary&gt;
  &lt;returns&gt;The caret point.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetCaretPoint" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SetCaretPoint" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SetCaretPoint(Point,* GuiGraphicsComposition)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Set the caret point. A caret point is the position to place the edit box of the activated input method editor.&lt;/summary&gt;
  &lt;param name="value"&gt;The caret point.&lt;/param&gt;
  &lt;param name="referenceComposition"&gt;The point space. If this argument is null, the "value" argument will use the point space of the client area in the main composition.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SetCaretPoint::value" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SetCaretPoint(Point,* GuiGraphicsComposition)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="referenceComposition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::SetCaretPoint::referenceComposition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::SetCaretPoint(Point,* GuiGraphicsComposition)::referenceComposition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTimerManager" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::GetTimerManager" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::GetTimerManager()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the timer manager.&lt;/summary&gt;
  &lt;returns&gt;The timer manager.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsTimerManager" Name="GuiGraphicsTimerManager">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::compositions::GuiGraphicsTimerManager@s:vl.presentation.compositions.GuiGraphicsTimerManager" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DisconnectComposition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::DisconnectComposition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::DisconnectComposition(* GuiGraphicsComposition)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Notify that a composition is going to disconnect from this graphics host. Generally this happens when a composition's parent line changes.&lt;/summary&gt;
  &lt;param name="composition"&gt;The composition to disconnect&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="composition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::compositions::GuiGraphicsHost::DisconnectComposition::composition" OverloadKey="::vl::presentation::compositions::GuiGraphicsHost::DisconnectComposition(* GuiGraphicsComposition)::composition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Private" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindowListener" Name="INativeWindowListener">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::INativeWindowListener@s:vl.presentation.INativeWindowListener" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Private" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeControllerListener" Name="INativeControllerListener">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::INativeControllerListener@s:vl.presentation.INativeControllerListener" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsHost" Name="GuiGraphicsHost">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::compositions::GuiGraphicsHost@s:vl.presentation.compositions.GuiGraphicsHost" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>