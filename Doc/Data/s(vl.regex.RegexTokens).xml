<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex.RegexTokens">
    <ClassDecl Access="Public" Name="RegexTokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens" OverloadKey="::vl::regex::RegexTokens" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Token collection representing the result from the lexical analyzer.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Protected" Name="pure" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::pure" OverloadKey="::vl::regex::RegexTokens::pure" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::regex_internal::PureInterpretor" Name="PureInterpretor">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex_internal::PureInterpretor@s:vl.regex_internal.PureInterpretor" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::regex_internal" Name="regex_internal">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex_internal@ns:vl.regex_internal" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="stateTokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::stateTokens" OverloadKey="::vl::regex::RegexTokens::stateTokens" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="LeftRef">
              <Element>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections@ns:vl.collections" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="code" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::code" OverloadKey="::vl::regex::RegexTokens::code" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
              <ReferencingOverloadKeys>
                <Key Value="::vl::WString@s:vl.WString" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="codeIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::codeIndex" OverloadKey="::vl::regex::RegexTokens::codeIndex" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vint@s:vl.vint" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::proc" OverloadKey="::vl::regex::RegexTokens::proc" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexProc" Name="RegexProc">
              <ReferencingOverloadKeys>
                <Key Value="::vl::regex::RegexProc@s:vl.regex.RegexProc" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="RegexTokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::RegexTokens" OverloadKey="::vl::regex::RegexTokens::RegexTokens(* regex_internal::PureInterpretor,&amp; const collections::Array&lt;vint&gt;,&amp; const WString,vint,RegexProc)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_pure" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::RegexTokens::_pure" OverloadKey="::vl::regex::RegexTokens::RegexTokens(* regex_internal::PureInterpretor,&amp; const collections::Array&lt;vint&gt;,&amp; const WString,vint,RegexProc)::_pure" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::regex_internal::PureInterpretor" Name="PureInterpretor">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex_internal::PureInterpretor@s:vl.regex_internal.PureInterpretor" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::regex_internal" Name="regex_internal">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex_internal@ns:vl.regex_internal" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_stateTokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::RegexTokens::_stateTokens" OverloadKey="::vl::regex::RegexTokens::RegexTokens(* regex_internal::PureInterpretor,&amp; const collections::Array&lt;vint&gt;,&amp; const WString,vint,RegexProc)::_stateTokens" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections@ns:vl.collections" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::vint@s:vl.vint" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_code" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::RegexTokens::_code" OverloadKey="::vl::regex::RegexTokens::RegexTokens(* regex_internal::PureInterpretor,&amp; const collections::Array&lt;vint&gt;,&amp; const WString,vint,RegexProc)::_code" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_codeIndex" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::RegexTokens::_codeIndex" OverloadKey="::vl::regex::RegexTokens::RegexTokens(* regex_internal::PureInterpretor,&amp; const collections::Array&lt;vint&gt;,&amp; const WString,vint,RegexProc)::_codeIndex" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::RegexTokens::_proc" OverloadKey="::vl::regex::RegexTokens::RegexTokens(* regex_internal::PureInterpretor,&amp; const collections::Array&lt;vint&gt;,&amp; const WString,vint,RegexProc)::_proc" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::regex::RegexProc" Name="RegexProc">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::regex::RegexProc@s:vl.regex.RegexProc" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RegexTokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::RegexTokens" OverloadKey="::vl::regex::RegexTokens::RegexTokens(&amp; const RegexTokens)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="tokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::RegexTokens::tokens" OverloadKey="::vl::regex::RegexTokens::RegexTokens(&amp; const RegexTokens)::tokens" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexTokens" Name="RegexTokens">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexTokens@s:vl.regex.RegexTokens" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="~RegexTokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::~RegexTokens" OverloadKey="::vl::regex::RegexTokens::~RegexTokens()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CreateEnumerator" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::CreateEnumerator" OverloadKey="::vl::regex::RegexTokens::CreateEnumerator()const" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::collections::IEnumerator" Name="IEnumerator">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections::IEnumerator`1@s:vl.collections.IEnumerator`1" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections@ns:vl.collections" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::regex::RegexToken" Name="RegexToken">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::regex::RegexToken@s:vl.regex.RegexToken" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ReadToEnd" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::ReadToEnd" OverloadKey="::vl::regex::RegexTokens::ReadToEnd(&amp; collections::List&lt;RegexToken&gt;,* function (vint) : bool)const" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Copy all tokens.&lt;/summary&gt;
  &lt;param name="tokens"&gt;Returns all tokens.&lt;/param&gt;
  &lt;param name="discard"&gt;A callback to decide which kind of tokens to discard. The input is &lt;links&gt;&lt;link cref="::vl::regex::RegexToken::token@s:vl.regex.RegexToken" /&gt;&lt;/links&gt;. Returns true to discard this kind of tokens.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="True">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="tokens" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::ReadToEnd::tokens" OverloadKey="::vl::regex::RegexTokens::ReadToEnd(&amp; collections::List&lt;RegexToken&gt;,* function (vint) : bool)const::tokens" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections@ns:vl.collections" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::regex::RegexToken" Name="RegexToken">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::regex::RegexToken@s:vl.regex.RegexToken" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="discard" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexTokens::ReadToEnd::discard" OverloadKey="::vl::regex::RegexTokens::ReadToEnd(&amp; collections::List&lt;RegexToken&gt;,* function (vint) : bool)const::discard" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <FunctionTypeDecl CallingConvention="Default" Const="False">
                          <ReturnType>
                            <RefTypeDecl Name="bool" />
                          </ReturnType>
                          <Parameters>
                            <VarDecl Access="Public" Static="False">
                              <Type>
                                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::vint@s:vl.vint" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Type>
                            </VarDecl>
                          </Parameters>
                        </FunctionTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::IEnumerable" Name="IEnumerable">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::IEnumerable`1@s:vl.collections.IEnumerable`1" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::regex::RegexToken" Name="RegexToken">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::regex::RegexToken@s:vl.regex.RegexToken" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>