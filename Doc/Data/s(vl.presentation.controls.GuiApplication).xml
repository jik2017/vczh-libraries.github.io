<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.controls.GuiApplication">
    <ClassDecl Access="Public" Name="GuiApplication" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication" OverloadKey="::vl::presentation::controls::GuiApplication" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Represents an GacUI application, for window management and asynchronized operation supporting. Use &lt;links&gt;&lt;link cref="::vl::presentation::controls::GetApplication()@s:vl.presentation.controls.GetApplication()" /&gt;&lt;/links&gt; to access the instance of this class.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Private" Name="InvokeClipboardNotify" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeClipboardNotify" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeClipboardNotify(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="composition" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeClipboardNotify::composition" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeClipboardNotify(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)::composition" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="arguments" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeClipboardNotify::arguments" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeClipboardNotify(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)::arguments" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiEventArgs" Name="GuiEventArgs">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiEventArgs@s:vl.presentation.compositions.GuiEventArgs" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="LeftButtonDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::LeftButtonDown" OverloadKey="::vl::presentation::controls::GuiApplication::LeftButtonDown(Point)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::LeftButtonDown::position" OverloadKey="::vl::presentation::controls::GuiApplication::LeftButtonDown(Point)::position" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="LeftButtonUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::LeftButtonUp" OverloadKey="::vl::presentation::controls::GuiApplication::LeftButtonUp(Point)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::LeftButtonUp::position" OverloadKey="::vl::presentation::controls::GuiApplication::LeftButtonUp(Point)::position" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="RightButtonDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RightButtonDown" OverloadKey="::vl::presentation::controls::GuiApplication::RightButtonDown(Point)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RightButtonDown::position" OverloadKey="::vl::presentation::controls::GuiApplication::RightButtonDown(Point)::position" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="RightButtonUp" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RightButtonUp" OverloadKey="::vl::presentation::controls::GuiApplication::RightButtonUp(Point)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="position" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RightButtonUp::position" OverloadKey="::vl::presentation::controls::GuiApplication::RightButtonUp(Point)::position" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Private" Name="ClipboardUpdated" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::ClipboardUpdated" OverloadKey="::vl::presentation::controls::GuiApplication::ClipboardUpdated()" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <VarDecl Access="Protected" Name="locale" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::locale" OverloadKey="::vl::presentation::controls::GuiApplication::locale" Static="False">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Locale" Name="Locale">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Locale@s:vl.Locale" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="mainWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::mainWindow" OverloadKey="::vl::presentation::controls::GuiApplication::mainWindow" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="sharedTooltipOwnerWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::sharedTooltipOwnerWindow" OverloadKey="::vl::presentation::controls::GuiApplication::sharedTooltipOwnerWindow" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="sharedTooltipOwner" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::sharedTooltipOwner" OverloadKey="::vl::presentation::controls::GuiApplication::sharedTooltipOwner" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControl" Name="GuiControl">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiControl@s:vl.presentation.controls.GuiControl" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="sharedTooltipControl" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::sharedTooltipControl" OverloadKey="::vl::presentation::controls::GuiApplication::sharedTooltipControl" Static="False">
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiTooltip" Name="GuiTooltip">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiTooltip@s:vl.presentation.controls.GuiTooltip" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="sharedTooltipHovering" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::sharedTooltipHovering" OverloadKey="::vl::presentation::controls::GuiApplication::sharedTooltipHovering" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="sharedTooltipClosing" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::sharedTooltipClosing" OverloadKey="::vl::presentation::controls::GuiApplication::sharedTooltipClosing" Static="False">
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="windows" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::windows" OverloadKey="::vl::presentation::controls::GuiApplication::windows" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Protected" Name="openingPopups" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::openingPopups" OverloadKey="::vl::presentation::controls::GuiApplication::openingPopups" Static="False">
          <Type>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::SortedList" Name="SortedList">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::SortedList`2@s:vl.collections.SortedList`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiPopup" Name="GuiPopup">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::GuiPopup@s:vl.presentation.controls.GuiPopup" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Protected" Name="GuiApplication" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GuiApplication" OverloadKey="::vl::presentation::controls::GuiApplication::GuiApplication()" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="~GuiApplication" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::~GuiApplication" OverloadKey="::vl::presentation::controls::GuiApplication::~GuiApplication()" Virtual="Normal" Function="Destructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="GetThreadContextNativeWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GetThreadContextNativeWindow" OverloadKey="::vl::presentation::controls::GuiApplication::GetThreadContextNativeWindow(* GuiControlHost)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="controlHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GetThreadContextNativeWindow::controlHost" OverloadKey="::vl::presentation::controls::GuiApplication::GetThreadContextNativeWindow(* GuiControlHost)::controlHost" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="RegisterWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RegisterWindow" OverloadKey="::vl::presentation::controls::GuiApplication::RegisterWindow(* GuiWindow)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RegisterWindow::window" OverloadKey="::vl::presentation::controls::GuiApplication::RegisterWindow(* GuiWindow)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="UnregisterWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::UnregisterWindow" OverloadKey="::vl::presentation::controls::GuiApplication::UnregisterWindow(* GuiWindow)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::UnregisterWindow::window" OverloadKey="::vl::presentation::controls::GuiApplication::UnregisterWindow(* GuiWindow)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="RegisterPopupOpened" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RegisterPopupOpened" OverloadKey="::vl::presentation::controls::GuiApplication::RegisterPopupOpened(* GuiPopup)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="popup" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RegisterPopupOpened::popup" OverloadKey="::vl::presentation::controls::GuiApplication::RegisterPopupOpened(* GuiPopup)::popup" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiPopup" Name="GuiPopup">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiPopup@s:vl.presentation.controls.GuiPopup" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="RegisterPopupClosed" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RegisterPopupClosed" OverloadKey="::vl::presentation::controls::GuiApplication::RegisterPopupClosed(* GuiPopup)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="popup" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RegisterPopupClosed::popup" OverloadKey="::vl::presentation::controls::GuiApplication::RegisterPopupClosed(* GuiPopup)::popup" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiPopup" Name="GuiPopup">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiPopup@s:vl.presentation.controls.GuiPopup" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="OnMouseDown" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::OnMouseDown" OverloadKey="::vl::presentation::controls::GuiApplication::OnMouseDown(Point)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="location" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::OnMouseDown::location" OverloadKey="::vl::presentation::controls::GuiApplication::OnMouseDown(Point)::location" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="TooltipMouseEnter" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::TooltipMouseEnter" OverloadKey="::vl::presentation::controls::GuiApplication::TooltipMouseEnter(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="sender" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::TooltipMouseEnter::sender" OverloadKey="::vl::presentation::controls::GuiApplication::TooltipMouseEnter(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)::sender" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="arguments" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::TooltipMouseEnter::arguments" OverloadKey="::vl::presentation::controls::GuiApplication::TooltipMouseEnter(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)::arguments" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiEventArgs" Name="GuiEventArgs">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiEventArgs@s:vl.presentation.compositions.GuiEventArgs" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Protected" Name="TooltipMouseLeave" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::TooltipMouseLeave" OverloadKey="::vl::presentation::controls::GuiApplication::TooltipMouseLeave(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)" Virtual="Normal" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="sender" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::TooltipMouseLeave::sender" OverloadKey="::vl::presentation::controls::GuiApplication::TooltipMouseLeave(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)::sender" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiGraphicsComposition" Name="GuiGraphicsComposition">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiGraphicsComposition@s:vl.presentation.compositions.GuiGraphicsComposition" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="arguments" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::TooltipMouseLeave::arguments" OverloadKey="::vl::presentation::controls::GuiApplication::TooltipMouseLeave(* compositions::GuiGraphicsComposition,&amp; compositions::GuiEventArgs)::arguments" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::presentation::compositions::GuiEventArgs" Name="GuiEventArgs">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::compositions::GuiEventArgs@s:vl.presentation.compositions.GuiEventArgs" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::compositions" Name="compositions">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::compositions@ns:vl.presentation.compositions" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <VarDecl Access="Public" Name="LocaleChanged" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::LocaleChanged" OverloadKey="::vl::presentation::controls::GuiApplication::LocaleChanged" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Locale changed event.&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::Event" Name="Event">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Event`1@s:vl.Event`1" />
                    <Key Value="::vl::Event`1&lt;function (... TArgs) : void&gt;@s:vl.Event`1{function (... TArgs) # void}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="GetLocale" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GetLocale" OverloadKey="::vl::presentation::controls::GuiApplication::GetLocale()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Returns the selected locale for all windows.&lt;/summary&gt;
  &lt;returns&gt;The selected locale.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::Locale" Name="Locale">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Locale@s:vl.Locale" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="SetLocale" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::SetLocale" OverloadKey="::vl::presentation::controls::GuiApplication::SetLocale(Locale)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Set the locale for all windows.&lt;/summary&gt;
  &lt;param name="value"&gt;The selected locale.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::SetLocale::value" OverloadKey="::vl::presentation::controls::GuiApplication::SetLocale(Locale)::value" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::Locale" Name="Locale">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Locale@s:vl.Locale" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Run" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::Run" OverloadKey="::vl::presentation::controls::GuiApplication::Run(* GuiWindow)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Run a &lt;links&gt;&lt;link cref="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" /&gt;&lt;/links&gt; as the main window and show it. This function can only be called once in the entry point. When the main window is closed or hiden, the Run function will finished, and the application should prepare for finalization.&lt;/summary&gt;
  &lt;param name="_mainWindow"&gt;The main window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_mainWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::Run::_mainWindow" OverloadKey="::vl::presentation::controls::GuiApplication::Run(* GuiWindow)::_mainWindow" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMainWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GetMainWindow" OverloadKey="::vl::presentation::controls::GuiApplication::GetMainWindow()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the main window.&lt;/summary&gt;
  &lt;returns&gt;The main window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetWindows" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GetWindows" OverloadKey="::vl::presentation::controls::GuiApplication::GetWindows()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get all created &lt;links&gt;&lt;link cref="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" /&gt;&lt;/links&gt; instances. This contains normal windows, popup windows, menus, or other types of windows that inherits from &lt;links&gt;&lt;link cref="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" /&gt;&lt;/links&gt;.&lt;/summary&gt;
  &lt;returns&gt;All created &lt;links&gt;&lt;link cref="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" /&gt;&lt;/links&gt; instances.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="LeftRef">
                  <Element>
                    <DecorateTypeDecl Decoration="Const">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <SubTypeDecl ReferencingNameKey="::vl::collections::List" Name="List">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::List`2@s:vl.collections.List`2" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections@ns:vl.collections" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Element>
                          <TypeArguments>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GetWindow" OverloadKey="::vl::presentation::controls::GuiApplication::GetWindow(Point)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the &lt;links&gt;&lt;link cref="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" /&gt;&lt;/links&gt; instance that the mouse cursor are directly in.&lt;/summary&gt;
  &lt;returns&gt;The &lt;links&gt;&lt;link cref="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" /&gt;&lt;/links&gt; instance that the mouse cursor are directly in.&lt;/returns&gt;
  &lt;param name="location"&gt;The mouse cursor.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiWindow" Name="GuiWindow">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::GuiWindow@s:vl.presentation.controls.GuiWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="location" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GetWindow::location" OverloadKey="::vl::presentation::controls::GuiApplication::GetWindow(Point)::location" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="ShowTooltip" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::ShowTooltip" OverloadKey="::vl::presentation::controls::GuiApplication::ShowTooltip(* GuiControl,* GuiControl,vint,Point)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Show a tooltip.&lt;/summary&gt;
  &lt;param name="owner"&gt;The control that owns this tooltip temporary.&lt;/param&gt;
  &lt;param name="tooltip"&gt;The control as the tooltip content. This control is not owned by the tooltip. User should manually release this control if no longer needed (usually when the application exit).&lt;/param&gt;
  &lt;param name="preferredContentWidth"&gt;The preferred content width for this tooltip.&lt;/param&gt;
  &lt;param name="location"&gt;The relative location to specify the left-top position of the tooltip.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="owner" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::ShowTooltip::owner" OverloadKey="::vl::presentation::controls::GuiApplication::ShowTooltip(* GuiControl,* GuiControl,vint,Point)::owner" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControl" Name="GuiControl">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiControl@s:vl.presentation.controls.GuiControl" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="tooltip" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::ShowTooltip::tooltip" OverloadKey="::vl::presentation::controls::GuiApplication::ShowTooltip(* GuiControl,* GuiControl,vint,Point)::tooltip" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControl" Name="GuiControl">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiControl@s:vl.presentation.controls.GuiControl" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="preferredContentWidth" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::ShowTooltip::preferredContentWidth" OverloadKey="::vl::presentation::controls::GuiApplication::ShowTooltip(* GuiControl,* GuiControl,vint,Point)::preferredContentWidth" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="location" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::ShowTooltip::location" OverloadKey="::vl::presentation::controls::GuiApplication::ShowTooltip(* GuiControl,* GuiControl,vint,Point)::location" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::Point" Name="Point">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::Point@s:vl.presentation.Point" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="CloseTooltip" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::CloseTooltip" OverloadKey="::vl::presentation::controls::GuiApplication::CloseTooltip()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Close the tooltip&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetTooltipOwner" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GetTooltipOwner" OverloadKey="::vl::presentation::controls::GuiApplication::GetTooltipOwner()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the tooltip owner. When the tooltip closed, it returns null.&lt;/summary&gt;
  &lt;returns&gt;The tooltip owner.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControl" Name="GuiControl">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::GuiControl@s:vl.presentation.controls.GuiControl" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetExecutablePath" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GetExecutablePath" OverloadKey="::vl::presentation::controls::GuiApplication::GetExecutablePath()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the file path of the current executable.&lt;/summary&gt;
  &lt;returns&gt;The file path of the current executable.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetExecutableFolder" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::GetExecutableFolder" OverloadKey="::vl::presentation::controls::GuiApplication::GetExecutableFolder()" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Get the folder of the current executable.&lt;/summary&gt;
  &lt;returns&gt;The folder of the current executable.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsInMainThread" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::IsInMainThread" OverloadKey="::vl::presentation::controls::GuiApplication::IsInMainThread(* GuiControlHost)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Test is the current thread the main thread for GUI.&lt;/summary&gt;
  &lt;returns&gt;Returns true if the current thread is the main thread for GUI.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="controlHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::IsInMainThread::controlHost" OverloadKey="::vl::presentation::controls::GuiApplication::IsInMainThread(* GuiControlHost)::controlHost" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="InvokeAsync" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeAsync" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeAsync(&amp; const Func&lt;function () : void&gt;)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Invoke a specified function asynchronously.&lt;/summary&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeAsync::proc" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeAsync(&amp; const Func&lt;function () : void&gt;)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="InvokeInMainThread" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeInMainThread" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeInMainThread(* GuiControlHost,&amp; const Func&lt;function () : void&gt;)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Invoke a specified function in the main thread.&lt;/summary&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="controlHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeInMainThread::controlHost" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeInMainThread(* GuiControlHost,&amp; const Func&lt;function () : void&gt;)::controlHost" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeInMainThread::proc" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeInMainThread(* GuiControlHost,&amp; const Func&lt;function () : void&gt;)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="InvokeInMainThreadAndWait" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeInMainThreadAndWait" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeInMainThreadAndWait(* GuiControlHost,&amp; const Func&lt;function () : void&gt;,vint)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Invoke a specified function in the main thread and wait for the function to complete or timeout.&lt;/summary&gt;
  &lt;returns&gt;Return true if the function complete. Return false if the function has not completed during a specified period of time.&lt;/returns&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
  &lt;param name="milliseconds"&gt;The specified period of time to wait. Set to -1 (default value) to wait forever until the function completed.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="controlHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeInMainThreadAndWait::controlHost" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeInMainThreadAndWait(* GuiControlHost,&amp; const Func&lt;function () : void&gt;,vint)::controlHost" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeInMainThreadAndWait::proc" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeInMainThreadAndWait(* GuiControlHost,&amp; const Func&lt;function () : void&gt;,vint)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="milliseconds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeInMainThreadAndWait::milliseconds" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeInMainThreadAndWait(* GuiControlHost,&amp; const Func&lt;function () : void&gt;,vint)::milliseconds" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DelayExecute" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::DelayExecute" OverloadKey="::vl::presentation::controls::GuiApplication::DelayExecute(&amp; const Func&lt;function () : void&gt;,vint)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Delay execute a specified function with an specified argument asynchronisly.&lt;/summary&gt;
  &lt;returns&gt;The Delay execution controller for this task.&lt;/returns&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
  &lt;param name="milliseconds"&gt;Time to delay.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeDelay" Name="INativeDelay">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeDelay@s:vl.presentation.INativeDelay" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::DelayExecute::proc" OverloadKey="::vl::presentation::controls::GuiApplication::DelayExecute(&amp; const Func&lt;function () : void&gt;,vint)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="milliseconds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::DelayExecute::milliseconds" OverloadKey="::vl::presentation::controls::GuiApplication::DelayExecute(&amp; const Func&lt;function () : void&gt;,vint)::milliseconds" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DelayExecuteInMainThread" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::DelayExecuteInMainThread" OverloadKey="::vl::presentation::controls::GuiApplication::DelayExecuteInMainThread(&amp; const Func&lt;function () : void&gt;,vint)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Delay execute a specified function with an specified argument in the main thread.&lt;/summary&gt;
  &lt;returns&gt;The Delay execution controller for this task.&lt;/returns&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
  &lt;param name="milliseconds"&gt;Time to delay.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeDelay" Name="INativeDelay">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeDelay@s:vl.presentation.INativeDelay" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::DelayExecuteInMainThread::proc" OverloadKey="::vl::presentation::controls::GuiApplication::DelayExecuteInMainThread(&amp; const Func&lt;function () : void&gt;,vint)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="milliseconds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::DelayExecuteInMainThread::milliseconds" OverloadKey="::vl::presentation::controls::GuiApplication::DelayExecuteInMainThread(&amp; const Func&lt;function () : void&gt;,vint)::milliseconds" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="RunGuiTask" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RunGuiTask" OverloadKey="::vl::presentation::controls::GuiApplication::RunGuiTask(* GuiControlHost,&amp; const Func&lt;function () : void&gt;)" Virtual="Normal" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;Run the specified function in the main thread. If the caller is in the main thread, then run the specified function directly.&lt;/summary&gt;
  &lt;param name="proc"&gt;The specified function.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="controlHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RunGuiTask::controlHost" OverloadKey="::vl::presentation::controls::GuiApplication::RunGuiTask(* GuiControlHost,&amp; const Func&lt;function () : void&gt;)::controlHost" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RunGuiTask::proc" OverloadKey="::vl::presentation::controls::GuiApplication::RunGuiTask(* GuiControlHost,&amp; const Func&lt;function () : void&gt;)::proc" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters />
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <TemplateDecl Access="Public" Tags="x86, Windows">
          <TypeParameters>
            <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::T" OverloadKey="::vl::presentation::controls::GuiApplication::RunGuiValue`1(* GuiControlHost,&amp; const Func&lt;function () : T&gt;)::T" />
          </TypeParameters>
          <Specialization />
          <Element>
            <FuncDecl Access="Public" Name="RunGuiValue" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RunGuiValue" OverloadKey="::vl::presentation::controls::GuiApplication::RunGuiValue`1(* GuiControlHost,&amp; const Func&lt;function () : T&gt;)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiApplication::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::controls::GuiApplication::RunGuiValue`1(* GuiControlHost,&amp; const Func&lt;function () : T&gt;)::T@s:vl.presentation.controls.GuiApplication" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="controlHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RunGuiValue::controlHost" OverloadKey="::vl::presentation::controls::GuiApplication::RunGuiValue`1(* GuiControlHost,&amp; const Func&lt;function () : T&gt;)::controlHost" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::RunGuiValue::proc" OverloadKey="::vl::presentation::controls::GuiApplication::RunGuiValue`1(* GuiControlHost,&amp; const Func&lt;function () : T&gt;)::proc" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                                      <ReturnType>
                                        <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiApplication::T" Name="T">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::presentation::controls::GuiApplication::RunGuiValue`1(* GuiControlHost,&amp; const Func&lt;function () : T&gt;)::T@s:vl.presentation.controls.GuiApplication" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </ReturnType>
                                      <Parameters />
                                    </FunctionTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Element>
        </TemplateDecl>
        <TemplateDecl Access="Public" Tags="x86, Windows">
          <TypeParameters>
            <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::T" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThread`1(* GuiControlHost,&amp; const T)::T" />
          </TypeParameters>
          <Specialization />
          <Element>
            <FuncDecl Access="Public" Name="InvokeLambdaInMainThread" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThread" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThread`1(* GuiControlHost,&amp; const T)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="controlHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThread::controlHost" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThread`1(* GuiControlHost,&amp; const T)::controlHost" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThread::proc" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThread`1(* GuiControlHost,&amp; const T)::proc" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiApplication::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThread`1(* GuiControlHost,&amp; const T)::T@s:vl.presentation.controls.GuiApplication" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Element>
        </TemplateDecl>
        <TemplateDecl Access="Public" Tags="x86, Windows">
          <TypeParameters>
            <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::T" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThreadAndWait`1(* GuiControlHost,&amp; const T,vint)::T" />
          </TypeParameters>
          <Specialization />
          <Element>
            <FuncDecl Access="Public" Name="InvokeLambdaInMainThreadAndWait" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThreadAndWait" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThreadAndWait`1(* GuiControlHost,&amp; const T,vint)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="controlHost" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThreadAndWait::controlHost" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThreadAndWait`1(* GuiControlHost,&amp; const T,vint)::controlHost" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiControlHost" Name="GuiControlHost">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::presentation::controls::GuiControlHost@s:vl.presentation.controls.GuiControlHost" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="proc" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThreadAndWait::proc" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThreadAndWait`1(* GuiControlHost,&amp; const T,vint)::proc" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiApplication::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThreadAndWait`1(* GuiControlHost,&amp; const T,vint)::T@s:vl.presentation.controls.GuiApplication" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="milliseconds" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThreadAndWait::milliseconds" OverloadKey="::vl::presentation::controls::GuiApplication::InvokeLambdaInMainThreadAndWait`1(* GuiControlHost,&amp; const T,vint)::milliseconds" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Element>
        </TemplateDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Object@s:vl.Object" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Private" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeControllerListener" Name="INativeControllerListener">
              <ReferencingOverloadKeys>
                <Key Value="::vl::presentation::INativeControllerListener@s:vl.presentation.INativeControllerListener" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::controls::GuiApplication" Name="GuiApplication">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::controls::GuiApplication@s:vl.presentation.controls.GuiApplication" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>