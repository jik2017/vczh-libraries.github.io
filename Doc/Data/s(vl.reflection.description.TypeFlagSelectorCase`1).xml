<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # FunctionType )}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : FunctionType )&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : FunctionType )&gt;&gt;::T@s:vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # FunctionType )}}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <ConstantTypeDecl Value="( TypeFlags ) ( ( vint ) TypeFlags : : FunctionType )" />
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagSelectorCase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : FunctionType )&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase::Result" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : FunctionType )&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # EnumerableType $ ( vint ) TypeFlags # # ReadonlyListType )}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T@s:vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # EnumerableType $ ( vint ) TypeFlags # # ReadonlyListType )}}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <ConstantTypeDecl Value="( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ReadonlyListType )" />
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagSelectorCase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase::Result" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # EnumerableType $ ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType )}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T@s:vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # EnumerableType $ ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType )}}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <ConstantTypeDecl Value="( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )" />
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagSelectorCase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase::Result" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : EnumerableType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType )}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T@s:vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType )}}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <ConstantTypeDecl Value="( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )" />
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagSelectorCase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase::Result" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ObservableListType $ ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType )}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ObservableListType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ObservableListType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T@s:vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ObservableListType $ ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType )}}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <ConstantTypeDecl Value="( TypeFlags ) ( ( vint ) TypeFlags : : ObservableListType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )" />
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagSelectorCase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ObservableListType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase::Result" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ObservableListType | ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ReadonlyListType )}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::T@s:vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ReadonlyListType )}}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <ConstantTypeDecl Value="( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType )" />
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagSelectorCase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase::Result" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType )&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType $ ( vint ) TypeFlags # # DictionaryType $ ( vint ) TypeFlags # # ReadonlyDictionaryType )}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : DictionaryType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : DictionaryType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;::T@s:vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ListType $ ( vint ) TypeFlags # # ReadonlyListType $ ( vint ) TypeFlags # # DictionaryType $ ( vint ) TypeFlags # # ReadonlyDictionaryType )}}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <ConstantTypeDecl Value="( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : DictionaryType | ( vint ) TypeFlags : : ReadonlyDictionaryType )" />
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagSelectorCase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : DictionaryType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase::Result" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ListType | ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : DictionaryType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ReadonlyListType $ ( vint ) TypeFlags # # ReadonlyDictionaryType )}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;::T" />
      </TypeParameters>
      <Specialization>
        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
          <ReferencingOverloadKeys>
            <Key Value="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;::T@s:vl.reflection.description.TypeFlagSelectorCase`1{T,{( TypeFlags ) ( ( vint ) TypeFlags # # ReadonlyListType $ ( vint ) TypeFlags # # ReadonlyDictionaryType )}}" />
          </ReferencingOverloadKeys>
        </RefTypeDecl>
        <ConstantTypeDecl Value="( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : ReadonlyDictionaryType )" />
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="TypeFlagSelectorCase" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;" ClassType="Struct">
          <Children>
            <VarDecl Access="Public" Name="Result" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::TypeFlagSelectorCase::Result" OverloadKey="::vl::reflection::description::TypeFlagSelectorCase`1&lt;T,&lt;( TypeFlags ) ( ( vint ) TypeFlags : : ReadonlyListType | ( vint ) TypeFlags : : ReadonlyDictionaryType )&gt;&gt;::Result" Static="True">
              <Type>
                <DecorateTypeDecl Decoration="Const">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::TypeFlags" Name="TypeFlags">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::TypeFlags@s:vl.reflection.description.TypeFlags" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </Type>
            </VarDecl>
          </Children>
          <BaseTypes />
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>