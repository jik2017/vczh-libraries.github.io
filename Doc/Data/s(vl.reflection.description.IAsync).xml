<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.IAsync">
    <ClassDecl Access="Public" Name="IAsync" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsync" OverloadKey="::vl::reflection::description::IAsync" ClassType="Class">
      <Children>
        <FuncDecl Access="Public" Name="GetStatus" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsync::GetStatus" OverloadKey="::vl::reflection::description::IAsync::GetStatus()" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::AsyncStatus" Name="AsyncStatus">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::AsyncStatus@s:vl.reflection.description.AsyncStatus" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Execute" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsync::Execute" OverloadKey="::vl::reflection::description::IAsync::Execute(&amp; const Func&lt;function (Ptr&lt;CoroutineResult&gt;) : void&gt;,Ptr&lt;AsyncContext&gt;)" Virtual="Abstract" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="callback" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsync::Execute::callback" OverloadKey="::vl::reflection::description::IAsync::Execute(&amp; const Func&lt;function (Ptr&lt;CoroutineResult&gt;) : void&gt;,Ptr&lt;AsyncContext&gt;)::callback" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`1@s:vl.Func`1" />
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                              <TypeArguments>
                                <FunctionTypeDecl CallingConvention="Default" Const="False">
                                  <ReturnType>
                                    <RefTypeDecl Name="void" />
                                  </ReturnType>
                                  <Parameters>
                                    <VarDecl Access="Public" Static="False">
                                      <Type>
                                        <GenericTypeDecl>
                                          <Element>
                                            <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </Element>
                                          <TypeArguments>
                                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::CoroutineResult" Name="CoroutineResult">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::reflection::description::CoroutineResult@s:vl.reflection.description.CoroutineResult" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </TypeArguments>
                                        </GenericTypeDecl>
                                      </Type>
                                    </VarDecl>
                                  </Parameters>
                                </FunctionTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="context" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsync::Execute::context" OverloadKey="::vl::reflection::description::IAsync::Execute(&amp; const Func&lt;function (Ptr&lt;CoroutineResult&gt;) : void&gt;,Ptr&lt;AsyncContext&gt;)::context" Static="False">
                  <Type>
                    <GenericTypeDecl>
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::reflection::description::AsyncContext" Name="AsyncContext">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::reflection::description::AsyncContext@s:vl.reflection.description.AsyncContext" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Delay" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsync::Delay" OverloadKey="::vl::reflection::description::IAsync::Delay(vint)" Virtual="Static" Function="Function">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IAsync" Name="IAsync">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::IAsync@s:vl.reflection.description.IAsync" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="milliseconds" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::IAsync::Delay::milliseconds" OverloadKey="::vl::reflection::description::IAsync::Delay(vint)::milliseconds" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IAsync" Name="IAsync">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::IAsync@s:vl.reflection.description.IAsync" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>