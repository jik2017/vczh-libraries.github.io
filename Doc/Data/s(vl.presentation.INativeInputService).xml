<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.INativeInputService">
    <ClassDecl Access="Public" Name="INativeInputService" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService" OverloadKey="::vl::presentation::INativeInputService" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
User input service. To access this service, use &lt;links&gt;&lt;link cref="::vl::presentation::INativeController::InputService()@s:vl.presentation.INativeController" /&gt;&lt;/links&gt;.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="StartHookMouse" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::StartHookMouse" OverloadKey="::vl::presentation::INativeInputService::StartHookMouse()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Start to reveive global mouse message.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="StopHookMouse" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::StopHookMouse" OverloadKey="::vl::presentation::INativeInputService::StopHookMouse()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Stop to receive global mouse message.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsHookingMouse" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::IsHookingMouse" OverloadKey="::vl::presentation::INativeInputService::IsHookingMouse()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the global mouse message receiving enabled.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the global mouse message receiving is enabled.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="StartTimer" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::StartTimer" OverloadKey="::vl::presentation::INativeInputService::StartTimer()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Start to reveive global timer message.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="StopTimer" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::StopTimer" OverloadKey="::vl::presentation::INativeInputService::StopTimer()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Stop to receive global timer message.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsTimerEnabled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::IsTimerEnabled" OverloadKey="::vl::presentation::INativeInputService::IsTimerEnabled()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the global timer message receiving enabled.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the global timer message receiving is enabled.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsKeyPressing" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::IsKeyPressing" OverloadKey="::vl::presentation::INativeInputService::IsKeyPressing(VKEY)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the specified key pressing.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the specified key is pressing.&lt;/returns&gt;
  &lt;param name="code"&gt;The key code to test.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="code" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::IsKeyPressing::code" OverloadKey="::vl::presentation::INativeInputService::IsKeyPressing(VKEY)::code" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="IsKeyToggled" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::IsKeyToggled" OverloadKey="::vl::presentation::INativeInputService::IsKeyToggled(VKEY)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Test is the specified key toggled.
&lt;/summary&gt;
  &lt;returns&gt;Returns true if the specified key is toggled.&lt;/returns&gt;
  &lt;param name="code"&gt;The key code to test.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="bool" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="code" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::IsKeyToggled::code" OverloadKey="::vl::presentation::INativeInputService::IsKeyToggled(VKEY)::code" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetKeyName" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::GetKeyName" OverloadKey="::vl::presentation::INativeInputService::GetKeyName(VKEY)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the name of a key.
&lt;/summary&gt;
  &lt;returns&gt;The name of a key.&lt;/returns&gt;
  &lt;param name="code"&gt;The key code.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::WString@s:vl.WString" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="code" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::GetKeyName::code" OverloadKey="::vl::presentation::INativeInputService::GetKeyName(VKEY)::code" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetKey" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::GetKey" OverloadKey="::vl::presentation::INativeInputService::GetKey(&amp; const WString)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the key from a name.
&lt;/summary&gt;
  &lt;returns&gt;The key, returns -1 if the key name doesn't exist.&lt;/returns&gt;
  &lt;param name="name"&gt;Key name&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::VKEY" Name="VKEY">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::VKEY@s:vl.presentation.VKEY" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="name" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeInputService::GetKey::name" OverloadKey="::vl::presentation::INativeInputService::GetKey(&amp; const WString)::name" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="LeftRef">
                      <Element>
                        <DecorateTypeDecl Decoration="Const">
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::WString" Name="WString">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::WString@s:vl.WString" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::reflection::IDescriptable" Name="IDescriptable">
              <ReferencingOverloadKeys>
                <Key Value="::vl::reflection::IDescriptable@s:vl.reflection.IDescriptable" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <GenericTypeDecl>
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::Description" Name="Description">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::Description`1@s:vl.reflection.Description`1" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfClassInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfClassInstance}" />
                    <Key Value="::vl::reflection::Description`0&lt;workflow::typeimpl::WfInterfaceInstance&gt;@s:vl.reflection.Description`0{workflow.typeimpl.WfInterfaceInstance}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeInputService" Name="INativeInputService">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::presentation::INativeInputService@s:vl.presentation.INativeInputService" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>