<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.regex.RegexProcessingToken">
    <ClassDecl Access="Public" Name="RegexProcessingToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken" OverloadKey="::vl::regex::RegexProcessingToken" ClassType="Struct">
      <Document>&lt;Document&gt;
  &lt;summary&gt;Token information for &lt;links&gt;&lt;link cref="::vl::regex::RegexProc::extendProc@s:vl.regex.RegexProc" /&gt;&lt;/links&gt;.&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <VarDecl Access="Public" Name="start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::start" OverloadKey="::vl::regex::RegexProcessingToken::start" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
The read only start position of the token.
This value will be -1 if &lt;links&gt;&lt;link cref="::vl::regex::RegexProcessingToken::interTokenState@s:vl.regex.RegexProcessingToken" /&gt;&lt;/links&gt; is not null.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <DecorateTypeDecl Decoration="Const">
              <Element>
                <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::vint@s:vl.vint" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="length" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::length" OverloadKey="::vl::regex::RegexProcessingToken::length" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
The length of the token, could be modified after the callback.
When the callback returns, the length is not allowed to be decreased.
This value will be -1 if &lt;links&gt;&lt;link cref="::vl::regex::RegexProcessingToken::interTokenState@s:vl.regex.RegexProcessingToken" /&gt;&lt;/links&gt; is not null.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vint@s:vl.vint" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="token" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::token" OverloadKey="::vl::regex::RegexProcessingToken::token" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
The id of the token, could be modified after the callback.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
              <ReferencingOverloadKeys>
                <Key Value="::vl::vint@s:vl.vint" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="completeToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::completeToken" OverloadKey="::vl::regex::RegexProcessingToken::completeToken" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
The flag indicating if this token is completed, could be modified after the callback.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <RefTypeDecl Name="bool" />
          </Type>
        </VarDecl>
        <VarDecl Access="Public" Name="interTokenState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::interTokenState" OverloadKey="::vl::regex::RegexProcessingToken::interTokenState" Static="False">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
The inter token state object, could be modified after the callback.
When the callback returns:
  if the completeText parameter is true in &lt;links&gt;&lt;link cref="::vl::regex::RegexProc::extendProc@s:vl.regex.RegexProc" /&gt;&lt;/links&gt;, it should be nullptr.
  if the token does not end at the end of the input, it should not be nullptr.
  if a token is completed, it should be nullptr.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
          <Type>
            <DecorateTypeDecl Decoration="Pointer">
              <Element>
                <RefTypeDecl Name="void" />
              </Element>
            </DecorateTypeDecl>
          </Type>
        </VarDecl>
        <FuncDecl Access="Public" Name="RegexProcessingToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::RegexProcessingToken" OverloadKey="::vl::regex::RegexProcessingToken::RegexProcessingToken(vint,vint,vint,bool,* void)" Virtual="Normal" Function="Constructor">
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="_start" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::RegexProcessingToken::_start" OverloadKey="::vl::regex::RegexProcessingToken::RegexProcessingToken(vint,vint,vint,bool,* void)::_start" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_length" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::RegexProcessingToken::_length" OverloadKey="::vl::regex::RegexProcessingToken::RegexProcessingToken(vint,vint,vint,bool,* void)::_length" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_token" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::RegexProcessingToken::_token" OverloadKey="::vl::regex::RegexProcessingToken::RegexProcessingToken(vint,vint,vint,bool,* void)::_token" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_completeToken" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::RegexProcessingToken::_completeToken" OverloadKey="::vl::regex::RegexProcessingToken::RegexProcessingToken(vint,vint,vint,bool,* void)::_completeToken" Static="False">
                  <Type>
                    <RefTypeDecl Name="bool" />
                  </Type>
                </VarDecl>
                <VarDecl Access="Public" Name="_interTokenState" Tags="x64, Windows;x86, Windows" NameKey="::vl::regex::RegexProcessingToken::RegexProcessingToken::_interTokenState" OverloadKey="::vl::regex::RegexProcessingToken::RegexProcessingToken(vint,vint,vint,bool,* void)::_interTokenState" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl Name="void" />
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes />
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>