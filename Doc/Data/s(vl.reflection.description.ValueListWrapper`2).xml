<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.reflection.description.ValueListWrapper`2{^ collections.Array{T, K}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::T" />
        <TypeParameterDecl Access="Public" Name="K" Tags="x86, Windows" NameKey="::vl::reflection::description::K" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::K" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="Pointer">
          <Element>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::T@s:vl.reflection.description.ValueListWrapper`2{^ collections.Array{T, K}}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::K@s:vl.reflection.description.ValueListWrapper`2{^ collections.Array{T, K}}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ValueListWrapper" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;" ClassType="Class">
          <Children>
            <TypedefDecl Access="Protected" Name="ContainerType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::ContainerType" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::ContainerType">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections@ns:vl.collections" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::DescriptableObject::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1(&amp; * T)::T@s:vl.reflection.DescriptableObject" />
                        <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1()::T@s:vl.reflection.DescriptableObject" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::K@s:vl.reflection.description.ValueListWrapper`2{^ collections.Array{T, K}}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </TypedefDecl>
            <TypedefDecl Access="Protected" Name="ElementType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::ElementType" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::ElementType">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::DescriptableObject::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1(&amp; * T)::T@s:vl.reflection.DescriptableObject" />
                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1()::T@s:vl.reflection.DescriptableObject" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </TypedefDecl>
            <TypedefDecl Access="Protected" Name="ElementKeyType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::ElementKeyType" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::ElementKeyType">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::K@s:vl.reflection.description.ValueListWrapper`2{^ collections.Array{T, K}}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </TypedefDecl>
            <FuncDecl Access="Public" Name="ValueListWrapper" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::ValueListWrapper" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::ValueListWrapper(* collections::Array&lt;T, K&gt;)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_wrapperPointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::ValueListWrapper::_wrapperPointer" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::ValueListWrapper(* collections::Array&lt;T, K&gt;)::_wrapperPointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections@ns:vl.collections" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::DescriptableObject::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1(&amp; * T)::T@s:vl.reflection.DescriptableObject" />
                                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1()::T@s:vl.reflection.DescriptableObject" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::K@s:vl.reflection.description.ValueListWrapper`2{^ collections.Array{T, K}}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Set" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Set" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Set(vint,&amp; const Value)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Set::index" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Set(vint,&amp; const Value)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Set::value" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Set(vint,&amp; const Value)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Add" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Add" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Add(&amp; const Value)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Add::value" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Add(&amp; const Value)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Insert" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Insert" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Insert(vint,&amp; const Value)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Insert::index" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Insert(vint,&amp; const Value)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Insert::value" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Insert(vint,&amp; const Value)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Remove" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Remove" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Remove(&amp; const Value)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Remove::value" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Remove(&amp; const Value)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="RemoveAt" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::RemoveAt" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::RemoveAt(vint)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::RemoveAt::index" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::RemoveAt(vint)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Clear" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Clear" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Clear()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ValueReadonlyListWrapper" Name="ValueReadonlyListWrapper">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ValueReadonlyListWrapper`1@s:vl.reflection.description.ValueReadonlyListWrapper`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <SubTypeDecl ReferencingNameKey="::vl::collections::Array" Name="Array">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::Array`2@s:vl.collections.Array`2" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections@ns:vl.collections" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::T@s:vl.reflection.description.ValueListWrapper`2{^ collections.Array{T, K}}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::K@s:vl.reflection.description.ValueListWrapper`2{^ collections.Array{T, K}}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueList" Name="IValueList">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::IValueList@s:vl.reflection.description.IValueList" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
  <Symbols Key="vl.reflection.description.ValueListWrapper`2{^ collections.SortedList{T, K}}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="T" Tags="x86, Windows" NameKey="::vl::reflection::description::T" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::T" />
        <TypeParameterDecl Access="Public" Name="K" Tags="x86, Windows" NameKey="::vl::reflection::description::K" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::K" />
      </TypeParameters>
      <Specialization>
        <DecorateTypeDecl Decoration="Pointer">
          <Element>
            <GenericTypeDecl>
              <Element>
                <SubTypeDecl ReferencingNameKey="::vl::collections::SortedList" Name="SortedList">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::collections::SortedList`2@s:vl.collections.SortedList`2" />
                  </ReferencingOverloadKeys>
                  <Parent>
                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections@ns:vl.collections" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Parent>
                </SubTypeDecl>
              </Element>
              <TypeArguments>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::T@s:vl.reflection.description.ValueListWrapper`2{^ collections.SortedList{T, K}}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::K@s:vl.reflection.description.ValueListWrapper`2{^ collections.SortedList{T, K}}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </TypeArguments>
            </GenericTypeDecl>
          </Element>
        </DecorateTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="ValueListWrapper" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;" ClassType="Class">
          <Children>
            <TypedefDecl Access="Protected" Name="ContainerType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::ContainerType" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::ContainerType">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <SubTypeDecl ReferencingNameKey="::vl::collections::SortedList" Name="SortedList">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::collections::SortedList`2@s:vl.collections.SortedList`2" />
                      </ReferencingOverloadKeys>
                      <Parent>
                        <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::collections@ns:vl.collections" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Parent>
                    </SubTypeDecl>
                  </Element>
                  <TypeArguments>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::DescriptableObject::T" Name="T">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1(&amp; * T)::T@s:vl.reflection.DescriptableObject" />
                        <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1()::T@s:vl.reflection.DescriptableObject" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::K@s:vl.reflection.description.ValueListWrapper`2{^ collections.SortedList{T, K}}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </TypedefDecl>
            <TypedefDecl Access="Protected" Name="ElementType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::ElementType" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::ElementType">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::DescriptableObject::T" Name="T">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1(&amp; * T)::T@s:vl.reflection.DescriptableObject" />
                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1()::T@s:vl.reflection.DescriptableObject" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </TypedefDecl>
            <TypedefDecl Access="Protected" Name="ElementKeyType" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::ElementKeyType" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::ElementKeyType">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::K@s:vl.reflection.description.ValueListWrapper`2{^ collections.SortedList{T, K}}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </TypedefDecl>
            <FuncDecl Access="Public" Name="ValueListWrapper" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::ValueListWrapper" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::ValueListWrapper(* collections::SortedList&lt;T, K&gt;)" Virtual="Normal" Function="Constructor">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="_wrapperPointer" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::ValueListWrapper::_wrapperPointer" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::ValueListWrapper(* collections::SortedList&lt;T, K&gt;)::_wrapperPointer" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <GenericTypeDecl>
                              <Element>
                                <SubTypeDecl ReferencingNameKey="::vl::collections::SortedList" Name="SortedList">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections::SortedList`2@s:vl.collections.SortedList`2" />
                                  </ReferencingOverloadKeys>
                                  <Parent>
                                    <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::collections@ns:vl.collections" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Parent>
                                </SubTypeDecl>
                              </Element>
                              <TypeArguments>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::DescriptableObject::T" Name="T">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1(&amp; * T)::T@s:vl.reflection.DescriptableObject" />
                                    <Key Value="::vl::reflection::DescriptableObject::SafeAggregationCast`1()::T@s:vl.reflection.DescriptableObject" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::K@s:vl.reflection.description.ValueListWrapper`2{^ collections.SortedList{T, K}}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </TypeArguments>
                            </GenericTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Set" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Set" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Set(vint,&amp; const Value)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Set::index" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Set(vint,&amp; const Value)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Set::value" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Set(vint,&amp; const Value)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Add" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Add" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Add(&amp; const Value)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Add::value" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Add(&amp; const Value)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Insert" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Insert" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Insert(vint,&amp; const Value)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::vint@s:vl.vint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Insert::index" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Insert(vint,&amp; const Value)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Insert::value" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Insert(vint,&amp; const Value)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Remove" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Remove" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Remove(&amp; const Value)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="value" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Remove::value" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Remove(&amp; const Value)::value" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::Value" Name="Value">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::reflection::description::Value@s:vl.reflection.description.Value" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="RemoveAt" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::RemoveAt" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::RemoveAt(vint)" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="index" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::RemoveAt::index" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::RemoveAt(vint)::index" Static="False">
                      <Type>
                        <RefTypeDecl ReferencingNameKey="::vl::vint" Name="vint">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::vint@s:vl.vint" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Clear" Tags="x64, Windows;x86, Windows" NameKey="::vl::reflection::description::ValueListWrapper::Clear" OverloadKey="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Clear()" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::reflection::description::ValueReadonlyListWrapper" Name="ValueReadonlyListWrapper">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::reflection::description::ValueReadonlyListWrapper`1@s:vl.reflection.description.ValueReadonlyListWrapper`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <GenericTypeDecl>
                          <Element>
                            <SubTypeDecl ReferencingNameKey="::vl::collections::SortedList" Name="SortedList">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::collections::SortedList`2@s:vl.collections.SortedList`2" />
                              </ReferencingOverloadKeys>
                              <Parent>
                                <RefTypeDecl ReferencingNameKey="::vl::collections" Name="collections">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::collections@ns:vl.collections" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Parent>
                            </SubTypeDecl>
                          </Element>
                          <TypeArguments>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::T" Name="T">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::T@s:vl.reflection.description.ValueListWrapper`2{^ collections.SortedList{T, K}}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                            <RefTypeDecl ReferencingNameKey="::vl::reflection::description::K" Name="K">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::K@s:vl.reflection.description.ValueListWrapper`2{^ collections.SortedList{T, K}}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </TypeArguments>
                        </GenericTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </BaseTypeDecl>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::reflection::description::IValueList" Name="IValueList">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::reflection::description::IValueList@s:vl.reflection.description.IValueList" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>