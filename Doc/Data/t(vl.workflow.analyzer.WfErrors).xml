<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.workflow.analyzer.WfErrors">
    <SymbolTree NamespaceUrlName="vl.workflow.analyzer">
      <SymbolParentMapping />
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors" DisplayName="WfErrors struct" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongFormatStringSyntax(* WfExpression)" DisplayName="WrongFormatStringSyntax method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongSimpleObserveExpression(* WfExpression)" DisplayName="WrongSimpleObserveExpression method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongSimpleObserveEvent(* WfExpression)" DisplayName="WrongSimpleObserveEvent method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::EmptyObserveEvent(* WfExpression)" DisplayName="EmptyObserveEvent method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ObserveNotInBind(* WfExpression)" DisplayName="ObserveNotInBind method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ObserveInObserveEvent(* WfExpression)" DisplayName="ObserveInObserveEvent method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::BindInBind(* WfExpression)" DisplayName="BindInBind method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::AttachInBind(* WfExpression)" DisplayName="AttachInBind method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DetachInBind(* WfExpression)" DisplayName="DetachInBind method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ConstructorMixMapAndList(* WfExpression)" DisplayName="ConstructorMixMapAndList method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ConstructorMixStructAndList(* WfExpression)" DisplayName="ConstructorMixStructAndList method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedConstructorField(* WfReferenceExpression)" DisplayName="DuplicatedConstructorField method" Doc="false" />
        <Overloads DisplayName="ConstructorMixClassAndInterface method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ConstructorMixClassAndInterface(* WfNewClassExpression)" DisplayName="ConstructorMixClassAndInterface method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ConstructorMixClassAndInterface(* WfNewInterfaceExpression)" DisplayName="ConstructorMixClassAndInterface method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ScopeNameIsNotExpression(* WfExpression,Ptr&lt;WfLexicalScopeName&gt;)" DisplayName="ScopeNameIsNotExpression method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::EventIsNotExpression(* WfExpression,* reflection::description::IEventInfo)" DisplayName="EventIsNotExpression method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ExpressionIsNotScopeName(* WfExpression)" DisplayName="ExpressionIsNotScopeName method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ExpressionIsNotEvent(* WfExpression)" DisplayName="ExpressionIsNotEvent method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ExpressionCannotResolveType(* WfExpression,Ptr&lt;WfLexicalSymbol&gt;)" DisplayName="ExpressionCannotResolveType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::NullCannotResolveType(* WfExpression)" DisplayName="NullCannotResolveType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ConstructorCannotResolveType(* WfExpression)" DisplayName="ConstructorCannotResolveType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::OrderedLambdaCannotResolveType(* WfExpression)" DisplayName="OrderedLambdaCannotResolveType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::NullCannotImplicitlyConvertToType(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="NullCannotImplicitlyConvertToType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ConstructorCannotImplicitlyConvertToType(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="ConstructorCannotImplicitlyConvertToType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::OrderedLambdaCannotImplicitlyConvertToType(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="OrderedLambdaCannotImplicitlyConvertToType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ExpressionCannotImplicitlyConvertToType(* WfExpression,* reflection::description::ITypeInfo,* reflection::description::ITypeInfo)" DisplayName="ExpressionCannotImplicitlyConvertToType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ExpressionCannotExplicitlyConvertToType(* WfExpression,* reflection::description::ITypeInfo,* reflection::description::ITypeInfo)" DisplayName="ExpressionCannotExplicitlyConvertToType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CannotWeakCastToType(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="CannotWeakCastToType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::IntegerLiteralOutOfRange(* WfIntegerExpression)" DisplayName="IntegerLiteralOutOfRange method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::FloatingLiteralOutOfRange(* WfFloatingExpression)" DisplayName="FloatingLiteralOutOfRange method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CannotMergeTwoType(* WfExpression,* reflection::description::ITypeInfo,* reflection::description::ITypeInfo)" DisplayName="CannotMergeTwoType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::RangeShouldBeInteger(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="RangeShouldBeInteger method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::UnaryOperatorOnWrongType(* WfUnaryExpression,* reflection::description::ITypeInfo)" DisplayName="UnaryOperatorOnWrongType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::BinaryOperatorOnWrongType(* WfBinaryExpression,* reflection::description::ITypeInfo)" DisplayName="BinaryOperatorOnWrongType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::IndexOperatorOnWrongType(* WfBinaryExpression,* reflection::description::ITypeInfo)" DisplayName="IndexOperatorOnWrongType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ExpressionIsNotCollection(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="ExpressionIsNotCollection method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ExpressionIsNotFunction(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="ExpressionIsNotFunction method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::FunctionArgumentCountMismatched(* parsing::ParsingTreeCustomBase,vint,&amp; const ResolveExpressionResult)" DisplayName="FunctionArgumentCountMismatched method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::FunctionArgumentTypeMismatched(* parsing::ParsingTreeCustomBase,&amp; const ResolveExpressionResult,vint,* reflection::description::ITypeInfo,* reflection::description::ITypeInfo)" DisplayName="FunctionArgumentTypeMismatched method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CannotPickOverloadedFunctions(* parsing::ParsingTreeCustomBase,&amp; collections::List&lt;ResolveExpressionResult&gt;)" DisplayName="CannotPickOverloadedFunctions method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ClassContainsNoConstructor(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="ClassContainsNoConstructor method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::InterfaceContainsNoConstructor(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="InterfaceContainsNoConstructor method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ConstructorReturnTypeMismatched(* WfExpression,&amp; const ResolveExpressionResult,* reflection::description::ITypeInfo,* reflection::description::ITypeInfo)" DisplayName="ConstructorReturnTypeMismatched method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ExpressionIsNotLeftValue(* WfExpression,&amp; const ResolveExpressionResult)" DisplayName="ExpressionIsNotLeftValue method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CannotCallMemberOutsideOfClass(* WfExpression,&amp; const ResolveExpressionResult)" DisplayName="CannotCallMemberOutsideOfClass method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CannotCallMemberInStaticFunction(* WfExpression,&amp; const ResolveExpressionResult)" DisplayName="CannotCallMemberInStaticFunction method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::FieldCannotInitializeUsingEachOther(* WfExpression,&amp; const ResolveExpressionResult)" DisplayName="FieldCannotInitializeUsingEachOther method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongThisExpression(* WfExpression)" DisplayName="WrongThisExpression method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::IncorrectTypeForUnion(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="IncorrectTypeForUnion method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::IncorrectTypeForIntersect(* WfExpression,* reflection::description::ITypeInfo)" DisplayName="IncorrectTypeForIntersect method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ExpressionIsNotConstant(* WfExpression)" DisplayName="ExpressionIsNotConstant method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongMixinTargetType(* WfExpression,* reflection::description::ITypeInfo,* reflection::description::ITypeInfo)" DisplayName="WrongMixinTargetType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ExpectedTypeCastCannotResolveType(* WfExpression)" DisplayName="ExpectedTypeCastCannotResolveType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongVoidType(* WfType)" DisplayName="WrongVoidType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongInterfaceType(* WfType)" DisplayName="WrongInterfaceType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::RawPointerToNonReferenceType(* WfType,* reflection::description::ITypeInfo)" DisplayName="RawPointerToNonReferenceType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::SharedPointerToNonReferenceType(* WfType,* reflection::description::ITypeInfo)" DisplayName="SharedPointerToNonReferenceType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::NullableToNonReferenceType(* WfType,* reflection::description::ITypeInfo)" DisplayName="NullableToNonReferenceType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ChildOfNonReferenceType(* WfType)" DisplayName="ChildOfNonReferenceType method" Doc="false" />
        <Overloads DisplayName="TypeNotExists method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TypeNotExists(* WfType,Ptr&lt;WfLexicalScopeName&gt;)" DisplayName="TypeNotExists method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TypeNotExists(* WfType,&amp; const ResolveExpressionResult)" DisplayName="TypeNotExists method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TypeNotForValue(* WfType,* reflection::description::ITypeInfo)" DisplayName="TypeNotForValue method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::BreakNotInLoop(* WfStatement)" DisplayName="BreakNotInLoop method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ContinueNotInLoop(* WfStatement)" DisplayName="ContinueNotInLoop method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::RethrowNotInCatch(* WfStatement)" DisplayName="RethrowNotInCatch method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TryMissCatchAndFinally(* WfStatement)" DisplayName="TryMissCatchAndFinally method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ReturnMissExpression(* WfStatement,* reflection::description::ITypeInfo)" DisplayName="ReturnMissExpression method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DeleteNonRawPointer(* WfStatement,* reflection::description::ITypeInfo)" DisplayName="DeleteNonRawPointer method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CannotReturnExpression(* WfStatement)" DisplayName="CannotReturnExpression method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongCoPause(* WfStatement)" DisplayName="WrongCoPause method" Doc="false" />
        <Overloads DisplayName="WrongCoOperator method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongCoOperator(* WfStatement)" DisplayName="WrongCoOperator method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongCoOperator(* WfExpression)" DisplayName="WrongCoOperator method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CoProviderNotExists(* WfCoProviderStatement,&amp; collections::List&lt;WString&gt;)" DisplayName="CoProviderNotExists method" Doc="false" />
        <Overloads DisplayName="CoOperatorNotExists method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CoOperatorNotExists(* WfReturnStatement,* reflection::description::ITypeInfo)" DisplayName="CoOperatorNotExists method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CoOperatorNotExists(* WfCoOperatorStatement,* reflection::description::ITypeInfo)" DisplayName="CoOperatorNotExists method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CoOperatorNotExists(* WfCoOperatorExpression,* reflection::description::ITypeInfo)" DisplayName="CoOperatorNotExists method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CoOperatorCannotResolveResultType(* WfCoOperatorStatement,&amp; collections::List&lt;* reflection::description::ITypeInfo&gt;)" DisplayName="CoOperatorCannotResolveResultType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CoProviderCreateNotExists(* WfCoProviderStatement,* reflection::description::ITypeInfo)" DisplayName="CoProviderCreateNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CoProviderCreateAndRunNotExists(* WfCoProviderStatement,* reflection::description::ITypeInfo)" DisplayName="CoProviderCreateAndRunNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::GotoLabelNotExists(* WfGotoStatement)" DisplayName="GotoLabelNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TooManyGotoLabel(* WfGotoStatement)" DisplayName="TooManyGotoLabel method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongStateSwitchStatement(* WfStateSwitchStatement)" DisplayName="WrongStateSwitchStatement method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongStateInvokeStatement(* WfStateInvokeStatement)" DisplayName="WrongStateInvokeStatement method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::StateInputNotExists(* WfStateSwitchCase)" DisplayName="StateInputNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::StateSwitchArgumentCountNotMatch(* WfStateSwitchCase)" DisplayName="StateSwitchArgumentCountNotMatch method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::StateNotExists(* WfStateInvokeStatement)" DisplayName="StateNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::StateArgumentCountNotMatch(* WfStateInvokeStatement)" DisplayName="StateArgumentCountNotMatch method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::FunctionShouldHaveName(* WfDeclaration)" DisplayName="FunctionShouldHaveName method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::FunctionShouldHaveImplementation(* WfDeclaration)" DisplayName="FunctionShouldHaveImplementation method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::InterfaceMethodShouldNotHaveImplementation(* WfDeclaration)" DisplayName="InterfaceMethodShouldNotHaveImplementation method" Doc="false" />
        <Overloads DisplayName="DuplicatedDeclaration method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedDeclaration(* WfDeclaration,&amp; const WString)" DisplayName="DuplicatedDeclaration method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedDeclaration(* WfStateMachineDeclaration)" DisplayName="DuplicatedDeclaration method" Doc="false" />
        </Overloads>
        <Overloads DisplayName="DuplicatedSymbol method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedSymbol(* WfDeclaration,Ptr&lt;WfLexicalSymbol&gt;)" DisplayName="DuplicatedSymbol method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedSymbol(* WfFunctionArgument,Ptr&lt;WfLexicalSymbol&gt;)" DisplayName="DuplicatedSymbol method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedSymbol(* WfStatement,Ptr&lt;WfLexicalSymbol&gt;)" DisplayName="DuplicatedSymbol method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedSymbol(* WfExpression,Ptr&lt;WfLexicalSymbol&gt;)" DisplayName="DuplicatedSymbol method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedSymbol(* WfStateInput,Ptr&lt;WfLexicalSymbol&gt;)" DisplayName="DuplicatedSymbol method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedSymbol(* WfStateDeclaration,Ptr&lt;WfLexicalSymbol&gt;)" DisplayName="DuplicatedSymbol method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedSymbol(* WfStateSwitchArgument,Ptr&lt;WfLexicalSymbol&gt;)" DisplayName="DuplicatedSymbol method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::InterfaceMethodNotImplemented(* WfNewInterfaceExpression,* reflection::description::IMethodInfo)" DisplayName="InterfaceMethodNotImplemented method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::InterfaceMethodNotFound(* WfFunctionDeclaration,* reflection::description::ITypeInfo,* reflection::description::ITypeInfo)" DisplayName="InterfaceMethodNotFound method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CannotPickOverloadedInterfaceMethods(* WfExpression,&amp; collections::List&lt;ResolveExpressionResult&gt;)" DisplayName="CannotPickOverloadedInterfaceMethods method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::CannotPickOverloadedImplementMethods(* WfFunctionDeclaration,* reflection::description::ITypeInfo)" DisplayName="CannotPickOverloadedImplementMethods method" Doc="false" />
        <Overloads DisplayName="WrongDeclaration method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongDeclaration(* WfEventDeclaration)" DisplayName="WrongDeclaration method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongDeclaration(* WfPropertyDeclaration)" DisplayName="WrongDeclaration method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongDeclaration(* WfConstructorDeclaration)" DisplayName="WrongDeclaration method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongDeclaration(* WfDestructorDeclaration)" DisplayName="WrongDeclaration method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongDeclaration(* WfAutoPropertyDeclaration)" DisplayName="WrongDeclaration method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongDeclaration(* WfStateMachineDeclaration)" DisplayName="WrongDeclaration method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongDeclarationInInterfaceConstructor(* WfDeclaration)" DisplayName="WrongDeclarationInInterfaceConstructor method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::EnumValuesNotConsecutiveFromZero(* WfEnumDeclaration)" DisplayName="EnumValuesNotConsecutiveFromZero method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::FlagValuesNotConsecutiveFromZero(* WfEnumDeclaration)" DisplayName="FlagValuesNotConsecutiveFromZero method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::FlagValueNotExists(* WfEnumItemIntersection,* WfEnumDeclaration)" DisplayName="FlagValueNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedEnumValue(* WfEnumItem,* WfEnumDeclaration)" DisplayName="DuplicatedEnumValue method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::StructContainsNonValueType(* WfStructMember,* WfStructDeclaration)" DisplayName="StructContainsNonValueType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::StructRecursivelyIncludeItself(* WfStructDeclaration,&amp; collections::List&lt;* reflection::description::ITypeDescriptor&gt;)" DisplayName="StructRecursivelyIncludeItself method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedStructMember(* WfStructMember,* WfStructDeclaration)" DisplayName="DuplicatedStructMember method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::AttributeNotExists(* WfAttribute)" DisplayName="AttributeNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::AttributeMissValue(* WfAttribute)" DisplayName="AttributeMissValue method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::StateMachineClassNotInheritFromStateMachine(* WfClassDeclaration)" DisplayName="StateMachineClassNotInheritFromStateMachine method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::MissingDefaultState(* WfStateMachineDeclaration)" DisplayName="MissingDefaultState method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongUsingPathWildCard(* WfModuleUsingPath)" DisplayName="WrongUsingPathWildCard method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TopQualifiedSymbolNotExists(* parsing::ParsingTreeCustomBase,&amp; const WString)" DisplayName="TopQualifiedSymbolNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ChildSymbolNotExists(* parsing::ParsingTreeCustomBase,Ptr&lt;WfLexicalScopeName&gt;,&amp; const WString)" DisplayName="ChildSymbolNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::MemberNotExists(* parsing::ParsingTreeCustomBase,* reflection::description::ITypeDescriptor,&amp; const WString)" DisplayName="MemberNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ReferenceNotExists(* parsing::ParsingTreeCustomBase,&amp; const WString)" DisplayName="ReferenceNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TooManyTargets(* parsing::ParsingTreeCustomBase,&amp; collections::List&lt;ResolveExpressionResult&gt;,&amp; const WString)" DisplayName="TooManyTargets method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::EnumItemNotExists(* parsing::ParsingTreeCustomBase,* reflection::description::ITypeDescriptor,&amp; const WString)" DisplayName="EnumItemNotExists method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongClassMemberConfig(* WfDeclaration)" DisplayName="WrongClassMemberConfig method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::FunctionInNewTypeExpressionCannotBeStatic(* WfDeclaration)" DisplayName="FunctionInNewTypeExpressionCannotBeStatic method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::AutoPropertyCannotBeNormalOutsideOfClass(* WfDeclaration)" DisplayName="AutoPropertyCannotBeNormalOutsideOfClass method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::AutoPropertyCannotBeStatic(* WfDeclaration)" DisplayName="AutoPropertyCannotBeStatic method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongClassMember(* WfNamespaceDeclaration)" DisplayName="WrongClassMember method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::PropertyGetterNotFound(* WfPropertyDeclaration,* WfClassDeclaration)" DisplayName="PropertyGetterNotFound method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::PropertySetterNotFound(* WfPropertyDeclaration,* WfClassDeclaration)" DisplayName="PropertySetterNotFound method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::PropertyEventNotFound(* WfPropertyDeclaration,* WfClassDeclaration)" DisplayName="PropertyEventNotFound method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TooManyPropertyGetter(* WfPropertyDeclaration,* WfClassDeclaration)" DisplayName="TooManyPropertyGetter method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TooManyPropertySetter(* WfPropertyDeclaration,* WfClassDeclaration)" DisplayName="TooManyPropertySetter method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TooManyPropertyEvent(* WfPropertyDeclaration,* WfClassDeclaration)" DisplayName="TooManyPropertyEvent method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::PropertyGetterTypeMismatched(* WfPropertyDeclaration,* WfClassDeclaration)" DisplayName="PropertyGetterTypeMismatched method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::PropertySetterTypeMismatched(* WfPropertyDeclaration,* WfClassDeclaration)" DisplayName="PropertySetterTypeMismatched method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongBaseType(* WfClassDeclaration,* WfType)" DisplayName="WrongBaseType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongBaseTypeOfClass(* WfClassDeclaration,* reflection::description::ITypeDescriptor)" DisplayName="WrongBaseTypeOfClass method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongBaseTypeOfInterface(* WfClassDeclaration,* reflection::description::ITypeDescriptor)" DisplayName="WrongBaseTypeOfInterface method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongInterfaceBaseType(* WfClassDeclaration,* reflection::description::ITypeDescriptor)" DisplayName="WrongInterfaceBaseType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ClassWithInterfaceConstructor(* WfClassDeclaration)" DisplayName="ClassWithInterfaceConstructor method" Doc="false" />
        <Overloads DisplayName="OverrideShouldImplementInterfaceMethod method">
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::OverrideShouldImplementInterfaceMethod(* WfFunctionDeclaration)" DisplayName="OverrideShouldImplementInterfaceMethod method" Doc="false" />
          <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::OverrideShouldImplementInterfaceMethod(* WfAutoPropertyDeclaration)" DisplayName="OverrideShouldImplementInterfaceMethod method" Doc="false" />
        </Overloads>
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::MissingFieldType(* WfVariableDeclaration)" DisplayName="MissingFieldType method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedBaseClass(* WfClassDeclaration,* reflection::description::ITypeDescriptor)" DisplayName="DuplicatedBaseClass method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::ClassRecursiveInheritance(* WfClassDeclaration,&amp; collections::List&lt;* reflection::description::ITypeDescriptor&gt;)" DisplayName="ClassRecursiveInheritance method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::InterfaceRecursiveInheritance(* WfClassDeclaration,&amp; collections::List&lt;* reflection::description::ITypeDescriptor&gt;)" DisplayName="InterfaceRecursiveInheritance method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::WrongBaseConstructorCall(* WfBaseConstructorCall,* reflection::description::ITypeDescriptor)" DisplayName="WrongBaseConstructorCall method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::DuplicatedBaseConstructorCall(* WfBaseConstructorCall,* reflection::description::ITypeDescriptor)" DisplayName="DuplicatedBaseConstructorCall method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::TooManyDestructor(* WfDestructorDeclaration,* WfClassDeclaration)" DisplayName="TooManyDestructor method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::AutoPropertyShouldBeInitialized(* WfAutoPropertyDeclaration)" DisplayName="AutoPropertyShouldBeInitialized method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::workflow::analyzer::WfErrors::AutoPropertyCannotBeInitializedInInterface(* WfAutoPropertyDeclaration,* WfClassDeclaration)" DisplayName="AutoPropertyCannotBeInitializedInInterface method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>