<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.Func`2{function (... TArgs) # R}">
    <TemplateDecl Access="Public" Tags="x86, Windows">
      <Document>&lt;Document&gt;
  &lt;summary&gt;A type representing a function reference.&lt;/summary&gt;
  &lt;typeparam name="R"&gt;The return type.&lt;/typeparam&gt;
  &lt;typeparam name="TArgs"&gt;Types of parameters.&lt;/typeparam&gt;
&lt;/Document&gt;</Document>
      <TypeParameters>
        <TypeParameterDecl Access="Public" Name="R" Tags="x86, Windows" NameKey="::vl::R" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::R" />
        <TypeParameterDecl Access="Public" Name="TArgs" Tags="x86, Windows" NameKey="::vl::TArgs" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs" />
      </TypeParameters>
      <Specialization>
        <FunctionTypeDecl CallingConvention="Default" Const="False">
          <ReturnType>
            <RefTypeDecl ReferencingNameKey="::vl::R" Name="R">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::R@s:vl.Func`2{function (... TArgs) # R}" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </ReturnType>
          <Parameters>
            <VarDecl Access="Public" Static="False">
              <Type>
                <VariadicArgumentTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.Func`2{function (... TArgs) # R}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </VariadicArgumentTypeDecl>
              </Type>
            </VarDecl>
          </Parameters>
        </FunctionTypeDecl>
      </Specialization>
      <Element>
        <ClassDecl Access="Public" Name="Func" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;" ClassType="Class">
          <Children>
            <VarDecl Access="Protected" Name="invoker" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::invoker" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::invoker" Static="False">
              <Type>
                <GenericTypeDecl>
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::Ptr" Name="Ptr">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Ptr`1@s:vl.Ptr`1" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                  <TypeArguments>
                    <GenericTypeDecl>
                      <Element>
                        <SubTypeDecl ReferencingNameKey="::vl::internal_invokers::Invoker" Name="Invoker">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::internal_invokers::Invoker`2@s:vl.internal_invokers.Invoker`2" />
                          </ReferencingOverloadKeys>
                          <Parent>
                            <RefTypeDecl ReferencingNameKey="::vl::internal_invokers" Name="internal_invokers">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::internal_invokers@ns:vl.internal_invokers" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Parent>
                        </SubTypeDecl>
                      </Element>
                      <TypeArguments>
                        <RefTypeDecl ReferencingNameKey="::vl::R" Name="R">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::R@s:vl.Func`2{function (... TArgs) # R}" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                        <VariadicArgumentTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.Func`2{function (... TArgs) # R}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </VariadicArgumentTypeDecl>
                      </TypeArguments>
                    </GenericTypeDecl>
                  </TypeArguments>
                </GenericTypeDecl>
              </Type>
            </VarDecl>
            <TypedefDecl Access="Public" Name="FunctionType" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::FunctionType" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::FunctionType">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::R" Name="R">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::R@s:vl.Func`2{function (... TArgs) # R}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Static="False">
                      <Type>
                        <VariadicArgumentTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.Func`2{function (... TArgs) # R}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </VariadicArgumentTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </TypedefDecl>
            <TypedefDecl Access="Public" Name="ResultType" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::ResultType" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::ResultType">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::R" Name="R">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::R@s:vl.Func`2{function (... TArgs) # R}" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </TypedefDecl>
            <FuncDecl Access="Public" Name="Func" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func()" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create a null function reference.&lt;/summary&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Func" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func(&amp; const Func&lt;function (... TArgs) : R&gt;)" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Copy a function reference.&lt;/summary&gt;
  &lt;param name="function"&gt;The function reference to copy.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func::function" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func(&amp; const Func&lt;function (... TArgs) : R&gt;)::function" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                                      <ReturnType>
                                        <RefTypeDecl ReferencingNameKey="::vl::R" Name="R">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::R@s:vl.Func`2{function (... TArgs) # R}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </ReturnType>
                                      <Parameters>
                                        <VarDecl Access="Public" Static="False">
                                          <Type>
                                            <VariadicArgumentTypeDecl>
                                              <Element>
                                                <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                                                  <ReferencingOverloadKeys>
                                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.Func`2{function (... TArgs) # R}" />
                                                  </ReferencingOverloadKeys>
                                                </RefTypeDecl>
                                              </Element>
                                            </VariadicArgumentTypeDecl>
                                          </Type>
                                        </VarDecl>
                                      </Parameters>
                                    </FunctionTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="Func" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func(* function (... TArgs) : R)" Virtual="Normal" Function="Constructor">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create a reference using a function pointer.&lt;/summary&gt;
  &lt;param name="function"&gt;The function pointer.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="False">
                  <ReturnType>
                    <RefTypeDecl Name="void" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func::function" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func(* function (... TArgs) : R)::function" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="Pointer">
                          <Element>
                            <FunctionTypeDecl CallingConvention="Default" Const="False">
                              <ReturnType>
                                <RefTypeDecl ReferencingNameKey="::vl::R" Name="R">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::R@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </ReturnType>
                              <Parameters>
                                <VarDecl Access="Public" Static="False">
                                  <Type>
                                    <VariadicArgumentTypeDecl>
                                      <Element>
                                        <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.Func`2{function (... TArgs) # R}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Element>
                                    </VariadicArgumentTypeDecl>
                                  </Type>
                                </VarDecl>
                              </Parameters>
                            </FunctionTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create a reference using a method.&lt;/summary&gt;
  &lt;typeparam name="C"&gt;Type of the class that has the method.&lt;/typeparam&gt;
  &lt;param name="sender"&gt;The object that has the method.&lt;/param&gt;
  &lt;param name="function"&gt;The function pointer.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="C" Tags="x86, Windows" NameKey="::vl::Func::C" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(* C,* C::(function (... TArgs) : R))::C" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Func" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(* C,* C::(function (... TArgs) : R))" Virtual="Normal" Function="Constructor">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="void" />
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="sender" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func::sender" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(* C,* C::(function (... TArgs) : R))::sender" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <RefTypeDecl ReferencingNameKey="::vl::Func::C" Name="C">
                                  <ReferencingOverloadKeys>
                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(* C,* C::(function (... TArgs) : R))::C@s:vl.Func`2{function (... TArgs) # R}" />
                                  </ReferencingOverloadKeys>
                                </RefTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                        <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func::function" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(* C,* C::(function (... TArgs) : R))::function" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="Pointer">
                              <Element>
                                <ClassMemberTypeDecl>
                                  <Element>
                                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                                      <ReturnType>
                                        <RefTypeDecl ReferencingNameKey="::vl::R" Name="R">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::R@s:vl.Func`2{function (... TArgs) # R}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </ReturnType>
                                      <Parameters>
                                        <VarDecl Access="Public" Static="False">
                                          <Type>
                                            <VariadicArgumentTypeDecl>
                                              <Element>
                                                <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                                                  <ReferencingOverloadKeys>
                                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.Func`2{function (... TArgs) # R}" />
                                                  </ReferencingOverloadKeys>
                                                </RefTypeDecl>
                                              </Element>
                                            </VariadicArgumentTypeDecl>
                                          </Type>
                                        </VarDecl>
                                      </Parameters>
                                    </FunctionTypeDecl>
                                  </Element>
                                  <ClassType>
                                    <RefTypeDecl ReferencingNameKey="::vl::Func::C" Name="C">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(* C,* C::(function (... TArgs) : R))::C@s:vl.Func`2{function (... TArgs) # R}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </ClassType>
                                </ClassMemberTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create a reference using a function object.&lt;/summary&gt;
  &lt;typeparam name="R2"&gt;Return type of the function object.&lt;/typeparam&gt;
  &lt;typeparam name="TArgs2"&gt;Argument types of the function object.&lt;/typeparam&gt;
  &lt;param name="function"&gt;The function object.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="R2" Tags="x86, Windows" NameKey="::vl::Func::R2" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)::R2" />
                <TypeParameterDecl Access="Public" Name="TArgs2" Tags="x86, Windows" NameKey="::vl::Func::TArgs2" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)::TArgs2" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Func" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)" Virtual="Normal" Function="Constructor">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="void" />
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func::function" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)::function" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="LeftRef">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <GenericTypeDecl>
                                      <Element>
                                        <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Func`1@s:vl.Func`1" />
                                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </Element>
                                      <TypeArguments>
                                        <FunctionTypeDecl CallingConvention="Default" Const="False">
                                          <ReturnType>
                                            <RefTypeDecl ReferencingNameKey="::vl::Func::R2" Name="R2">
                                              <ReferencingOverloadKeys>
                                                <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)::R2@s:vl.Func`2{function (... TArgs) # R}" />
                                              </ReferencingOverloadKeys>
                                            </RefTypeDecl>
                                          </ReturnType>
                                          <Parameters>
                                            <VarDecl Access="Public" Static="False">
                                              <Type>
                                                <VariadicArgumentTypeDecl>
                                                  <Element>
                                                    <RefTypeDecl ReferencingNameKey="::vl::Func::TArgs2" Name="TArgs2">
                                                      <ReferencingOverloadKeys>
                                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`2(&amp; const Func&lt;function (... TArgs2) : R2&gt;)::TArgs2@s:vl.Func`2{function (... TArgs) # R}" />
                                                      </ReferencingOverloadKeys>
                                                    </RefTypeDecl>
                                                  </Element>
                                                </VariadicArgumentTypeDecl>
                                              </Type>
                                            </VarDecl>
                                          </Parameters>
                                        </FunctionTypeDecl>
                                      </TypeArguments>
                                    </GenericTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <TemplateDecl Access="Public" Tags="x86, Windows">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Create a reference using a function object.&lt;/summary&gt;
  &lt;typeparam name="C"&gt;Type of the function object.&lt;/typeparam&gt;
  &lt;param name="function"&gt;The function object. It could be a lambda expression.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <TypeParameters>
                <TypeParameterDecl Access="Public" Name="C" Tags="x86, Windows" NameKey="::vl::Func::C" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(&amp; const C)::C" />
              </TypeParameters>
              <Specialization />
              <Element>
                <FuncDecl Access="Public" Name="Func" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(&amp; const C)" Virtual="Normal" Function="Constructor">
                  <Type>
                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                      <ReturnType>
                        <RefTypeDecl Name="void" />
                      </ReturnType>
                      <Parameters>
                        <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::Func::function" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(&amp; const C)::function" Static="False">
                          <Type>
                            <DecorateTypeDecl Decoration="LeftRef">
                              <Element>
                                <DecorateTypeDecl Decoration="Const">
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Func::C" Name="C">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::Func`1(&amp; const C)::C@s:vl.Func`2{function (... TArgs) # R}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                </DecorateTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Type>
                        </VarDecl>
                      </Parameters>
                    </FunctionTypeDecl>
                  </Type>
                </FuncDecl>
              </Element>
            </TemplateDecl>
            <FuncDecl Access="Public" Name="operator ()" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::operator ()" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator ()(... TArgs)const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Invoke the function.&lt;/summary&gt;
  &lt;returns&gt;Returns the function result.&lt;/returns&gt;
  &lt;param name="args"&gt;Arguments to invoke the function.&lt;/param&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl ReferencingNameKey="::vl::R" Name="R">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::R@s:vl.Func`2{function (... TArgs) # R}" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="args" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::operator ()::args" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator ()(... TArgs)const::args" Static="False">
                      <Type>
                        <VariadicArgumentTypeDecl>
                          <Element>
                            <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                              <ReferencingOverloadKeys>
                                <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.Func`2{function (... TArgs) # R}" />
                              </ReferencingOverloadKeys>
                            </RefTypeDecl>
                          </Element>
                        </VariadicArgumentTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator ==" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::operator ==" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator ==(&amp; const Func&lt;function (... TArgs) : R&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::operator ==::function" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator ==(&amp; const Func&lt;function (... TArgs) : R&gt;)const::function" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                                      <ReturnType>
                                        <RefTypeDecl ReferencingNameKey="::vl::R" Name="R">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::R@s:vl.Func`2{function (... TArgs) # R}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </ReturnType>
                                      <Parameters>
                                        <VarDecl Access="Public" Static="False">
                                          <Type>
                                            <VariadicArgumentTypeDecl>
                                              <Element>
                                                <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                                                  <ReferencingOverloadKeys>
                                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.Func`2{function (... TArgs) # R}" />
                                                  </ReferencingOverloadKeys>
                                                </RefTypeDecl>
                                              </Element>
                                            </VariadicArgumentTypeDecl>
                                          </Type>
                                        </VarDecl>
                                      </Parameters>
                                    </FunctionTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator !=" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::operator !=" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator !=(&amp; const Func&lt;function (... TArgs) : R&gt;)const" Virtual="Normal" Function="Function">
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters>
                    <VarDecl Access="Public" Name="function" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::operator !=::function" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator !=(&amp; const Func&lt;function (... TArgs) : R&gt;)const::function" Static="False">
                      <Type>
                        <DecorateTypeDecl Decoration="LeftRef">
                          <Element>
                            <DecorateTypeDecl Decoration="Const">
                              <Element>
                                <GenericTypeDecl>
                                  <Element>
                                    <RefTypeDecl ReferencingNameKey="::vl::Func" Name="Func">
                                      <ReferencingOverloadKeys>
                                        <Key Value="::vl::Func`1@s:vl.Func`1" />
                                        <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;@s:vl.Func`2{function (... TArgs) # R}" />
                                      </ReferencingOverloadKeys>
                                    </RefTypeDecl>
                                  </Element>
                                  <TypeArguments>
                                    <FunctionTypeDecl CallingConvention="Default" Const="False">
                                      <ReturnType>
                                        <RefTypeDecl ReferencingNameKey="::vl::R" Name="R">
                                          <ReferencingOverloadKeys>
                                            <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::R@s:vl.Func`2{function (... TArgs) # R}" />
                                          </ReferencingOverloadKeys>
                                        </RefTypeDecl>
                                      </ReturnType>
                                      <Parameters>
                                        <VarDecl Access="Public" Static="False">
                                          <Type>
                                            <VariadicArgumentTypeDecl>
                                              <Element>
                                                <RefTypeDecl ReferencingNameKey="::vl::TArgs" Name="TArgs">
                                                  <ReferencingOverloadKeys>
                                                    <Key Value="::vl::Func`2&lt;function (... TArgs) : R&gt;::TArgs@s:vl.Func`2{function (... TArgs) # R}" />
                                                  </ReferencingOverloadKeys>
                                                </RefTypeDecl>
                                              </Element>
                                            </VariadicArgumentTypeDecl>
                                          </Type>
                                        </VarDecl>
                                      </Parameters>
                                    </FunctionTypeDecl>
                                  </TypeArguments>
                                </GenericTypeDecl>
                              </Element>
                            </DecorateTypeDecl>
                          </Element>
                        </DecorateTypeDecl>
                      </Type>
                    </VarDecl>
                  </Parameters>
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
            <FuncDecl Access="Public" Name="operator" Tags="x64, Windows;x86, Windows" NameKey="::vl::Func::operator" OverloadKey="::vl::Func`2&lt;function (... TArgs) : R&gt;::operator()const" Virtual="Normal" Function="Function">
              <Document>&lt;Document&gt;
  &lt;summary&gt;Test is the reference a null reference.&lt;/summary&gt;
  &lt;returns&gt;Returns true if it is not a null reference.&lt;/returns&gt;
&lt;/Document&gt;</Document>
              <Type>
                <FunctionTypeDecl CallingConvention="Default" Const="True">
                  <ReturnType>
                    <RefTypeDecl Name="bool" />
                  </ReturnType>
                  <Parameters />
                </FunctionTypeDecl>
              </Type>
            </FuncDecl>
          </Children>
          <BaseTypes>
            <BaseTypeDecl Access="Public" Tags="x86, Windows">
              <Type>
                <RefTypeDecl ReferencingNameKey="::vl::Object" Name="Object">
                  <ReferencingOverloadKeys>
                    <Key Value="::vl::Object@s:vl.Object" />
                  </ReferencingOverloadKeys>
                </RefTypeDecl>
              </Type>
            </BaseTypeDecl>
          </BaseTypes>
        </ClassDecl>
      </Element>
    </TemplateDecl>
  </Symbols>
</OverloadingSymbols>