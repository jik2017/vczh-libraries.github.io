<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbolTrees>
  <OverloadingSymbolTree Key="vl.reflection.description.ValueListWrapper`2{^ collections.Array{T, K}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::T" To="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;" />
        <Map From="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::K" To="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;" DisplayName="ValueListWrapper class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::ContainerType" DisplayName="ContainerType typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::ElementType" DisplayName="ElementType typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::ElementKeyType" DisplayName="ElementKeyType typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::ValueListWrapper(* collections::Array&lt;T, K&gt;)" DisplayName="ValueListWrapper constructor" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Set(vint,&amp; const Value)" DisplayName="Set method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Add(&amp; const Value)" DisplayName="Add method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Insert(vint,&amp; const Value)" DisplayName="Insert method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Remove(&amp; const Value)" DisplayName="Remove method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::RemoveAt(vint)" DisplayName="RemoveAt method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::Array&lt;T, K&gt;&gt;::Clear()" DisplayName="Clear method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
  <OverloadingSymbolTree Key="vl.reflection.description.ValueListWrapper`2{^ collections.SortedList{T, K}}">
    <SymbolTree NamespaceUrlName="vl.reflection.description">
      <SymbolParentMapping>
        <Map From="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::T" To="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;" />
        <Map From="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::K" To="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;" />
      </SymbolParentMapping>
      <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;" DisplayName="ValueListWrapper class" Doc="false">
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::ContainerType" DisplayName="ContainerType typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::ElementType" DisplayName="ElementType typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::ElementKeyType" DisplayName="ElementKeyType typedecl" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::ValueListWrapper(* collections::SortedList&lt;T, K&gt;)" DisplayName="ValueListWrapper constructor" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Set(vint,&amp; const Value)" DisplayName="Set method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Add(&amp; const Value)" DisplayName="Add method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Insert(vint,&amp; const Value)" DisplayName="Insert method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Remove(&amp; const Value)" DisplayName="Remove method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::RemoveAt(vint)" DisplayName="RemoveAt method" Doc="false" />
        <Symbol Tags="x64, Windows;x86, Windows" Key="::vl::reflection::description::ValueListWrapper`2&lt;* collections::SortedList&lt;T, K&gt;&gt;::Clear()" DisplayName="Clear method" Doc="false" />
      </Symbol>
    </SymbolTree>
  </OverloadingSymbolTree>
</OverloadingSymbolTrees>