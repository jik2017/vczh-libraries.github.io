<?xml version="1.0" encoding="utf-8"?>
<OverloadingSymbols>
  <Symbols Key="vl.presentation.INativeWindowService">
    <ClassDecl Access="Public" Name="INativeWindowService" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowService" OverloadKey="::vl::presentation::INativeWindowService" ClassType="Class">
      <Document>&lt;Document&gt;
  &lt;summary&gt;
Window service. To access this service, use &lt;links&gt;&lt;link cref="::vl::presentation::INativeController::WindowService()@s:vl.presentation.INativeController" /&gt;&lt;/links&gt;.
&lt;/summary&gt;
&lt;/Document&gt;</Document>
      <Children>
        <FuncDecl Access="Public" Name="CreateNativeWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowService::CreateNativeWindow" OverloadKey="::vl::presentation::INativeWindowService::CreateNativeWindow()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Create a window.
&lt;/summary&gt;
  &lt;returns&gt;The created window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="DestroyNativeWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowService::DestroyNativeWindow" OverloadKey="::vl::presentation::INativeWindowService::DestroyNativeWindow(* INativeWindow)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Destroy a window.
&lt;/summary&gt;
  &lt;param name="window"&gt;The window to destroy.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowService::DestroyNativeWindow::window" OverloadKey="::vl::presentation::INativeWindowService::DestroyNativeWindow(* INativeWindow)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetMainWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowService::GetMainWindow" OverloadKey="::vl::presentation::INativeWindowService::GetMainWindow()" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the main window.
&lt;/summary&gt;
  &lt;returns&gt;The main window.&lt;/returns&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters />
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="GetWindow" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowService::GetWindow" OverloadKey="::vl::presentation::INativeWindowService::GetWindow(NativePoint)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Get the window that under a specified position in screen space.
&lt;/summary&gt;
  &lt;returns&gt;The window that under a specified position in screen space.&lt;/returns&gt;
  &lt;param name="location"&gt;The specified position in screen space.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <DecorateTypeDecl Decoration="Pointer">
                  <Element>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Element>
                </DecorateTypeDecl>
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="location" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowService::GetWindow::location" OverloadKey="::vl::presentation::INativeWindowService::GetWindow(NativePoint)::location" Static="False">
                  <Type>
                    <RefTypeDecl ReferencingNameKey="::vl::presentation::NativePoint" Name="NativePoint">
                      <ReferencingOverloadKeys>
                        <Key Value="::vl::presentation::NativePoint@s:vl.presentation.NativePoint" />
                      </ReferencingOverloadKeys>
                    </RefTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
        <FuncDecl Access="Public" Name="Run" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowService::Run" OverloadKey="::vl::presentation::INativeWindowService::Run(* INativeWindow)" Virtual="Abstract" Function="Function">
          <Document>&lt;Document&gt;
  &lt;summary&gt;
Make the specified window a main window, show that window, and wait until the windows is closed.
&lt;/summary&gt;
  &lt;param name="window"&gt;The specified window.&lt;/param&gt;
&lt;/Document&gt;</Document>
          <Type>
            <FunctionTypeDecl CallingConvention="Default" Const="False">
              <ReturnType>
                <RefTypeDecl Name="void" />
              </ReturnType>
              <Parameters>
                <VarDecl Access="Public" Name="window" Tags="x64, Windows;x86, Windows" NameKey="::vl::presentation::INativeWindowService::Run::window" OverloadKey="::vl::presentation::INativeWindowService::Run(* INativeWindow)::window" Static="False">
                  <Type>
                    <DecorateTypeDecl Decoration="Pointer">
                      <Element>
                        <RefTypeDecl ReferencingNameKey="::vl::presentation::INativeWindow" Name="INativeWindow">
                          <ReferencingOverloadKeys>
                            <Key Value="::vl::presentation::INativeWindow@s:vl.presentation.INativeWindow" />
                          </ReferencingOverloadKeys>
                        </RefTypeDecl>
                      </Element>
                    </DecorateTypeDecl>
                  </Type>
                </VarDecl>
              </Parameters>
            </FunctionTypeDecl>
          </Type>
        </FuncDecl>
      </Children>
      <BaseTypes>
        <BaseTypeDecl Access="Public" Tags="x86, Windows">
          <Type>
            <RefTypeDecl ReferencingNameKey="::vl::Interface" Name="Interface">
              <ReferencingOverloadKeys>
                <Key Value="::vl::Interface@s:vl.Interface" />
              </ReferencingOverloadKeys>
            </RefTypeDecl>
          </Type>
        </BaseTypeDecl>
      </BaseTypes>
    </ClassDecl>
  </Symbols>
</OverloadingSymbols>