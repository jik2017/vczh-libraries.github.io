<?xml version="1.0" encoding="utf-8"?>
<Namespace DisplayName="::vl::collections">
  <Overloads DisplayName="Array class">
    <Symbol Key="::vl::collections::Array`2" UrlName="vl.collections.Array`2" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ArrayBase class">
    <Symbol Key="::vl::collections::ArrayBase`1" UrlName="vl.collections.ArrayBase`1" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ByteObjectMap class">
    <Symbol Key="::vl::collections::ByteObjectMap`1" UrlName="vl.collections.ByteObjectMap`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="CompareEnumerable function">
    <Symbol Key="::vl::collections::CompareEnumerable`2(&amp; const IEnumerable&lt;T&gt;,&amp; const IEnumerable&lt;U&gt;)" UrlName="vl.collections.CompareEnumerable`2(&amp; const IEnumerable{T},&amp; const IEnumerable{U})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ConcatEnumerator class">
    <Symbol Key="::vl::collections::ConcatEnumerator`1" UrlName="vl.collections.ConcatEnumerator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ContainerEnumerator class">
    <Symbol Key="::vl::collections::ContainerEnumerator`2" UrlName="vl.collections.ContainerEnumerator`2" Doc="false" />
  </Overloads>
  <Overloads DisplayName="CopyFrom function">
    <Symbol Key="::vl::collections::CopyFrom`2(&amp; Ds,&amp; const Ss,bool)" UrlName="vl.collections.CopyFrom`2(&amp; Ds,&amp; const Ss,bool)" Doc="true" />
    <Symbol Key="::vl::collections::CopyFrom`2(&amp; Ds,* const S,vint,bool)" UrlName="vl.collections.CopyFrom`2(&amp; Ds,^ const S,vint,bool)" Doc="true" />
    <Symbol Key="::vl::collections::CopyFrom`2(&amp; Ds,* const S,* const S,bool)" UrlName="vl.collections.CopyFrom`2(&amp; Ds,^ const S,^ const S,bool)" Doc="true" />
    <Symbol Key="::vl::collections::CopyFrom`2(&amp; Ds,&amp; const ObjectString&lt;S&gt;,bool)" UrlName="vl.collections.CopyFrom`2(&amp; Ds,&amp; const ObjectString{S},bool)" Doc="false" />
    <Symbol Key="::vl::collections::CopyFrom`2(&amp; ObjectString&lt;D&gt;,&amp; const Ss,bool)" UrlName="vl.collections.CopyFrom`2(&amp; ObjectString{D},&amp; const Ss,bool)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="CreateForEachIterator function">
    <Symbol Key="::vl::collections::CreateForEachIterator`1(&amp; const IEnumerable&lt;T&gt;)" UrlName="vl.collections.CreateForEachIterator`1(&amp; const IEnumerable{T})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Dictionary class">
    <Symbol Key="::vl::collections::Dictionary`4" UrlName="vl.collections.Dictionary`4" Doc="true" />
  </Overloads>
  <Overloads DisplayName="DistinctEnumerator class">
    <Symbol Key="::vl::collections::DistinctEnumerator`1" UrlName="vl.collections.DistinctEnumerator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="EmptyEnumerable class">
    <Symbol Key="::vl::collections::EmptyEnumerable`1" UrlName="vl.collections.EmptyEnumerable`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="EnumerableForEachIterator class">
    <Symbol Key="::vl::collections::EnumerableForEachIterator`1" UrlName="vl.collections.EnumerableForEachIterator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ForEachIterator class">
    <Symbol Key="::vl::collections::ForEachIterator`1" UrlName="vl.collections.ForEachIterator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="From function">
    <Symbol Key="::vl::collections::From`1(&amp; const IEnumerable&lt;T&gt;)" UrlName="vl.collections.From`1(&amp; const IEnumerable{T})" Doc="false" />
    <Symbol Key="::vl::collections::From`1(&amp; const LazyList&lt;T&gt;)" UrlName="vl.collections.From`1(&amp; const LazyList{T})" Doc="false" />
    <Symbol Key="::vl::collections::From`1(* const T,* const T)" UrlName="vl.collections.From`1(^ const T,^ const T)" Doc="false" />
    <Symbol Key="::vl::collections::From`2(&amp; array[size] T)" UrlName="vl.collections.From`2(&amp; array[size] T)" Doc="false" />
    <Symbol Key="::vl::collections::From`2(&amp; array[size] const T)" UrlName="vl.collections.From`2(&amp; array[size] const T)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="FromArray function">
    <Symbol Key="::vl::collections::FromArray`2(&amp; array[size] T)" UrlName="vl.collections.FromArray`2(&amp; array[size] T)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="FromIterator class">
    <Symbol Key="::vl::collections::FromIterator`1" UrlName="vl.collections.FromIterator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="FromIteratorEnumerable class">
    <Symbol Key="::vl::collections::FromIteratorEnumerable`2" UrlName="vl.collections.FromIteratorEnumerable`2" Doc="false" />
  </Overloads>
  <Overloads DisplayName="FromPointer function">
    <Symbol Key="::vl::collections::FromPointer`1(* const T,* const T)" UrlName="vl.collections.FromPointer`1(^ const T,^ const T)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Group class">
    <Symbol Key="::vl::collections::Group`4" UrlName="vl.collections.Group`4" Doc="true" />
  </Overloads>
  <Overloads DisplayName="GroupInnerJoin function">
    <Symbol Key="::vl::collections::GroupInnerJoin`6(&amp; const Group&lt;TKey, TValueFirst&gt;,&amp; const Group&lt;TKey, TValueSecond&gt;,&amp; const TDiscardFirst,&amp; const TDiscardSecond,&amp; const TAccept)" UrlName="vl.collections.GroupInnerJoin`6(&amp; const Group{TKey, TValueFirst},&amp; const Group{TKey, TValueSecond},&amp; const TDiscardFirst,&amp; const TDiscardSecond,&amp; const TAccept)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="IEnumerable class">
    <Symbol Key="::vl::collections::IEnumerable`1" UrlName="vl.collections.IEnumerable`1" Doc="true" />
  </Overloads>
  <Overloads DisplayName="IEnumerator class">
    <Symbol Key="::vl::collections::IEnumerator`1" UrlName="vl.collections.IEnumerator`1" Doc="true" />
  </Overloads>
  <Overloads DisplayName="IntersectExceptEnumerator class">
    <Symbol Key="::vl::collections::IntersectExceptEnumerator`2" UrlName="vl.collections.IntersectExceptEnumerator`2" Doc="false" />
  </Overloads>
  <Overloads DisplayName="LazyList class">
    <Symbol Key="::vl::collections::LazyList`1" UrlName="vl.collections.LazyList`1" Doc="true" />
  </Overloads>
  <Overloads DisplayName="List class">
    <Symbol Key="::vl::collections::List`2" UrlName="vl.collections.List`2" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ListBase class">
    <Symbol Key="::vl::collections::ListBase`2" UrlName="vl.collections.ListBase`2" Doc="true" />
  </Overloads>
  <Overloads DisplayName="ListStore class">
    <Symbol Key="::vl::collections::ListStore`2" UrlName="vl.collections.ListStore`2" Doc="false" />
    <Symbol Key="::vl::collections::ListStore`1&lt;T,&lt;false&gt;&gt;" UrlName="vl.collections.ListStore`1{T,{false}}" Doc="false" />
    <Symbol Key="::vl::collections::ListStore`1&lt;T,&lt;true&gt;&gt;" UrlName="vl.collections.ListStore`1{T,{true}}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ObservableList class">
    <Symbol Key="::vl::collections::ObservableList`1" UrlName="vl.collections.ObservableList`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ObservableListBase class">
    <Symbol Key="::vl::collections::ObservableListBase`2" UrlName="vl.collections.ObservableListBase`2" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Pair class">
    <Symbol Key="::vl::collections::Pair`2" UrlName="vl.collections.Pair`2" Doc="true" />
  </Overloads>
  <Overloads DisplayName="PairwiseEnumerator class">
    <Symbol Key="::vl::collections::PairwiseEnumerator`2" UrlName="vl.collections.PairwiseEnumerator`2" Doc="false" />
  </Overloads>
  <Overloads DisplayName="PartialOrderingProcessor class">
    <Symbol Key="::vl::collections::PartialOrderingProcessor" UrlName="vl.collections.PartialOrderingProcessor" Doc="true" />
  </Overloads>
  <Overloads DisplayName="PushOnlyAllocator class">
    <Symbol Key="::vl::collections::PushOnlyAllocator`1" UrlName="vl.collections.PushOnlyAllocator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Range function">
    <Symbol Key="::vl::collections::Range`1(T,T)" UrlName="vl.collections.Range`1(T,T)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="RangeEnumerator class">
    <Symbol Key="::vl::collections::RangeEnumerator`1" UrlName="vl.collections.RangeEnumerator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="RepeatEnumerator class">
    <Symbol Key="::vl::collections::RepeatEnumerator`1" UrlName="vl.collections.RepeatEnumerator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="ReverseEnumerator class">
    <Symbol Key="::vl::collections::ReverseEnumerator`1" UrlName="vl.collections.ReverseEnumerator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="SelectEnumerator class">
    <Symbol Key="::vl::collections::SelectEnumerator`2" UrlName="vl.collections.SelectEnumerator`2" Doc="false" />
  </Overloads>
  <Overloads DisplayName="SkipEnumerator class">
    <Symbol Key="::vl::collections::SkipEnumerator`1" UrlName="vl.collections.SkipEnumerator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="Sort function">
    <Symbol Key="::vl::collections::Sort`1(* T,vint,&amp; const Func&lt;function (T, T) : vint&gt;)" UrlName="vl.collections.Sort`1(^ T,vint,&amp; const Func{function (T, T) # vint})" Doc="false" />
  </Overloads>
  <Overloads DisplayName="SortedList class">
    <Symbol Key="::vl::collections::SortedList`2" UrlName="vl.collections.SortedList`2" Doc="true" />
  </Overloads>
  <Overloads DisplayName="SortedListOperations struct">
    <Symbol Key="::vl::collections::SortedListOperations`1" UrlName="vl.collections.SortedListOperations`1" Doc="false" />
    <Symbol Key="::vl::collections::SortedListOperations`1&lt;Ptr&lt;T&gt;&gt;" UrlName="vl.collections.SortedListOperations`1{Ptr{T}}" Doc="false" />
  </Overloads>
  <Overloads DisplayName="SortLambda function">
    <Symbol Key="::vl::collections::SortLambda`2(* T,vint,F)" UrlName="vl.collections.SortLambda`2(^ T,vint,F)" Doc="false" />
  </Overloads>
  <Overloads DisplayName="TakeEnumerator class">
    <Symbol Key="::vl::collections::TakeEnumerator`1" UrlName="vl.collections.TakeEnumerator`1" Doc="false" />
  </Overloads>
  <Overloads DisplayName="WhereEnumerator class">
    <Symbol Key="::vl::collections::WhereEnumerator`1" UrlName="vl.collections.WhereEnumerator`1" Doc="false" />
  </Overloads>
</Namespace>